{"version":3,"sources":["stateManagement/store.js","components/AppHeader/AppHeader.js","stateManagement/actions.js","components/EmailActivityTile/EmailActivityTile.js","components/EmailActivity/EmailActivity.js","stateManagement/initialState.js","stateManagement/reducer.js","components/AccountInventory/AccountInventory.js","components/JourneyDetailModal/JourneyDetailModal.js","components/AccountInventoryDetails/AccountInventoryDetails.js","components/EmailActivityDetails/EmailActivityDetails.js","components/SubscribersSummaryTile/SubscribersSummaryTile.js","components/SubscribersSummary/SubscribersSummary.js","components/SubscribersSummaryDetails/SubscribersSummaryDetails.js","components/AuditTrail/AuditTrail.js","components/DownloadButton/DownloadButton.js","components/DownloadDataPage/DownloadDataPage.js","components/About/About.js","components/JourneyToolsPage/JourneyToolsPage.js","components/App/App.js","index.js"],"names":["middlewareEnhancer","AppHeader","props","state","pageSelected","BUs","this","businessUnitsJobState","label","businessUnits","map","bu","Name","ID","value","unshift","handleBuDisplayText","buSelected","businessUnitSelected","filter","id","iconPath","icon","category","name","size","title","variant","info","onRenderActions","align","assistiveText","iconCategory","iconName","iconVariant","options","checkmark","onSelect","dispatch","type","payload","className","to","onClick","setState","React","Component","connect","addEventDataJob","a","axios","post","response","eventDataJob","data","eventDataJobState","updateEventDataJob","get","eventData","result","addEmailInventoryJob","emailInventoryJob","emailInventoryJobState","updateEmailInventoryJob","emailInventory","addTemplateInventoryJob","templateInventoryJob","templateInventoryJobState","updateTemplateInventoryJob","templateInventory","addCategoriesJob","categoriesJob","categoriesJobState","updateCategoriesJob","categories","addTriggeredSendsJob","triggeredSendsJob","triggeredSendsJobState","updateTriggeredSendsJob","triggeredSends","addCloudPagesJob","cloudPagesJob","cloudPagesJobState","updateCloudPagesJob","cloudPages","addDataExtensionsJob","dataExtensionsJob","dataExtensionsJobState","updateDataExtensionsJob","dataExtensions","addFilterDataJob","filterDataJob","filterDataJobState","updateFilterDataJob","filterData","addQueriesJob","queriesJob","queriesJobState","updateQueriesJob","queries","addAutomationsJob","automationsJob","automationsJobState","updateAutomationsJob","automations","addJourneysJob","journeysJob","journeysJobState","updateJourneysJob","journeys","addBusinessUnitsJob","businessUnitsJob","updateBusinessUnitsJob","addAccountUsersJob","accountUsersJob","accountUsersJobState","updateAccountUsersJob","accountUsers","addSubscribersJob","subscribersJob","subscribersJobState","updateSubscribersJob","subscribers","addAuditEventsJob","auditEventsJob","auditEventsJobState","updateAuditEventsJob","auditEvents","toggleJourneyDetailModal","isOpenJourneyDetailModal","filterItemsBySelectedMID","mid","itemsArray","item","hasOwnProperty","memberId","Client","EmailActivityTile","handleSelection","emailActivitySelected","emailActivity","eventDataCount","sendData","length","openData","bounceData","clickData","unsubscribeData","handleRefresh","timerInterval","timer","counter","setInterval","seconds","minutes","Math","floor","remainingSeconds","formattedTime","toString","padStart","prevProps","prevState","clearInterval","heading","headerActions","header","body","figure","verticalCenter","initialState","roles","rolesJob","rolesJobState","allSubscribers","duplicateSubscribers","activeSubscribers","bouncedSubscribers","unsubscribedSubscribers","items","accountInventorySelected","subscribersSummarySelected","journeyDetailSelected","journeyDetails","journeyDetailsJob","journeyDetailsJobState","journeyAuditLog","journeyAuditLogJob","journeyAuditLogJobState","composeWithDevTools","applyMiddleware","store","next","action","thunk","createStore","handleClick","e","getState","target","innerText","CustomDataTableCell","children","displayName","DataTableCell","AccountInventory","inventoryItems","object","count","htmlEmailData","templateEmailData","textOnlyEmailData","columns","property","JourneyDetailModal","journeyId","journeyKey","journeyIdSelected","journey","journeyKeySelected","key","updateJourneyDetails","auditLogDetailColumns","activityDetailsColumns","auditLogDetails","activityDetails","forEach","push","user","timeStamp","activities","description","isOpen","onRequestClose","fixedHeader","fixedLayout","handleJourneyDetailModalOpen","JourneyDetailCell","AccountInventoryDetails","handleChangingSelection","selectedObjectDetailsList","customerKey","owner","status","categoryType","parentId","CustomerKey","Description","createdDate","CreatedDate","fromName","FromName","fromAddress","FromAddress","emailSubject","EmailSubject","triggeredSendType","TriggeredSendType","triggeredSendStatus","TriggeredSendStatus","contentType","Owner","isSendable","IsSendable","isTestable","IsTestable","rowBasedRetention","RowBasedRetention","resetRetentionPeriodOnImport","ResetRetentionPeriodOnImport","deleteAtEndOfRetentionPeriod","DeleteAtEndOfRetentionPeriod","retainUntil","RetainUntil","Status","targetType","TargetType","targetUpdateType","TargetUpdateType","categoryId","CategoryId","isActive","IsActive","version","entryMode","definitionType","currentPopulation","stats","cumulativePopulation","metGoal","metExitCriteria","goalPerformance","clientId","enterpriseId","EnterpriseID","email","Email","businessName","BusinessName","phone","Phone","address","Address","city","City","State","zip","Zip","country","Country","dbid","DBID","masterUnsubscribeBehavior","MasterUnsubscribeBehavior","userId","UserID","mustChangePassword","MustChangePassword","activeFlag","ActiveFlag","isApiUser","IsAPIUser","notificationEmailAddress","NotificationEmailAddress","defaultBusinessUnit","DefaultBusinessUnit","salesforceId","SalesForceID","lastLogin","LastSuccessfulLogin","toTitleCase","WrappedDataTableCell","class","EmailActivityDetails","isLoading","page","emailActivityDetails","SendID","listId","PartnerProperties","Value","SubscriberKey","EventDate","EventType","TriggeredSendDefinitionObjectID","BatchID","Id","smtpCode","SMTPCode","bounceCategory","BounceCategory","smtpReason","SMTPReason","handleFilterChange","event","filteredItems","isFiltering","RegExp","test","hasMore","isEmpty","onChange","placeholder","empty","SubscribersSummaryTile","console","log","SubscribersSummary","SubscribersSummaryDetails","subscribersSummaryDetails","EmailAddress","emailAddress","AuditTrail","handleUpdateToAuditEventsProps","PrevProps","PrevState","auditTrail","employee","employeeName","objectType","operation","DownloadButton","exportToExcel","downloadActionState","buttonState","counter1","counter2","sendId","subscriberKey","eventDate","eventType","triggeredSendDefinitionObjectId","batchId","filters","dataSourceName","DataSource","dataSourceCustomerKey","users","wb","Sheets","XLSX","json_to_sheet","templates","SheetNames","excelBuffer","bookType","Blob","fileType","today","Date","dd","String","getDate","mm","getMonth","yyyy","getFullYear","FileSaver","fileExtension","iconPosition","disabled","DownloadDataPage","hasNoHeader","About","data-testid","style","marginBottom","href","rel","src","alt","JourneyToolsPage","App","theme","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.42c57cc4.chunk.js","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport { customMiddleWare, reducer } from './reducer';\r\n\r\nlet middlewareEnhancer;\r\n\r\nif (process.env.NODE_ENV !== 'production') {\r\n  const logger = require('redux-logger').default;\r\n  middlewareEnhancer = composeWithDevTools(\r\n    applyMiddleware(logger, customMiddleWare, thunk)\r\n  );\r\n} else {\r\n  middlewareEnhancer = composeWithDevTools(\r\n    applyMiddleware(customMiddleWare, thunk)\r\n  );\r\n}\r\n\r\nlet store = createStore(reducer, middlewareEnhancer);\r\n\r\nexport { store };\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport {\r\n  PageHeader,\r\n  IconSettings,\r\n  Icon,\r\n  GlobalNavigationBar,\r\n  GlobalNavigationBarLink,\r\n  GlobalNavigationBarRegion,\r\n  GlobalNavigationBarButton,\r\n  Dropdown,\r\n  ButtonGroup,\r\n  PageHeaderControl,\r\n  Button\r\n} from '@salesforce/design-system-react';\r\nimport '../AppHeader/AppHeader.css';\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    businessUnits: state.businessUnits,\r\n    businessUnitsJobState: state.businessUnitsJobState,\r\n    businessUnitSelected: state.businessUnitSelected\r\n    // ...\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return { dispatch };\r\n};\r\n\r\n\r\nclass AppHeader extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      pageSelected: '/'\r\n    };\r\n  }\r\n\r\n  render() {\r\n\r\n    let BUs;\r\n\r\n\r\n    if (this.props.businessUnitsJobState !== 'completed') {\r\n      BUs = [{ label: 'Finding Business Units...'}]\r\n    } else {\r\n      BUs = this.props.businessUnits.map((bu) => {\r\n        return {\r\n          label: `${bu.Name} - ${bu.ID}`,\r\n          value: bu.ID\r\n        }\r\n      })\r\n      BUs.unshift({\r\n        label: 'All Business Units',\r\n        value: 'All'\r\n      })\r\n    }\r\n\r\n    const handleBuDisplayText = () => {\r\n      let buSelected = this.props.businessUnitSelected\r\n      let BUs = this.props.businessUnits\r\n\r\n      if (this.props.businessUnitsJobState !== 'completed') {\r\n        return 'Loading...'\r\n      } else if (buSelected === 'All') {\r\n        return 'All Business Units'\r\n      } else if (buSelected && buSelected !== 'All') {\r\n        let bu = BUs.filter(bu => bu.ID == buSelected)\r\n        return `${bu[0].Name} - ${bu[0].ID}`\r\n      }\r\n\r\n    }\r\n\r\n    const actions = () => (\r\n      <PageHeaderControl>\r\n        <ButtonGroup>\r\n          <Button\r\n            label={handleBuDisplayText()}\r\n          />\r\n          <Dropdown\r\n            align=\"right\"\r\n            assistiveText={{ icon: 'More Options' }}\r\n            iconCategory=\"utility\"\r\n            iconName=\"down\"\r\n            iconVariant=\"border-filled\"\r\n            id=\"page-header-dropdown-object-home-nav-right\"\r\n            label=\"Dropdown\"\r\n            options={BUs}\r\n            checkmark\r\n            onSelect={(value) => {\r\n              this.props.dispatch({\r\n                type: 'UPDATE_BUSINESS_UNIT_SELECTED',\r\n                payload: {\r\n                  businessUnitSelected: value.value\r\n                }\r\n              })\r\n            }}\r\n          />     \r\n        </ButtonGroup>\r\n      </PageHeaderControl>\r\n    )\r\n\r\n    return (\r\n      <div id=\"app-header\">\r\n        <IconSettings iconPath=\"/icons/\">\r\n          <PageHeader\r\n            icon={<Icon category=\"standard\" name=\"forecasts\" size=\"large\" />}\r\n            title=\"SFMC Audit Dashboard\"\r\n            variant=\"object-home\"\r\n            info=\"Welcome to the SFMC Audit Dashboard\"\r\n            onRenderActions={actions}\r\n          />\r\n          <div id=\"links\" className=\"slds-theme_default\">\r\n            <div className=\"slds-context-bar\">\r\n              <div className=\"slds-context-bar__primary\">\r\n                <li\r\n                  className={`slds-context-bar__item ${\r\n                    this.state.pageSelected === '/' ? 'slds-is-active' : null\r\n                  }`}\r\n                  id=\"home-link\"\r\n                >\r\n                  <Link\r\n                    to=\"/\"\r\n                    className=\"slds-context-bar__label-action\"\r\n                    onClick={() => this.setState({ pageSelected: '/' })}\r\n                  >\r\n                    <span className=\"slds-truncate\" title=\"Home\">\r\n                      Home\r\n                    </span>\r\n                  </Link>\r\n                </li>\r\n\r\n                <li\r\n                  className={`slds-context-bar__item ${\r\n                    this.state.pageSelected === '/auditTrail'\r\n                      ? 'slds-is-active'\r\n                      : null\r\n                  }`}\r\n                  id=\"audit-trail-link\"\r\n                >\r\n                  <Link\r\n                    to=\"/auditTrail\"\r\n                    className=\"slds-context-bar__label-action\"\r\n                    onClick={() => this.setState({ pageSelected: '/auditTrail' })}\r\n                  >\r\n                    <span className=\"slds-truncate\" title=\"AuditTrail\">\r\n                      Audit Trail\r\n                    </span>\r\n                  </Link>\r\n                </li>\r\n\r\n                {/* <li\r\n                  className={`slds-context-bar__item ${\r\n                    this.state.pageSelected === '/journeyTools'\r\n                      ? 'slds-is-active'\r\n                      : null\r\n                  }`}\r\n                  id=\"journey-tools\"\r\n                >\r\n                  <Link\r\n                    to=\"/journeyTools\"\r\n                    className=\"slds-context-bar__label-action\"\r\n                    onClick={() => this.setState({ pageSelected: '/journeyTools' })}\r\n                  >\r\n                    <span className=\"slds-truncate\" title=\"JourneyTools\">\r\n                      Journey Tools\r\n                    </span>\r\n                  </Link>\r\n                </li> */}\r\n\r\n                <li\r\n                  className={`slds-context-bar__item ${\r\n                    this.state.pageSelected === '/download'\r\n                      ? 'slds-is-active'\r\n                      : null\r\n                  }`}\r\n                  id=\"download-link\"\r\n                >\r\n                  <Link\r\n                    to=\"/download\"\r\n                    className=\"slds-context-bar__label-action\"\r\n                    onClick={() => this.setState({ pageSelected: '/download' })}\r\n                  >\r\n                    <span className=\"slds-truncate\" title=\"Download\">\r\n                      Download Data\r\n                    </span>\r\n                  </Link>\r\n                </li>\r\n                \r\n                <li\r\n                  className={`slds-context-bar__item ${\r\n                    this.state.pageSelected === '/about'\r\n                      ? 'slds-is-active'\r\n                      : null\r\n                  }`}\r\n                  id=\"about-link\"\r\n                >\r\n                  {/* <Link\r\n                    to=\"/about\"\r\n                    className=\"slds-context-bar__label-action\"\r\n                    onClick={() => this.setState({ pageSelected: '/about' })}\r\n                  >\r\n                    <span className=\"slds-truncate\" title=\"About\">\r\n                      About\r\n                    </span>\r\n                  </Link> */}\r\n                </li>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </IconSettings>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AppHeader);\r\n","import axios from 'axios';\r\n\r\n// insert actions below\r\n// ex. export function handleInput = (e) => { type: 'INPUT CHANGE', payload: { input: e.target.value }}\r\n\r\nexport const addEventDataJob = () => {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: 'ADD_GET_ALL_EVENT_DATA_JOB'\r\n    });\r\n\r\n    try {\r\n      let response = await axios.post('api/getAllEventData');\r\n\r\n      dispatch({\r\n        type: 'ADD_GET_ALL_EVENT_DATA_JOB_SUCCESS',\r\n        payload: {\r\n          eventDataJob: response.data.id,\r\n          eventDataJobState: response.data.state\r\n        }\r\n      });\r\n    } catch (e) {\r\n      dispatch({\r\n        type: 'ADD_GET_ALL_EVENT_DATA_JOB_ERROR'\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const updateEventDataJob = (id) => {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: 'UPDATE_GET_ALL_EVENT_DATA_JOB'\r\n    });\r\n\r\n    try {\r\n      let response = await axios.get(`api/getAllEventData/${id}`);\r\n\r\n      if (response.data.state === 'completed') {\r\n        dispatch({\r\n          type: 'UPDATE_GET_ALL_EVENT_DATA_JOB_SUCCESS',\r\n          payload: {\r\n            eventData: response.data.result,\r\n            eventDataJobState: response.data.state\r\n          }\r\n        });\r\n      }\r\n    } catch (e) {\r\n      dispatch({\r\n        type: 'UPDATE_GET_ALL_EVENT_DATA_JOB_ERROR'\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const addEmailInventoryJob = () => {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: 'ADD_EMAIL_INVENTORY_JOB'\r\n    });\r\n\r\n    try {\r\n      let response = await axios.post('api/getEmailInventory');\r\n\r\n      dispatch({\r\n        type: 'ADD_EMAIL_INVENTORY_JOB_SUCCESS',\r\n        payload: {\r\n          emailInventoryJob: response.data.id,\r\n          emailInventoryJobState: response.data.state\r\n        }\r\n      });\r\n    } catch (e) {\r\n      dispatch({\r\n        type: 'ADD_EMAIL_INVENTORY_JOB_ERROR'\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const updateEmailInventoryJob = (id) => {\r\n   return async (dispatch) => {\r\n    dispatch({\r\n      type: 'UPDATE_EMAIL_INVENTORY'\r\n    });\r\n\r\n    try {\r\n      let response = await axios.get(`api/getEmailInventory/${id}`);\r\n\r\n      if (response.data.state === 'completed') {\r\n        dispatch({\r\n          type: 'UPDATE_EMAIL_INVENTORY_SUCCESS',\r\n          payload: {\r\n            emailInventory: response.data.result,\r\n            emailInventoryJobState: response.data.state\r\n          }\r\n        });\r\n      }\r\n    } catch (e) {\r\n      dispatch({\r\n        type: 'UPDATE_EMAIL_INVENTORY_ERROR'\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const addTemplateInventoryJob = () => {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: 'ADD_TEMPLATE_INVENTORY_JOB'\r\n    });\r\n\r\n    try {\r\n      let response = await axios.post('api/getTemplateinventory');\r\n\r\n      dispatch({\r\n        type: 'ADD_TEMPLATE_INVENTORY_JOB_SUCCESS',\r\n        payload: {\r\n          templateInventoryJob: response.data.id,\r\n          templateInventoryJobState: response.data.state\r\n        }\r\n      });\r\n    } catch (e) {\r\n      dispatch({\r\n        type: 'ADD_TEMPLATE_INVENTORY_JOB_ERROR'\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const updateTemplateInventoryJob = (id) => {\r\n   return async (dispatch) => {\r\n    dispatch({\r\n      type: 'UPDATE_TEMPLATE_INVENTORY'\r\n    });\r\n\r\n    try {\r\n      let response = await axios.get(`api/getTemplateInventory/${id}`);\r\n\r\n      if (response.data.state === 'completed') {\r\n        dispatch({\r\n          type: 'UPDATE_TEMPLATE_INVENTORY_SUCCESS',\r\n          payload: {\r\n            templateInventory: response.data.result,\r\n            templateInventoryJobState: response.data.state\r\n          }\r\n        });\r\n      }\r\n    } catch (e) {\r\n      dispatch({\r\n        type: 'UPDATE_TEMPLATE_INVENTORY_ERROR'\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const addCategoriesJob = () => {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: 'ADD_CATEGORIES_JOB'\r\n    });\r\n\r\n    try {\r\n      let response = await axios.post('api/getCategories');\r\n\r\n      dispatch({\r\n        type: 'ADD_CATEGORIES_JOB_SUCCESS',\r\n        payload: {\r\n          categoriesJob: response.data.id,\r\n          categoriesJobState: response.data.state\r\n        }\r\n      });\r\n    } catch (e) {\r\n      dispatch({\r\n        type: 'ADD_CATEGORIES_JOB_ERROR'\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const updateCategoriesJob = (id) => {\r\n   return async (dispatch) => {\r\n    dispatch({\r\n      type: 'UPDATE_CATEGORIES'\r\n    });\r\n\r\n    try {\r\n      let response = await axios.get(`api/getCategories/${id}`);\r\n\r\n      if (response.data.state === 'completed') {\r\n        dispatch({\r\n          type: 'UPDATE_CATEGORIES_SUCCESS',\r\n          payload: {\r\n            categories: response.data.result,\r\n            categoriesJobState: response.data.state\r\n          }\r\n        });\r\n      }\r\n    } catch (e) {\r\n      dispatch({\r\n        type: 'UPDATE_CATEGORIES_ERROR'\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const addTriggeredSendsJob = () => {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: 'ADD_TRIGGERED_SENDS_JOB'\r\n    });\r\n\r\n    try {\r\n      let response = await axios.post('api/getTriggeredSends');\r\n\r\n      dispatch({\r\n        type: 'ADD_TRIGGERED_SENDS_JOB_SUCCESS',\r\n        payload: {\r\n          triggeredSendsJob: response.data.id,\r\n          triggeredSendsJobState: response.data.state\r\n        }\r\n      });\r\n    } catch (e) {\r\n      dispatch({\r\n        type: 'ADD_TRIGGERED_SENDS_JOB_ERROR'\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const updateTriggeredSendsJob = (id) => {\r\n   return async (dispatch) => {\r\n    dispatch({\r\n      type: 'UPDATE_TRIGGERED_SENDS'\r\n    });\r\n\r\n    try {\r\n      let response = await axios.get(`api/getTriggeredSends/${id}`);\r\n\r\n      if (response.data.state === 'completed') {\r\n        dispatch({\r\n          type: 'UPDATE_TRIGGERED_SENDS_SUCCESS',\r\n          payload: {\r\n            triggeredSends: response.data.result,\r\n            triggeredSendsJobState: response.data.state\r\n          }\r\n        });\r\n      }\r\n    } catch (e) {\r\n      dispatch({\r\n        type: 'UPDATE_TRIGGERED_SENDS_ERROR'\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const addCloudPagesJob = () => {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: 'ADD_CLOUD_PAGES_JOB'\r\n    });\r\n\r\n    try {\r\n      let response = await axios.post('/api/getCloudPage');\r\n\r\n      dispatch({\r\n        type: 'ADD_CLOUD_PAGES_JOB_SUCCESS',\r\n        payload: {\r\n          cloudPagesJob: response.data.id,\r\n          cloudPagesJobState: response.data.state\r\n        }\r\n      });\r\n    } catch (e) {\r\n      dispatch({\r\n        type: 'ADD_CLOUD_PAGES_JOB_ERROR'\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const updateCloudPagesJob = (id) => {\r\n   return async (dispatch) => {\r\n    dispatch({\r\n      type: 'UPDATE_CLOUD_PAGES'\r\n    });\r\n\r\n    try {\r\n      let response = await axios.get(`/api/getCloudPage/${id}`);\r\n\r\n      if (response.data.state === 'completed') {\r\n        dispatch({\r\n          type: 'UPDATE_CLOUD_PAGES_SUCCESS',\r\n          payload: {\r\n            cloudPages: response.data.result,\r\n            cloudPagesJobState: response.data.state\r\n          }\r\n        });\r\n      }\r\n    } catch (e) {\r\n      dispatch({\r\n        type: 'UPDATE_CLOUD_PAGES_ERROR'\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const addDataExtensionsJob = () => {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: 'ADD_DATA_EXTENSIONS_JOB'\r\n    });\r\n\r\n    try {\r\n      let response = await axios.post('/api/getAllDataExtensions');\r\n\r\n      dispatch({\r\n        type: 'ADD_DATA_EXTENSIONS_JOB_SUCCESS',\r\n        payload: {\r\n          dataExtensionsJob: response.data.id,\r\n          dataExtensionsJobState: response.data.state\r\n        }\r\n      });\r\n    } catch (e) {\r\n      dispatch({\r\n        type: 'ADD_DATA_EXTENSIONS_JOB_ERROR'\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const updateDataExtensionsJob = (id) => {\r\n   return async (dispatch) => {\r\n    dispatch({\r\n      type: 'UPDATE_DATA_EXTENSIONS'\r\n    });\r\n\r\n    try {\r\n      let response = await axios.get(`/api/getAllDataExtensions/${id}`);\r\n\r\n      if (response.data.state === 'completed') {\r\n        dispatch({\r\n          type: 'UPDATE_DATA_EXTENSIONS_SUCCESS',\r\n          payload: {\r\n            dataExtensions: response.data.result,\r\n            dataExtensionsJobState: response.data.state\r\n          }\r\n        });\r\n      }\r\n    } catch (e) {\r\n      dispatch({\r\n        type: 'UPDATE_DATA_EXTENSIONS_ERROR'\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const addFilterDataJob = () => {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: 'ADD_FILTER_DATA_JOB'\r\n    });\r\n\r\n    try {\r\n      let response = await axios.post('/api/getFilterData');\r\n\r\n      dispatch({\r\n        type: 'ADD_FILTER_DATA_JOB_SUCCESS',\r\n        payload: {\r\n          filterDataJob: response.data.id,\r\n          filterDataJobState: response.data.state\r\n        }\r\n      });\r\n    } catch (e) {\r\n      dispatch({\r\n        type: 'ADD_FILTER_DATA_JOB_ERROR'\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const updateFilterDataJob = (id) => {\r\n   return async (dispatch) => {\r\n    dispatch({\r\n      type: 'UPDATE_FILTER_DATA'\r\n    });\r\n\r\n    try {\r\n      let response = await axios.get(`/api/getFilterData/${id}`);\r\n\r\n      if (response.data.state === 'completed') {\r\n\r\n        dispatch({\r\n          type: 'UPDATE_FILTER_DATA_SUCCESS',\r\n          payload: {\r\n            filterData: response.data.result,\r\n            filterDataJobState: response.data.state\r\n          }\r\n        });\r\n      }\r\n    } catch (e) {\r\n      dispatch({\r\n        type: 'UPDATE_FILTER_DATA_ERROR'\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const addQueriesJob = () => {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: 'ADD_QUERIES_JOB'\r\n    });\r\n\r\n    try {\r\n      let response = await axios.post('/api/getQueries');\r\n\r\n      dispatch({\r\n        type: 'ADD_QUERIES_JOB_SUCCESS',\r\n        payload: {\r\n          queriesJob: response.data.id,\r\n          queriesJobState: response.data.state\r\n        }\r\n      });\r\n    } catch (e) {\r\n      dispatch({\r\n        type: 'ADD_QUERIES_JOB_ERROR'\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const updateQueriesJob = (id) => {\r\n   return async (dispatch) => {\r\n    dispatch({\r\n      type: 'UPDATE_QUERIES'\r\n    });\r\n\r\n    try {\r\n      let response = await axios.get(`/api/getQueries/${id}`);\r\n\r\n      if (response.data.state === 'completed') {\r\n        dispatch({\r\n          type: 'UPDATE_QUERIES_SUCCESS',\r\n          payload: {\r\n            queries: response.data.result,\r\n            queriesJobState: response.data.state\r\n          }\r\n        });\r\n      }\r\n    } catch (e) {\r\n      dispatch({\r\n        type: 'UPDATE_QUERIES_ERROR'\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const addAutomationsJob = () => {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: 'ADD_AUTOMATIONS_JOB'\r\n    });\r\n\r\n    try {\r\n      let response = await axios.post('/api/getAutomations');\r\n\r\n      dispatch({\r\n        type: 'ADD_AUTOMATIONS_JOB_SUCCESS',\r\n        payload: {\r\n          automationsJob: response.data.id,\r\n          automationsJobState: response.data.state\r\n        }\r\n      });\r\n    } catch (e) {\r\n      dispatch({\r\n        type: 'ADD_AUTOMATIONS_JOB_ERROR'\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const updateAutomationsJob = (id) => {\r\n   return async (dispatch) => {\r\n    dispatch({\r\n      type: 'UPDATE_AUTOMATIONS'\r\n    });\r\n\r\n    try {\r\n      let response = await axios.get(`/api/getAutomations/${id}`);\r\n\r\n      if (response.data.state === 'completed') {\r\n        dispatch({\r\n          type: 'UPDATE_AUTOMATIONS_SUCCESS',\r\n          payload: {\r\n            automations: response.data.result,\r\n            automationsJobState: response.data.state\r\n          }\r\n        });\r\n      }\r\n    } catch (e) {\r\n      dispatch({\r\n        type: 'UPDATE_AUTOMATIONS_ERROR'\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const addJourneysJob = () => {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: 'ADD_JOURNEYS_JOB'\r\n    });\r\n\r\n    try {\r\n      let response = await axios.post('/api/getJourneys');\r\n\r\n      dispatch({\r\n        type: 'ADD_JOURNEYS_JOB_SUCCESS',\r\n        payload: {\r\n          journeysJob: response.data.id,\r\n          journeysJobState: response.data.state\r\n        }\r\n      });\r\n    } catch (e) {\r\n      dispatch({\r\n        type: 'ADD_JOURNEYS_JOB_ERROR'\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const updateJourneysJob = (id) => {\r\n   return async (dispatch) => {\r\n    dispatch({\r\n      type: 'UPDATE_JOURNEYS'\r\n    });\r\n\r\n    try {\r\n      let response = await axios.get(`/api/getJourneys/${id}`);\r\n\r\n      if (response.data.state === 'completed') {\r\n        dispatch({\r\n          type: 'UPDATE_JOURNEYS_SUCCESS',\r\n          payload: {\r\n            journeys: response.data.result,\r\n            journeysJobState: response.data.state\r\n          }\r\n        });\r\n      }\r\n    } catch (e) {\r\n      dispatch({\r\n        type: 'UPDATE_JOURNEYS_ERROR'\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const addBusinessUnitsJob = () => {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: 'ADD_BUSINESS_UNITS_JOB'\r\n    });\r\n\r\n    try {\r\n      let response = await axios.post('/api/getBusinessUnits');\r\n\r\n      dispatch({\r\n        type: 'ADD_BUSINESS_UNITS_JOB_SUCCESS',\r\n        payload: {\r\n          businessUnitsJob: response.data.id,\r\n          businessUnitsJobState: response.data.state\r\n        }\r\n      });\r\n    } catch (e) {\r\n      dispatch({\r\n        type: 'ADD_BUSINESS_UNITS_JOB_ERROR'\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const updateBusinessUnitsJob = (id) => {\r\n   return async (dispatch) => {\r\n    dispatch({\r\n      type: 'UPDATE_BUSINESS_UNITS'\r\n    });\r\n\r\n    try {\r\n      let response = await axios.get(`/api/getBusinessUnits/${id}`);\r\n\r\n      if (response.data.state === 'completed') {\r\n        dispatch({\r\n          type: 'UPDATE_BUSINESS_UNITS_SUCCESS',\r\n          payload: {\r\n            businessUnits: response.data.result,\r\n            businessUnitsJobState: response.data.state\r\n          }\r\n        });\r\n      }\r\n    } catch (e) {\r\n      dispatch({\r\n        type: 'UPDATE_BUSINESS_UNITS_ERROR'\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const addAccountUsersJob = () => {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: 'ADD_ACCOUNT_USERS_JOB'\r\n    });\r\n\r\n    try {\r\n      let response = await axios.post('/api/getAccountUsers');\r\n\r\n      dispatch({\r\n        type: 'ADD_ACCOUNT_USERS_JOB_SUCCESS',\r\n        payload: {\r\n          accountUsersJob: response.data.id,\r\n          accountUsersJobState: response.data.state\r\n        }\r\n      });\r\n    } catch (e) {\r\n      dispatch({\r\n        type: 'ADD_ACCOUNT_USERS_JOB_ERROR'\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const updateAccountUsersJob = (id) => {\r\n   return async (dispatch) => {\r\n    dispatch({\r\n      type: 'UPDATE_ACCOUNT_USERS'\r\n    });\r\n\r\n    try {\r\n      let response = await axios.get(`/api/getAccountUsers/${id}`);\r\n\r\n      if (response.data.state === 'completed') {\r\n        dispatch({\r\n          type: 'UPDATE_ACCOUNT_USERS_SUCCESS',\r\n          payload: {\r\n            accountUsers: response.data.result,\r\n            accountUsersJobState: response.data.state\r\n          }\r\n        });\r\n      }\r\n    } catch (e) {\r\n      dispatch({\r\n        type: 'UPDATE_ACCOUNT_USERS_ERROR'\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const addRolesJob = () => {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: 'ADD_ROLES_JOB'\r\n    });\r\n\r\n    try {\r\n      let response = await axios.post('/api/getRoles');\r\n\r\n      dispatch({\r\n        type: 'ADD_ROLES_JOB_SUCCESS',\r\n        payload: {\r\n          rolesJob: response.data.id,\r\n          rolesJobState: response.data.state\r\n        }\r\n      });\r\n    } catch (e) {\r\n      dispatch({\r\n        type: 'ADD_ROLES_JOB_ERROR'\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const updateRolesJob = (id) => {\r\n   return async (dispatch) => {\r\n    dispatch({\r\n      type: 'UPDATE_ROLES'\r\n    });\r\n\r\n    try {\r\n      let response = await axios.get(`/api/getRoles/${id}`);\r\n\r\n      if (response.data.state === 'completed') {\r\n        dispatch({\r\n          type: 'UPDATE_ROLES_SUCCESS',\r\n          payload: {\r\n            roles: response.data.result,\r\n            rolesJobState: response.data.state\r\n          }\r\n        });\r\n      }\r\n    } catch (e) {\r\n      dispatch({\r\n        type: 'UPDATE_ROLES_ERROR'\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const changeAccountInventorySelected = (accountInventorySelected) => {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: 'CHANGE_ACCOUNT_INVENTORY_SELECTED',\r\n      payload: { \r\n        accountInventorySelected: accountInventorySelected\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport const changeEmailActivitySelected = (emailActivitySelected) => {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: 'CHANGE_EMAIL_ACTIVITY_SELECTED',\r\n      payload: { \r\n        emailActivitySelected: emailActivitySelected\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport const clearEmailActivitySelected = () => {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: 'CLEAR_EMAIL_ACTIVITY_SELECTED',\r\n      payload: {\r\n        emailActivitySelected: ''\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport const clearAccountInventorySelected = () => {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: 'CLEAR_ACCOUNT_INVENTORY_SELECTED',\r\n      payload: {\r\n        accountInventorySelected: ''\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport const addSubscribersJob = () => {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: 'ADD_SUBSCRIBERS_JOB'\r\n    });\r\n\r\n    try {\r\n      let response = await axios.post('/api/getSubscribers');\r\n\r\n      dispatch({\r\n        type: 'ADD_SUBSCRIBERS_JOB_SUCCESS',\r\n        payload: {\r\n          subscribersJob: response.data.id,\r\n          subscribersJobState: response.data.state\r\n        }\r\n      });\r\n    } catch (e) {\r\n      dispatch({\r\n        type: 'ADD_SUBSCRIBERS_JOB_ERROR'\r\n      });\r\n    }\r\n  };\r\n}\r\n\r\nexport const updateSubscribersJob = (id) => {\r\n  return async (dispatch) => {\r\n   dispatch({\r\n     type: 'UPDATE_SUBSCRIBERS'\r\n   });\r\n\r\n   try {\r\n     let response = await axios.get(`/api/getSubscribers/${id}`);\r\n\r\n     if (response.data.state === 'completed') {\r\n       dispatch({\r\n         type: 'UPDATE_SUBSCRIBERS_SUCCESS',\r\n         payload: {\r\n           subscribers: response.data.result,\r\n           subscribersJobState: response.data.state\r\n         }\r\n       });\r\n     }\r\n   } catch (e) {\r\n     dispatch({\r\n       type: 'UPDATE_SUBSCRIBERS_ERROR'\r\n     });\r\n   }\r\n };\r\n};\r\n\r\nexport const changeSubscribersSummarySelected = (subscribersSummarySelected) => {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: 'CHANGE_SUBSCRIBERS_SUMMARY_SELECTED',\r\n      payload: { \r\n        subscribersSummarySelected: subscribersSummarySelected\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport const clearSubscribersSummarySelected = () => {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: 'CLEAR_SUBSCRIBERS_SUMMARY_SELECTED',\r\n      payload: {\r\n        subscribersSummarySelected: ''\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport const addAuditEventsJob = () => {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: 'ADD_AUDIT_EVENTS_JOB'\r\n    });\r\n\r\n    try {\r\n      let response = await axios.post('/api/getAuditEvents');\r\n\r\n      dispatch({\r\n        type: 'ADD_AUDIT_EVENTS_JOB_SUCCESS',\r\n        payload: {\r\n          auditEventsJob: response.data.id,\r\n          auditEventsJobState: response.data.state\r\n        }\r\n      });\r\n    } catch (e) {\r\n      dispatch({\r\n        type: 'ADD_AUDIT_EVENTS_JOB_ERROR'\r\n      });\r\n    }\r\n  };\r\n}\r\n\r\nexport const updateAuditEventsJob = (id) => {\r\n  return async (dispatch) => {\r\n   dispatch({\r\n     type: 'UPDATE_AUDIT_EVENTS'\r\n   });\r\n\r\n   try {\r\n     let response = await axios.get(`/api/getAuditEvents/${id}`);\r\n\r\n     if (response.data.state === 'completed') {\r\n       dispatch({\r\n         type: 'UPDATE_AUDIT_EVENTS_SUCCESS',\r\n         payload: {\r\n           auditEvents: response.data.result,\r\n           auditEventsJobState: response.data.state\r\n         }\r\n       });\r\n     }\r\n   } catch (e) {\r\n     dispatch({\r\n       type: 'UPDATE_AUDIT_EVENTS_ERROR'\r\n     });\r\n   }\r\n };\r\n};\r\n\r\nexport const addGetJourneyAuditLogJob = (journeyId) => {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: 'ADD_JOURNEY_AUDIT_LOG_JOB'\r\n    });\r\n\r\n    try {\r\n      let response = await axios.post(`/api/getJourneyAuditLog`, { journeyId });\r\n\r\n      dispatch({\r\n        type: 'ADD_JOURNEY_AUDIT_LOG_JOB_SUCCESS',\r\n        payload: {\r\n          journeyAuditLogJob: response.data.id,\r\n          journeyAuditLogJobState: response.data.state\r\n        }\r\n      });\r\n    } catch (e) {\r\n      dispatch({\r\n        type: 'ADD_JOURNEY_AUDIT_LOG_JOB_ERROR'\r\n      });\r\n    }\r\n  };\r\n}\r\n\r\nexport const updateJourneyAuditLog = (id) => {\r\n  return async (dispatch) => {\r\n   dispatch({\r\n     type: 'UPDATE_JOURNEY_AUDIT_LOG'\r\n   });\r\n\r\n   try {\r\n     let response = await axios.get(`/api/getJourneyAuditLog/${id}`);\r\n\r\n     if (response.data.state === 'completed') {\r\n       dispatch({\r\n         type: 'UPDATE_JOURNEY_AUDIT_LOG_SUCCESS',\r\n         payload: {\r\n           journeyAuditLog: response.data.result,\r\n           journeyAuditLogJobState: response.data.state\r\n         }\r\n       });\r\n     }\r\n   } catch (e) {\r\n     dispatch({\r\n       type: 'UPDATE_JOURNEY_AUDIT_LOG_ERROR'\r\n     });\r\n   }\r\n };\r\n};\r\n\r\nexport const toggleJourneyDetailModal = (isOpenJourneyDetailModal) => {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: 'TOGGLE_JOURNEY_DETAIL_MODAL',\r\n      payload: {\r\n        isOpenJourneyDetailModal: isOpenJourneyDetailModal\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport const changeJourneyDetailSelected = (journeyDetailSelected) => {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: 'CHANGE_JOURNEY_DETAIL_SELECTED',\r\n      payload: { \r\n        journeyDetailSelected: journeyDetailSelected\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport const addGetJourneyDetailsJob = (journeyKey) => {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: 'ADD_GET_JOURNEY_DETAILS_JOB'\r\n    });\r\n\r\n    try {\r\n      let response = await axios.post(`/api/getJourneyDetails`, { journeyKey });\r\n\r\n      dispatch({\r\n        type: 'ADD_GET_JOURNEY_DETAILS_JOB_SUCCESS',\r\n        payload: {\r\n          journeyDetailsJob: response.data.id,\r\n          journeyDetailsJobState: response.data.state\r\n        }\r\n      });\r\n    } catch (e) {\r\n      dispatch({\r\n        type: 'ADD_GET_JOURNEY_DETAILS_JOB_ERROR'\r\n      });\r\n    }\r\n  };\r\n}\r\n\r\nexport const updateJourneyDetails = (id) => {\r\n  return async (dispatch) => {\r\n   dispatch({\r\n     type: 'UPDATE_JOURNEY_DETAILS'\r\n   });\r\n\r\n   try {\r\n     let response = await axios.get(`/api/getJourneyDetails/${id}`);\r\n\r\n     if (response.data.state === 'completed') {\r\n       dispatch({\r\n         type: 'UPDATE_JOURNEY_DETAILS_SUCCESS',\r\n         payload: {\r\n           journeyDetails: response.data.result,\r\n           journeyDetailsJobState: response.data.state\r\n         }\r\n       });\r\n     }\r\n   } catch (e) {\r\n     dispatch({\r\n       type: 'UPDATE_JOURNEY_DETAILS_ERROR'\r\n     });\r\n   }\r\n };\r\n};\r\n\r\nexport const filterItemsBySelectedMID = (mid, itemsArray) => {\r\n  if (mid === 'All') {\r\n    return itemsArray\r\n  } else {\r\n    return itemsArray.filter(item => {\r\n      if (item.hasOwnProperty('memberId')) {\r\n        return item.memberId == mid\r\n      } else {\r\n        return item.Client.ID == mid\r\n      }\r\n    })\r\n  }\r\n}","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { \r\n  changeEmailActivitySelected,\r\n  clearEmailActivitySelected \r\n} from '../../stateManagement/actions';\r\nimport { filterItemsBySelectedMID } from '../../stateManagement/actions';\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    eventDataJob: state.eventDataJob,\r\n    eventData: state.eventData,\r\n    eventDataJobState: state.eventDataJobState,\r\n    emailActivitySelected: state.emailActivitySelected,\r\n    businessUnitSelected: state.businessUnitSelected\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return { dispatch }\r\n}\r\n\r\n\r\n\r\nclass EmailActivityTile extends Component {\r\n  constructor(props) {\r\n    super(props) \r\n  }\r\n\r\n\r\n  handleSelection = () => {\r\n    if (this.props.emailActivity === this.props.emailActivitySelected) {\r\n      this.props.dispatch(clearEmailActivitySelected())\r\n    } else {\r\n      this.props.dispatch(changeEmailActivitySelected(this.props.emailActivity))\r\n    }\r\n  }\r\n  \r\n  render() {\r\n    let label;\r\n    let eventDataSelection;\r\n    let eventDataCount;\r\n\r\n    switch(this.props.emailActivity) {\r\n      case 'sends':\r\n        label = 'Sends'\r\n        eventDataSelection = 'sendData'\r\n        if (this.props.businessUnitSelected === 'All') {\r\n          eventDataCount = this.props.eventData.sendData.length\r\n        } else {\r\n          eventDataCount = filterItemsBySelectedMID(this.props.businessUnitSelected, this.props.eventData.sendData).length || 0 \r\n        }\r\n        \r\n        break;\r\n\r\n      case 'opens':\r\n        label = 'Opens'\r\n        eventDataSelection = 'openData'\r\n        eventDataCount = filterItemsBySelectedMID(this.props.businessUnitSelected, this.props.eventData.openData).length || 0 \r\n        break;\r\n\r\n      case 'bounces':\r\n        label = 'Bounces'\r\n        eventDataSelection = 'bounceData'\r\n        eventDataCount = filterItemsBySelectedMID(this.props.businessUnitSelected, this.props.eventData.bounceData).length || 0 \r\n        break;\r\n\r\n      case 'clicks':\r\n        label = 'Clicks'\r\n        eventDataSelection = 'clickData'\r\n        eventDataCount = filterItemsBySelectedMID(this.props.businessUnitSelected, this.props.eventData.clickData).length || 0 \r\n        break;\r\n\r\n      case 'unsubscribes':\r\n        label = 'Unsubscribes'\r\n        eventDataSelection = 'unsubscribeData'\r\n        eventDataCount = filterItemsBySelectedMID(this.props.businessUnitSelected, this.props.eventData.unsubscribeData).length || 0 \r\n        break;\r\n\r\n      default:\r\n    }\r\n    \r\n    return (\r\n      <div className=\"slds-col slds-p-horizontal_small emailActivity-card\">\r\n        <div className=\"slds-box EmailActivityCard\" onClick={this.handleSelection}>\r\n          <div className=\"slds-text-title_caps slds-text-align_center\">\r\n            <b>{label}</b>\r\n          </div>\r\n          \r\n            <div className=\"slds-text-heading_medium slds-text-align_center\">\r\n              <div className=\"slds-text-heading_large slds-text-align_center\">\r\n                {eventDataCount}\r\n              </div>\r\n            </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EmailActivityTile);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  IconSettings,\r\n  PageHeader,\r\n  Icon,\r\n  Card,\r\n  Button,\r\n  MediaObject\r\n} from '@salesforce/design-system-react';\r\nimport './EmailActivity.css';\r\nimport {\r\n  addEventDataJob,\r\n  updateEventDataJob,\r\n  changeEmailActivitySelected\r\n} from '../../stateManagement/actions';\r\nimport EmailActivityTile from '../EmailActivityTile/EmailActivityTile';\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    eventDataJob: state.eventDataJob,\r\n    eventData: state.eventData,\r\n    eventDataJobState: state.eventDataJobState\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return { dispatch };\r\n};\r\n\r\nclass emailActivity extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      timerInterval: null,\r\n      timer: \"00:00\"\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.props.eventDataJobState !== 'completed') {\r\n      this.props.dispatch(addEventDataJob());\r\n\r\n\r\n      let counter = 0\r\n\r\n      setInterval(() => {\r\n        if (this.props.eventDataJobState !== 'completed' && counter < 50) {\r\n          counter++ \r\n          this.props.dispatch(updateEventDataJob(this.props.eventDataJob));\r\n        }\r\n      }, 2000);\r\n\r\n      let seconds = 0;\r\n      // Store the timer ID in the component state\r\n      let timerInterval = setInterval(() => {\r\n        seconds++;\r\n        let minutes = Math.floor(seconds / 60);\r\n        let remainingSeconds = seconds % 60;\r\n        let formattedTime = `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;\r\n        this.setState({ timer: formattedTime });\r\n      }, 1000)\r\n\r\n      this.setState({timerInterval})\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    // When component is refreshed\r\n    if (prevProps.eventDataJobState === 'completed' && this.props.eventDataJobState !== 'completed') {\r\n      setInterval(() => {\r\n        if (this.props.eventDataJobState !== 'completed') {\r\n          this.props.dispatch(updateEventDataJob(this.props.eventDataJob));\r\n        }\r\n      }, 2000);\r\n\r\n      // reset timer \r\n      this.setState({timer: \"00:00\"})\r\n      let seconds = 0;\r\n      // Store the timer ID in the component state\r\n      let timerInterval = setInterval(() => {\r\n        seconds++;\r\n        let minutes = Math.floor(seconds / 60);\r\n        let remainingSeconds = seconds % 60;\r\n        let formattedTime = `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;\r\n        this.setState({ timer: formattedTime });\r\n      }, 1000)\r\n\r\n      this.setState({timerInterval})\r\n\r\n    }\r\n\r\n    if (this.props.eventDataJobState === 'completed') {\r\n      clearInterval(this.state.timerInterval)\r\n    }\r\n  }\r\n\r\n  handleRefresh = () => {\r\n    this.props.dispatch(addEventDataJob());\r\n  }\r\n\r\n  render() {\r\n    let info;\r\n    \r\n    if (this.props.eventDataJobState !== 'completed') {\r\n      info = (\r\n        <div className=\"slds-text-color_weak\">\r\n          Retrieving results...\r\n        </div>\r\n      )\r\n    } else {\r\n      info = (\r\n        <div className=\"slds-text-color_success\">\r\n          Finished - Results retrieved! \r\n        </div>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <div id=\"EmailActivity-panel\">\r\n\r\n        <IconSettings iconPath='/icons/'>\r\n          <div className='slds-grid slds-grid_vertical'>\r\n            <Card\r\n              id='ExampleCard'\r\n              heading='Subscribers Summary'\r\n              headerActions={\r\n                <Button label=\"Refresh\" onClick={this.handleRefresh} /> \r\n              }\r\n              header={\r\n                <MediaObject \r\n                  body={\r\n                    <>\r\n                      <div className='slds-text-heading_medium'>\r\n                        Email Activity\r\n                      </div>\r\n                      {info}\r\n                      {this.state.timer}\r\n                    </>\r\n                  }\r\n                  figure={<Icon category=\"standard\" name='email' />}\r\n                  verticalCenter\r\n                />\r\n              }\r\n            >\r\n              <div className=\"slds-grid slds-gutter emailActivity-wrapper\">\r\n                <EmailActivityTile emailActivity={'sends'} />\r\n                <EmailActivityTile emailActivity={'opens'} />\r\n                <EmailActivityTile emailActivity={'bounces'} />\r\n                <EmailActivityTile emailActivity={'clicks'} />\r\n                <EmailActivityTile emailActivity={'unsubscribes'} />\r\n              </div>\r\n            </Card>\r\n          </div>\r\n        </IconSettings>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(emailActivity);\r\n","const initialState = {\r\n  // Define initial state below\r\n  eventData: {\r\n    sendData: [],\r\n    openData: [],\r\n    clickData: [],\r\n    unsubscribeData: [],\r\n    bounceData: []\r\n  },\r\n  eventDataJob: 0,\r\n  eventDataJobState: '',\r\n  emailInventory: {},\r\n  emailInventoryJob: 0,\r\n  emailInventoryJobState: '',\r\n  templateInventory: {},\r\n  templateInventoryJob: 0,\r\n  templateInventoryJobState: '',\r\n  categories: {},\r\n  categoriesJob: 0,\r\n  categoriesJobState: '',\r\n  triggeredSends: {},\r\n  triggeredSendsJob: 0,\r\n  triggeredSendsJobState: '',\r\n  cloudPages: {},\r\n  cloudPagesJob: 0,\r\n  cloudPagesJobState: '',\r\n  dataExtensions: {},\r\n  dataExtensionsJob: 0,\r\n  dataExtensionsJobState: '',\r\n  filterData: {},\r\n  filterDataJob: 0,\r\n  filterDataJobState: '',\r\n  queries: [],\r\n  queriesJob: 0,\r\n  queriesJobState: '',\r\n  automations: [],\r\n  automationsJob: 0,\r\n  automationsJobState: '',\r\n  journeys: [],\r\n  journeysJob: 0,\r\n  journeysJobState: '',\r\n  businessUnits: [],\r\n  businessUnitsJob: 0,\r\n  businessUnitsJobState: '',\r\n  accountUsers: [],\r\n  accountUsersJob: 0,\r\n  accountUsersJobState: '',\r\n  roles: [],\r\n  rolesJob: 0,\r\n  rolesJobState: '',\r\n  subscribers: {\r\n    allSubscribers: [],\r\n    duplicateSubscribers: [],\r\n    activeSubscribers: [],\r\n    bouncedSubscribers: [],\r\n    unsubscribedSubscribers: []\r\n  },\r\n  subscribersJob: 0,\r\n  subscribersJobState: '',\r\n  auditEvents: {\r\n    items: []\r\n  },\r\n  auditEventsJob: 0,\r\n  auditEventsJobState: '',\r\n  accountInventorySelected: '',\r\n  emailActivitySelected: '',\r\n  subscribersSummarySelected: '',\r\n  isOpenJourneyDetailModal: false,\r\n  journeyDetailSelected: '',\r\n  journeyDetails: {},\r\n  journeyDetailsJob: 0,\r\n  journeyDetailsJobState: '',\r\n  journeyAuditLog: {},\r\n  journeyAuditLogJob: 0,\r\n  journeyAuditLogJobState: '',\r\n  businessUnitSelected: 'All'\r\n  // ...\r\n};\r\n\r\nexport default initialState;\r\n","import initialState from './initialState';\r\n\r\nconst customMiddleWare = (store) => (next) => (action) => {\r\n  // Custom Middleware\r\n  // ...\r\n\r\n\r\n  return next(action);\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'ADD_GET_ALL_EVENT_DATA_JOB':\r\n      return {\r\n        ...state\r\n      };\r\n    case 'ADD_GET_ALL_EVENT_DATA_JOB_SUCCESS':\r\n      return {\r\n        ...state,\r\n        eventDataJob: action.payload.eventDataJob,\r\n        eventDataJobState: action.payload.eventDataJobState\r\n      };\r\n    case 'UPDATE_GET_ALL_EVENT_DATA_JOB':\r\n      return {\r\n        ...state\r\n      };\r\n    case 'UPDATE_GET_ALL_EVENT_DATA_JOB_SUCCESS':\r\n      return {\r\n        ...state,\r\n        eventData: action.payload.eventData,\r\n        eventDataJobState: action.payload.eventDataJobState\r\n      };\r\n    case 'ADD_EMAIL_INVENTORY_JOB':\r\n      return {\r\n        ...state\r\n      };\r\n    case 'ADD_EMAIL_INVENTORY_JOB_SUCCESS':\r\n      return {\r\n        ...state,\r\n        emailInventoryJob: action.payload.emailInventoryJob,\r\n        emailInventoryJobState: action.payload.emailInventoryJobState\r\n      };\r\n    case 'UPDATE_EMAIL_INVENTORY':\r\n      return {\r\n        ...state\r\n      };\r\n    case 'UPDATE_EMAIL_INVENTORY_SUCCESS':\r\n      return {\r\n        ...state,\r\n        emailInventory: action.payload.emailInventory,\r\n        emailInventoryJobState: action.payload.emailInventoryJobState\r\n      };\r\n    case 'ADD_TEMPLATE_INVENTORY_JOB':\r\n      return {\r\n        ...state\r\n      };\r\n    case 'ADD_TEMPLATE_INVENTORY_JOB_SUCCESS':\r\n      return {\r\n        ...state,\r\n        templateInventoryJob: action.payload.templateInventoryJob,\r\n        templateInventoryJobState: action.payload.templateInventoryJobState\r\n      };\r\n    case 'UPDATE_TEMPLATE_INVENTORY':\r\n      return {\r\n        ...state\r\n      };\r\n    case 'UPDATE_TEMPLATE_INVENTORY_SUCCESS':\r\n      return {\r\n        ...state,\r\n        templateInventory: action.payload.templateInventory,\r\n        templateInventoryJobState: action.payload.templateInventoryJobState\r\n      };\r\n    case 'ADD_CATEGORIES_JOB':\r\n      return {\r\n        ...state\r\n      };\r\n    case 'ADD_CATEGORIES_JOB_SUCCESS':\r\n      return {\r\n        ...state,\r\n        categoriesJob: action.payload.categoriesJob,\r\n        categoriesJobState: action.payload.categoriesJobState\r\n      };\r\n    case 'UPDATE_CATEGORIES':\r\n      return {\r\n        ...state\r\n      };\r\n    case 'UPDATE_CATEGORIES_SUCCESS':\r\n      return {\r\n        ...state,\r\n        categories: action.payload.categories,\r\n        categoriesJobState: action.payload.categoriesJobState\r\n      };\r\n    case 'ADD_TRIGGERED_SENDS_JOB':\r\n      return {\r\n        ...state\r\n      };\r\n    case 'ADD_TRIGGERED_SENDS_JOB_SUCCESS':\r\n      return {\r\n        ...state,\r\n        triggeredSendsJob: action.payload.triggeredSendsJob,\r\n        triggeredSendsJobState: action.payload.triggeredSendsJobState\r\n      };\r\n    case 'UPDATE_TRIGGERED_SENDS':\r\n      return {\r\n        ...state\r\n      };\r\n    case 'UPDATE_TRIGGERED_SENDS_SUCCESS':\r\n      return {\r\n        ...state,\r\n        triggeredSends: action.payload.triggeredSends,\r\n        triggeredSendsJobState: action.payload.triggeredSendsJobState\r\n      };\r\n    case 'ADD_CLOUD_PAGES_JOB':\r\n      return {\r\n        ...state\r\n      };\r\n    case 'ADD_CLOUD_PAGES_JOB_SUCCESS':\r\n      return {\r\n        ...state,\r\n        cloudPagesJob: action.payload.cloudPagesJob,\r\n        cloudPagesJobState: action.payload.cloudPagesJobState\r\n      };\r\n    case 'UPDATE_CLOUD_PAGES':\r\n      return {\r\n        ...state\r\n      };\r\n    case 'UPDATE_CLOUD_PAGES_SUCCESS':\r\n      return {\r\n        ...state,\r\n        cloudPages: action.payload.cloudPages,\r\n        cloudPagesJobState: action.payload.cloudPagesJobState\r\n      };\r\n    case 'ADD_DATA_EXTENSIONS_JOB':\r\n      return {\r\n        ...state\r\n      };\r\n    case 'ADD_DATA_EXTENSIONS_JOB_SUCCESS':\r\n      return {\r\n        ...state,\r\n        dataExtensionsJob: action.payload.dataExtensionsJob,\r\n        dataExtensionsJobState: action.payload.dataExtensionsJobState\r\n      };\r\n    case 'UPDATE_DATA_EXTENSIONS':\r\n      return {\r\n        ...state\r\n      };\r\n    case 'UPDATE_DATA_EXTENSIONS_SUCCESS':\r\n      return {\r\n        ...state,\r\n        dataExtensions: action.payload.dataExtensions,\r\n        dataExtensionsJobState: action.payload.dataExtensionsJobState\r\n      };\r\n    case 'ADD_FILTER_DATA_JOB':\r\n      return {\r\n        ...state\r\n      };\r\n    case 'ADD_FILTER_DATA_JOB_SUCCESS':\r\n      return {\r\n        ...state,\r\n        filterDataJob: action.payload.filterDataJob,\r\n        filterDataJobState: action.payload.filterDataJobState\r\n      };\r\n    case 'UPDATE_FILTER_DATA':\r\n      return {\r\n        ...state\r\n      };\r\n    case 'UPDATE_FILTER_DATA_SUCCESS':\r\n      return {\r\n        ...state,\r\n        filterData: action.payload.filterData,\r\n        filterDataJobState: action.payload.filterDataJobState\r\n      };\r\n    case 'ADD_QUERIES_JOB':\r\n      return {\r\n        ...state\r\n      };\r\n    case 'ADD_QUERIES_JOB_SUCCESS':\r\n      return {\r\n        ...state,\r\n        queriesJob: action.payload.queriesJob,\r\n        queriesJobState: action.payload.queriesJobState\r\n      };\r\n    case 'UPDATE_QUERIES':\r\n      return {\r\n        ...state\r\n      };\r\n    case 'UPDATE_QUERIES_SUCCESS':\r\n      return {\r\n        ...state,\r\n        queries: action.payload.queries,\r\n        queriesJobState: action.payload.queriesJobState\r\n      };\r\n    case 'ADD_AUTOMATIONS_JOB':\r\n      return {\r\n        ...state\r\n      };\r\n    case 'ADD_AUTOMATIONS_JOB_SUCCESS':\r\n      return {\r\n        ...state,\r\n        automationsJob: action.payload.automationsJob,\r\n        automationsJobState: action.payload.automationsJobState\r\n      };\r\n    case 'UPDATE_AUTOMATIONS':\r\n      return {\r\n        ...state\r\n      };\r\n    case 'UPDATE_AUTOMATIONS_SUCCESS':\r\n      return {\r\n        ...state,\r\n        automations: action.payload.automations,\r\n        automationsJobState: action.payload.automationsJobState\r\n      };\r\n    case 'ADD_JOURNEYS_JOB':\r\n      return {\r\n        ...state\r\n      };\r\n    case 'ADD_JOURNEYS_JOB_SUCCESS':\r\n      return {\r\n        ...state,\r\n        journeysJob: action.payload.journeysJob,\r\n        journeysJobState: action.payload.journeysJobState\r\n      };\r\n    case 'UPDATE_JOURNEYS':\r\n      return {\r\n        ...state\r\n      };\r\n    case 'UPDATE_JOURNEYS_SUCCESS':\r\n      return {\r\n        ...state,\r\n        journeys: action.payload.journeys,\r\n        journeysJobState: action.payload.journeysJobState\r\n      };\r\n    case 'ADD_BUSINESS_UNITS_JOB':\r\n      return {\r\n        ...state\r\n      };\r\n    case 'ADD_BUSINESS_UNITS_JOB_SUCCESS':\r\n      return {\r\n        ...state,\r\n        businessUnitsJob: action.payload.businessUnitsJob,\r\n        businessUnitsJobState: action.payload.businessUnitsJobState\r\n      };\r\n    case 'UPDATE_BUSINESS_UNITS':\r\n      return {\r\n        ...state\r\n      };\r\n    case 'UPDATE_BUSINESS_UNITS_SUCCESS':\r\n      return {\r\n        ...state,\r\n        businessUnits: action.payload.businessUnits,\r\n        businessUnitsJobState: action.payload.businessUnitsJobState\r\n      };\r\n    case 'ADD_ACCOUNT_USERS_JOB':\r\n      return {\r\n        ...state\r\n      };\r\n    case 'ADD_ACCOUNT_USERS_JOB_SUCCESS':\r\n      return {\r\n        ...state,\r\n        accountUsersJob: action.payload.accountUsersJob,\r\n        accountUsersJobState: action.payload.accountUsersJobState\r\n      };\r\n    case 'UPDATE_ACCOUNT_USERS':\r\n      return {\r\n        ...state\r\n      };\r\n    case 'UPDATE_ACCOUNT_USERS_SUCCESS':\r\n      return {\r\n        ...state,\r\n        accountUsers: action.payload.accountUsers,\r\n        accountUsersJobState: action.payload.accountUsersJobState\r\n      };\r\n    case 'ADD_ROLES_JOB':\r\n      return {\r\n        ...state\r\n      };\r\n    case 'ADD_ROLES_JOB_SUCCESS':\r\n      return {\r\n        ...state,\r\n        rolesJob: action.payload.rolesJob,\r\n        rolesJobState: action.payload.rolesJobState\r\n      };\r\n    case 'UPDATE_ROLES':\r\n      return {\r\n        ...state\r\n      };\r\n    case 'UPDATE_ROLES_SUCCESS':\r\n      return {\r\n        ...state,\r\n        roles: action.payload.roles,\r\n        rolesJobState: action.payload.rolesJobState\r\n      };\r\n    case 'CHANGE_ACCOUNT_INVENTORY_SELECTED':\r\n      return {\r\n        ...state,\r\n        accountInventorySelected: action.payload.accountInventorySelected\r\n      }\r\n    case 'CHANGE_EMAIL_ACTIVITY_SELECTED':\r\n      return {\r\n        ...state,\r\n        emailActivitySelected: action.payload.emailActivitySelected\r\n      }\r\n    // Action delivers empty 'emailActivitySelected' prop\r\n    case 'CLEAR_EMAIL_ACTIVITY_SELECTED':\r\n      return {\r\n        ...state,\r\n        emailActivitySelected: action.payload.emailActivitySelected\r\n      }\r\n    case 'CLEAR_ACCOUNT_INVENTORY_SELECTED':\r\n      return {\r\n        ...state,\r\n        accountInventorySelected: action.payload.accountInventorySelected\r\n      }\r\n    case 'ADD_SUBSCRIBERS_JOB': \r\n      return {\r\n        ...state\r\n      }\r\n    case 'ADD_SUBSCRIBERS_JOB_SUCCESS': \r\n      return {\r\n        ...state,\r\n        subscribersJob: action.payload.subscribersJob,\r\n        subscribersJobState: action.payload.subscribersJobState\r\n      }\r\n    case 'UPDATE_SUBSCRIBERS':\r\n      return {\r\n        ...state\r\n      }\r\n    case 'UPDATE_SUBSCRIBERS_SUCCESS':\r\n      return {\r\n        ...state,\r\n        subscribers: action.payload.subscribers,\r\n        subscribersJobState: action.payload.subscribersJobState\r\n      }\r\n    case 'CHANGE_SUBSCRIBERS_SUMMARY_SELECTED':\r\n      return {\r\n        ...state,\r\n        subscribersSummarySelected: action.payload.subscribersSummarySelected\r\n      }\r\n    case 'CLEAR_SUBSCRIBERS_SUMMARY_SELECTED': \r\n      return {\r\n        ...state,\r\n        subscribersSummarySelected: action.payload.subscribersSummarySelected\r\n      }\r\n    case 'ADD_AUDIT_EVENTS_JOB':\r\n      return {\r\n        ...state\r\n      }\r\n    case 'ADD_AUDIT_EVENTS_JOB_SUCCESS': \r\n      return {\r\n        ...state,\r\n        auditEventsJob: action.payload.auditEventsJob,\r\n        auditEventsJobState: action.payload.auditEventsJobState\r\n      }\r\n    case 'UPDATE_AUDIT_EVENTS':\r\n      return {\r\n        ...state\r\n      }\r\n    case 'UPDATE_AUDIT_EVENTS_SUCCESS':\r\n      return {\r\n        ...state,\r\n        auditEvents: action.payload.auditEvents,\r\n        auditEventsJobState: action.payload.auditEventsJobState\r\n      }\r\n    case 'ADD_JOURNEY_AUDIT_LOG_JOB':\r\n      return {\r\n        ...state\r\n      }\r\n    case 'ADD_JOURNEY_AUDIT_LOG_JOB_SUCCESS':\r\n      return {\r\n        ...state,\r\n        journeyAuditLogJob: action.payload.journeyAuditLogJob,\r\n        journeyAuditLogJobState: action.payload.journeyAuditLogJobState\r\n      }\r\n    case 'UPDATE_JOURNEY_AUDIT_LOG':\r\n      return {\r\n        ...state\r\n      }\r\n    case 'UPDATE_JOURNEY_AUDIT_LOG_SUCCESS':\r\n      return {\r\n        ...state,\r\n        journeyAuditLog: action.payload.journeyAuditLog,\r\n        journeyAuditLogJobState: action.payload.journeyAuditLogJobState\r\n      }\r\n    case 'TOGGLE_JOURNEY_DETAIL_MODAL':\r\n      return {\r\n        ...state,\r\n        isOpenJourneyDetailModal: action.payload.isOpenJourneyDetailModal\r\n      }\r\n    case 'CHANGE_JOURNEY_DETAIL_SELECTED':\r\n      return {\r\n        ...state,\r\n        journeyDetailSelected: action.payload.journeyDetailSelected\r\n      }\r\n    case 'ADD_GET_JOURNEY_DETAILS_JOB':\r\n      return {\r\n        ...state\r\n      }\r\n    case 'ADD_GET_JOURNEY_DETAILS_JOB_SUCCESS':\r\n      return {\r\n        ...state,\r\n        journeyDetailsJob: action.payload.journeyDetailsJob,\r\n        journeyDetailsJobState: action.payload.journeyDetailsJobState\r\n      }\r\n    case 'UPDATE_JOURNEY_DETAILS':\r\n      return {\r\n        ...state\r\n      }\r\n    case 'UPDATE_JOURNEY_DETAILS_SUCCESS':\r\n      return {\r\n        ...state,\r\n        journeyDetails: action.payload.journeyDetails,\r\n        journeyDetailsJobState: action.payload.journeyDetailsJobState\r\n      }\r\n    case 'UPDATE_BUSINESS_UNIT_SELECTED':\r\n      \r\n    \r\n      return{\r\n        ...state,\r\n        businessUnitSelected: action.payload.businessUnitSelected,\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport { customMiddleWare, reducer };\r\n","import React, { Component } from 'react';\r\nimport {\r\n  PageHeader,\r\n  IconSettings,\r\n  Icon,\r\n  DataTable,\r\n  DataTableColumn,\r\n  DataTableCell,\r\n  Spinner,\r\n  Card,\r\n  Button,\r\n  MediaObject\r\n} from '@salesforce/design-system-react';\r\nimport { connect } from 'react-redux';\r\nimport { \r\n  addEmailInventoryJob, \r\n  updateEmailInventoryJob,\r\n  addTemplateInventoryJob,\r\n  updateTemplateInventoryJob,\r\n  addCategoriesJob,\r\n  updateCategoriesJob,\r\n  addTriggeredSendsJob,\r\n  updateTriggeredSendsJob,\r\n  addCloudPagesJob,\r\n  updateCloudPagesJob,\r\n  addDataExtensionsJob,\r\n  updateDataExtensionsJob,\r\n  addFilterDataJob,\r\n  updateFilterDataJob,\r\n  addQueriesJob,\r\n  updateQueriesJob,\r\n  addAutomationsJob,\r\n  updateAutomationsJob,\r\n  addJourneysJob,\r\n  updateJourneysJob,\r\n  addBusinessUnitsJob,\r\n  updateBusinessUnitsJob,\r\n  addAccountUsersJob,\r\n  updateAccountUsersJob,\r\n  addRolesJob,\r\n  updateRolesJob,\r\n  changeAccountInventorySelected,\r\n  clearAccountInventorySelected,\r\n  filterItemsBySelectedMID\r\n} from '../../stateManagement/actions'\r\nimport './AccountInventory.css'\r\nimport { BrowserRouter, Route, Link } from 'react-router-dom';\r\nimport { store } from '../../stateManagement/store' // importing to dispatch action outside component scope\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    emailInventory: state.emailInventory,\r\n    emailInventoryJob: state.emailInventoryJob,\r\n    emailInventoryJobState: state.emailInventoryJobState,\r\n    templateInventory: state.templateInventory,\r\n    templateInventoryJob: state.templateInventoryJob,\r\n    templateInventoryJobState: state.templateInventoryJobState,\r\n    categories: state.categories,\r\n    categoriesJob: state.categoriesJob,\r\n    categoriesJobState: state.categoriesJobState,\r\n    triggeredSends: state.triggeredSends,\r\n    triggeredSendsJob: state.triggeredSendsJob,\r\n    triggeredSendsJobState: state.triggeredSendsJobState,\r\n    cloudPages: state.cloudPages,\r\n    cloudPagesJob: state.cloudPagesJob,\r\n    cloudPagesJobState: state.cloudPagesJobState,\r\n    dataExtensions: state.dataExtensions,\r\n    dataExtensionsJob: state.dataExtensionsJob,\r\n    dataExtensionsJobState: state.dataExtensionsJobState,\r\n    filterData: state.filterData,\r\n    filterDataJob: state.filterDataJob,\r\n    filterDataJobState: state.filterDataJobState,\r\n    queries: state.queries,\r\n    queriesJob: state.queriesJob,\r\n    queriesJobState: state.queriesJobState,\r\n    automations: state.automations,\r\n    automationsJob: state.automationsJob,\r\n    automationsJobState: state.automationsJobState,\r\n    journeys: state.journeys,\r\n    journeysJob: state.journeysJob,\r\n    journeysJobState: state.journeysJobState,\r\n    businessUnits: state.businessUnits,\r\n    businessUnitsJob: state.businessUnitsJob,\r\n    businessUnitsJobState: state.businessUnitsJobState,\r\n    accountUsers: state.accountUsers,\r\n    accountUsersJob: state.accountUsersJob,\r\n    accountUsersJobState: state.accountUsersJobState,\r\n    businessUnitSelected: state.businessUnitSelected\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return { dispatch };\r\n};\r\n\r\n// Handles the logic for changing the details if User selects a different item or clearing it if they select the same item \r\nconst handleClick = (e) => {\r\n  let state = store.getState()\r\n  if (state.accountInventorySelected === e.target.innerText) {\r\n    store.dispatch(clearAccountInventorySelected())\r\n  } else {\r\n    store.dispatch(changeAccountInventorySelected(e.target.innerText))\r\n  }\r\n}\r\n\r\nconst CustomDataTableCell = ({ children, ...props }) => (\r\n  <DataTableCell {...props}>\r\n    <Link to=\"/\" onClick={handleClick}>\r\n      {children}\r\n    </Link>\r\n  </DataTableCell>\r\n)\r\nCustomDataTableCell.displayName = DataTableCell.displayName;\r\n\r\n\r\nclass AccountInventory extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      timer: \"00:00\",\r\n      timerInterval: null\r\n    }\r\n  }\r\n  \r\n  componentDidMount() {\r\n    if (\r\n      this.props.emailInventoryJobState === '' &&\r\n      this.props.templateInventoryJobState === '' &&\r\n      this.props.categoriesJobState === '' &&\r\n      this.props.triggeredSendsJobState === '' &&\r\n      this.props.cloudPagesJobState === '' &&\r\n      this.props.dataExtensionsJobState === '' &&\r\n      this.props.filterDataJobState === '' &&\r\n      this.props.queriesJobState === '' &&\r\n      this.props.automationsJobState === '' &&\r\n      this.props.journeysJobState === '' && \r\n      this.props.businessUnitsJobState === '' &&\r\n      this.props.accountUsersJobState === '' \r\n    ) {\r\n      this.props.dispatch(addEmailInventoryJob())\r\n      this.props.dispatch(addTemplateInventoryJob())\r\n      this.props.dispatch(addCategoriesJob())\r\n      this.props.dispatch(addTriggeredSendsJob())\r\n      this.props.dispatch(addCloudPagesJob())\r\n      this.props.dispatch(addDataExtensionsJob())\r\n      this.props.dispatch(addFilterDataJob())\r\n      this.props.dispatch(addQueriesJob())\r\n      this.props.dispatch(addAutomationsJob())\r\n      this.props.dispatch(addJourneysJob())\r\n      this.props.dispatch(addBusinessUnitsJob())\r\n      this.props.dispatch(addAccountUsersJob())\r\n\r\n      let counter = 0\r\n      setInterval(() => {\r\n        if (\r\n          counter < 50 &&\r\n          (\r\n            this.props.emailInventoryJobState !== 'completed' ||\r\n            this.props.templateInventoryJobState !== 'completed' ||\r\n            this.props.categoriesJobState !== 'completed' ||\r\n            this.props.triggeredSendsJobState !== 'completed' ||\r\n            this.props.cloudPagesJobState !== 'completed' ||\r\n            this.props.dataExtensionsJobState !== 'completed' ||\r\n            // this.props.filterDataJobState !== 'completed' ||\r\n            this.props.queriesJobState !== 'completed' ||\r\n            this.props.automationsJobState !== 'completed' ||\r\n            this.props.journeysJobState !== 'completed' ||\r\n            this.props.businessUnitsJobState !== 'completed' ||\r\n            this.props.accountUsersJobState !== 'completed' \r\n          )\r\n        ) {\r\n          counter++\r\n\r\n          if (this.props.emailInventoryJobState !== 'completed') {\r\n            this.props.dispatch(updateEmailInventoryJob(this.props.emailInventoryJob));\r\n          } \r\n  \r\n          if (this.props.templateInventoryJobState !== 'completed') {\r\n            this.props.dispatch(updateTemplateInventoryJob(this.props.templateInventoryJob));\r\n          }\r\n          \r\n          if (this.props.categoriesJobState !== 'completed') {\r\n            this.props.dispatch(updateCategoriesJob(this.props.categoriesJob));\r\n          }\r\n  \r\n          if (this.props.triggeredSendsJobState !== 'completed') {\r\n            this.props.dispatch(updateTriggeredSendsJob(this.props.triggeredSendsJob));\r\n          }\r\n  \r\n          if (this.props.cloudPagesJobState !== 'completed') {\r\n            this.props.dispatch(updateCloudPagesJob(this.props.cloudPagesJob));\r\n          }\r\n  \r\n          if (this.props.dataExtensionsJobState !== 'completed') {\r\n            this.props.dispatch(updateDataExtensionsJob(this.props.dataExtensionsJob));\r\n          }\r\n  \r\n          if (this.props.filterDataJobState !== 'completed') {\r\n            this.props.dispatch(updateFilterDataJob(this.props.filterDataJob));\r\n          }\r\n  \r\n          if (this.props.queriesJobState !== 'completed') {\r\n            this.props.dispatch(updateQueriesJob(this.props.queriesJob));\r\n          }\r\n  \r\n          if (this.props.automationsJobState !== 'completed') {\r\n            this.props.dispatch(updateAutomationsJob(this.props.automationsJob));\r\n          }\r\n  \r\n          if (this.props.journeysJobState !== 'completed' ) {\r\n            this.props.dispatch(updateJourneysJob(this.props.journeysJob));\r\n          }\r\n  \r\n          if (this.props.businessUnitsJobState !== 'completed') {\r\n            this.props.dispatch(updateBusinessUnitsJob(this.props.businessUnitsJob))\r\n          }\r\n  \r\n          if (this.props.accountUsersJobState !== 'completed') {\r\n            this.props.dispatch(updateAccountUsersJob(this.props.accountUsersJob))\r\n          }\r\n        }    \r\n      }, 2000 )\r\n    }\r\n\r\n    if (\r\n      this.props.emailInventoryJobState !== 'completed' &&\r\n      this.props.templateInventoryJobState !== 'completed' &&\r\n      this.props.categoriesJobState !== 'completed' &&\r\n      this.props.triggeredSendsJobState !== 'completed' &&\r\n      this.props.cloudPagesJobState !== 'completed' &&\r\n      this.props.dataExtensionsJobState !== 'completed' &&\r\n      this.props.queriesJobState !== 'completed' &&\r\n      this.props.automationsJobState !== 'completed' &&\r\n      this.props.journeysJobState !== 'completed' &&\r\n      this.props.businessUnitsJobState !== 'completed' &&\r\n      this.props.accountUsersJobState !== 'completed' \r\n    ) {\r\n      let seconds = 0;\r\n      // Store the timer ID in the component state\r\n      let timerInterval = setInterval(() => {\r\n        seconds++;\r\n        let minutes = Math.floor(seconds / 60);\r\n        let remainingSeconds = seconds % 60;\r\n        let formattedTime = `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;\r\n        this.setState({ timer: formattedTime });\r\n      }, 1000)\r\n\r\n      this.setState({timerInterval})\r\n    }\r\n  }  \r\n\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (\r\n      (\r\n        prevProps.emailInventoryJobState === 'completed' &&\r\n        prevProps.templateInventoryJobState === 'completed' &&\r\n        prevProps.categoriesJobState === 'completed' &&\r\n        prevProps.triggeredSendsJobState === 'completed' &&\r\n        prevProps.cloudPagesJobState === 'completed' &&\r\n        prevProps.dataExtensionsJobState === 'completed' &&\r\n        // prevProps.filterDataJobState === 'completed' &&\r\n        prevProps.queriesJobState === 'completed' &&\r\n        prevProps.automationsJobState === 'completed' &&\r\n        prevProps.journeysJobState === 'completed' && \r\n        prevProps.businessUnitsJobState === 'completed' &&\r\n        prevProps.accountUsersJobState === 'completed' \r\n      ) \r\n      &&\r\n      (\r\n        this.props.emailInventoryJobState !== 'completed' ||\r\n        this.props.templateInventoryJobState !== 'completed' ||\r\n        this.props.categoriesJobState !== 'completed' ||\r\n        this.props.triggeredSendsJobState !== 'completed' ||\r\n        this.props.cloudPagesJobState !== 'completed' ||\r\n        this.props.dataExtensionsJobState !== 'completed' ||\r\n        // this.props.filterDataJobState !== 'completed' ||\r\n        this.props.queriesJobState !== 'completed' ||\r\n        this.props.automationsJobState !== 'completed' ||\r\n        this.props.journeysJobState !== 'completed' ||\r\n        this.props.businessUnitsJobState !== 'completed' ||\r\n        this.props.accountUsersJobState !== 'completed'\r\n      )\r\n    ) {\r\n      setInterval(() => {\r\n        if (this.props.emailInventoryJobState !== 'completed') {\r\n          this.props.dispatch(updateEmailInventoryJob(this.props.emailInventoryJob));\r\n        } \r\n\r\n        if (this.props.templateInventoryJobState !== 'completed') {\r\n          this.props.dispatch(updateTemplateInventoryJob(this.props.templateInventoryJob));\r\n        }\r\n        \r\n        if (this.props.categoriesJobState !== 'completed') {\r\n          this.props.dispatch(updateCategoriesJob(this.props.categoriesJob));\r\n        }\r\n\r\n        if (this.props.triggeredSendsJobState !== 'completed') {\r\n          this.props.dispatch(updateTriggeredSendsJob(this.props.triggeredSendsJob));\r\n        }\r\n\r\n        if (this.props.cloudPagesJobState !== 'completed') {\r\n          this.props.dispatch(updateCloudPagesJob(this.props.cloudPagesJob));\r\n        }\r\n\r\n        if (this.props.dataExtensionsJobState !== 'completed') {\r\n          this.props.dispatch(updateDataExtensionsJob(this.props.dataExtensionsJob));\r\n        }\r\n\r\n        // if (this.props.filterDataJobState !== 'completed') {\r\n        //   this.props.dispatch(updateFilterDataJob(this.props.filterDataJob));\r\n        // }\r\n\r\n        if (this.props.queriesJobState !== 'completed') {\r\n          this.props.dispatch(updateQueriesJob(this.props.queriesJob));\r\n        }\r\n\r\n        if (this.props.automationsJobState !== 'completed') {\r\n          this.props.dispatch(updateAutomationsJob(this.props.automationsJob));\r\n        }\r\n\r\n        if (this.props.journeysJobState !== 'completed' ) {\r\n          this.props.dispatch(updateJourneysJob(this.props.journeysJob));\r\n        }\r\n\r\n        if (this.props.businessUnitsJobState !== 'completed') {\r\n          this.props.dispatch(updateBusinessUnitsJob(this.props.businessUnitsJob))\r\n        }\r\n\r\n        if (this.props.accountUsersJobState !== 'completed') {\r\n          this.props.dispatch(updateAccountUsersJob(this.props.accountUsersJob))\r\n        }\r\n\r\n        // if (this.props.rolesJobState !== 'completed') {\r\n        //   this.props.dispatch(updateRolesJob(this.props.rolesJob))\r\n        // }\r\n\r\n      }, 2000 )\r\n\r\n      // reset timer \r\n      this.setState({timer: \"00:00\"})\r\n\r\n      let seconds = 0;\r\n      // Store the timer ID in the component state\r\n      let timerInterval = setInterval(() => {\r\n        seconds++;\r\n        let minutes = Math.floor(seconds / 60);\r\n        let remainingSeconds = seconds % 60;\r\n        let formattedTime = `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;\r\n        this.setState({ timer: formattedTime });\r\n      }, 1000)\r\n\r\n      this.setState({timerInterval})\r\n    }\r\n\r\n    if (\r\n      this.props.emailInventoryJobState === 'completed' &&\r\n      this.props.templateInventoryJobState === 'completed' &&\r\n      this.props.categoriesJobState === 'completed' &&\r\n      this.props.triggeredSendsJobState === 'completed' &&\r\n      this.props.cloudPagesJobState === 'completed' &&\r\n      this.props.dataExtensionsJobState === 'completed' &&\r\n      this.props.queriesJobState === 'completed' &&\r\n      this.props.automationsJobState === 'completed' &&\r\n      this.props.journeysJobState === 'completed' &&\r\n      this.props.businessUnitsJobState === 'completed' &&\r\n      this.props.accountUsersJobState === 'completed' \r\n    ) {\r\n      clearInterval(this.state.timerInterval)\r\n    }\r\n  }\r\n\r\n  handleRefresh = () => {\r\n    this.props.dispatch(addEmailInventoryJob())\r\n    this.props.dispatch(addTemplateInventoryJob())\r\n    this.props.dispatch(addCategoriesJob())\r\n    this.props.dispatch(addTriggeredSendsJob())\r\n    this.props.dispatch(addCloudPagesJob())\r\n    this.props.dispatch(addDataExtensionsJob())\r\n    this.props.dispatch(addFilterDataJob())\r\n    this.props.dispatch(addQueriesJob())\r\n    this.props.dispatch(addAutomationsJob())\r\n    this.props.dispatch(addJourneysJob())\r\n    this.props.dispatch(addBusinessUnitsJob())\r\n    this.props.dispatch(addAccountUsersJob())\r\n    // this.props.dispatch(addRolesJob())\r\n  }\r\n\r\n\r\n  render() {\r\n    let displayResult;\r\n    let inventoryItems;\r\n    let info;\r\n\r\n    if (\r\n      this.props.emailInventoryJobState === 'completed' &&\r\n      this.props.templateInventoryJobState === 'completed' &&\r\n      this.props.categoriesJobState === 'completed' &&\r\n      this.props.triggeredSendsJobState === 'completed' &&\r\n      this.props.cloudPagesJobState === 'completed' &&\r\n      this.props.dataExtensionsJobState === 'completed' &&\r\n      // this.props.filterDataJobState === 'completed' &&\r\n      this.props.queriesJobState === 'completed' &&\r\n      this.props.automationsJobState === 'completed' &&\r\n      this.props.journeysJobState === 'completed' && \r\n      this.props.businessUnitsJobState === 'completed' &&\r\n      this.props.accountUsersJobState === 'completed'\r\n\r\n    ) {\r\n\r\n      inventoryItems = [\r\n        {\r\n          object: 'Html Emails',\r\n          count: filterItemsBySelectedMID(this.props.businessUnitSelected, this.props.emailInventory.htmlEmailData.items).length\r\n        },\r\n        {\r\n          object: 'Templated Emails',\r\n          count: filterItemsBySelectedMID(this.props.businessUnitSelected, this.props.emailInventory.templateEmailData.items).length  \r\n        },\r\n        {\r\n          object: 'Text Only Emails',\r\n          count: filterItemsBySelectedMID(this.props.businessUnitSelected, this.props.emailInventory.textOnlyEmailData.items).length   \r\n        },\r\n        {\r\n          object: 'Templates',\r\n          count: filterItemsBySelectedMID(this.props.businessUnitSelected, this.props.templateInventory.items).length \r\n        },\r\n        {\r\n          object: 'Categories',\r\n          count: filterItemsBySelectedMID(this.props.businessUnitSelected, this.props.categories.items).length \r\n        },\r\n        {\r\n          object: 'Triggered Sends',\r\n          count: filterItemsBySelectedMID(this.props.businessUnitSelected, this.props.triggeredSends).length\r\n        },\r\n        {\r\n          object: 'Cloud Pages',\r\n          count: filterItemsBySelectedMID(this.props.businessUnitSelected, this.props.cloudPages.items).length\r\n        },\r\n        {\r\n          object: 'Data Extensions',\r\n          count: filterItemsBySelectedMID(this.props.businessUnitSelected, this.props.dataExtensions).length\r\n        },\r\n        // {\r\n        //   object: 'Filters',\r\n        //   count: filterItemsBySelectedMID(this.props.businessUnitSelected, this.props.filterData).length\r\n        // },\r\n        {\r\n          object: 'Queries',\r\n          count: filterItemsBySelectedMID(this.props.businessUnitSelected, this.props.queries).length\r\n        },\r\n        {\r\n          object: 'Automations',\r\n          count: filterItemsBySelectedMID(this.props.businessUnitSelected, this.props.automations).length\r\n        },\r\n        {\r\n          object: 'Journeys',\r\n          count: filterItemsBySelectedMID(this.props.businessUnitSelected, this.props.journeys.items).length \r\n        },\r\n        // Might remove Business units if it only returns the BU the app runs in\r\n        {\r\n          object: 'Business Units',\r\n          count: filterItemsBySelectedMID(this.props.businessUnitSelected, this.props.businessUnits).length\r\n        },\r\n        {\r\n          object: 'Users',\r\n          count: filterItemsBySelectedMID(this.props.businessUnitSelected, this.props.accountUsers).length\r\n        },\r\n      ]\r\n\r\n      info = (\r\n        <div className=\"slds-text-color_success\">\r\n          Finished - Results retrieved! \r\n        </div>\r\n      )\r\n    } else {\r\n      info = (\r\n        <div className=\"slds-text-color_weak\">\r\n          Retrieving results...\r\n        </div>\r\n      )\r\n      inventoryItems = []    \r\n    }\r\n\r\n    let columns = [\r\n      <DataTableColumn \r\n        key='object'\r\n        label='Object'\r\n        property='object'\r\n      >\r\n        <CustomDataTableCell />\r\n      </DataTableColumn>,\r\n      <DataTableColumn \r\n        key='count'\r\n        label='Count'\r\n        property='count'\r\n      />\r\n    ]\r\n\r\n    return (\r\n      <div className=\"AccountInventory-panel\">\r\n        <IconSettings iconPath='/icons/'>\r\n          <div className='slds-grid slds-grid_vertical'>\r\n            <Card\r\n              id='ExampleCard'\r\n              heading='Subscribers Summary'\r\n              headerActions={\r\n                <Button label=\"Refresh\" onClick={this.handleRefresh} /> \r\n              }\r\n              header={\r\n                <MediaObject \r\n                  body={\r\n                    <>\r\n                      <div className='slds-text-heading_medium'>\r\n                        Account Inventory\r\n                      </div>\r\n                      {info}\r\n                      {this.state.timer}\r\n                    </>\r\n                  }\r\n                  figure={<Icon category=\"standard\" name=\"account\" />}\r\n                  verticalCenter\r\n                />\r\n              }\r\n            >\r\n              { inventoryItems && \r\n                <DataTable items={inventoryItems}>\r\n                  {columns}\r\n                </DataTable> \r\n              }\r\n            </Card>\r\n          </div>\r\n        </IconSettings>\r\n      </div>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AccountInventory);\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport {\r\n  IconSettings,\r\n  Modal,\r\n  Icon,\r\n  DataTable,\r\n  DataTableColumn,\r\n  Card\r\n} from '@salesforce/design-system-react';\r\nimport {\r\n  toggleJourneyDetailModal,\r\n  addGetJourneyAuditLogJob,\r\n  updateJourneyAuditLog,\r\n  addGetJourneyDetailsJob,\r\n  updateJourneyDetails\r\n} from '../../stateManagement/actions';\r\nimport '../JourneyDetailModal/JourneyDetailModal.css'\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isOpenJourneyDetailModal: state.isOpenJourneyDetailModal,\r\n  journeyDetailSelected: state.journeyDetailSelected,\r\n  journeys: state.journeys,\r\n  journeyAuditLog: state.journeyAuditLog,\r\n  journeyAuditLogJob: state.journeyAuditLogJob,\r\n  journeyAuditLogJobState: state.journeyAuditLogJobState,\r\n  journeyDetails: state.journeyDetails,\r\n  journeyDetailsJob: state.journeyDetailsJob,\r\n  journeyDetailsJobState: state.journeyDetailsJobState\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return { dispatch }\r\n}\r\n\r\nexport class JourneyDetailModal extends Component {\r\n\r\n  componentDidMount() {\r\n\r\n    let journeyIdSelected = this.props.journeys.items.filter(journey => journey.name === this.props.journeyDetailSelected)[0].id\r\n    let journeyKeySelected = this.props.journeys.items.filter(journey => journey.name === this.props.journeyDetailSelected)[0].key\r\n\r\n    this.props.dispatch(addGetJourneyAuditLogJob(journeyIdSelected))\r\n    this.props.dispatch(addGetJourneyDetailsJob(journeyKeySelected))\r\n\r\n    let counter = 0\r\n    setInterval(() => {\r\n      if (\r\n        this.props.journeyAuditLogJobState !== 'completed' &&\r\n        this.props.journeyDetailsJobState !== 'completed' && \r\n        counter < 10\r\n      ) {\r\n        counter++\r\n        this.props.dispatch(updateJourneyAuditLog(this.props.journeyAuditLogJob))\r\n        this.props.dispatch(updateJourneyDetails(this.props.journeyDetailsJob))\r\n      }\r\n    }, 2000)\r\n  }\r\n  \r\n\r\n  render() {\r\n  \r\n    let  auditLogDetailColumns = [\r\n      <DataTableColumn key='action' label='Action' property='action' />,\r\n      <DataTableColumn key='user' label='User' property='user' />,\r\n      <DataTableColumn key='timeStamp' label='Time Stamp' property='timeStamp' />,\r\n    ]\r\n\r\n    let activityDetailsColumns = [\r\n      <DataTableColumn key='id' label='Id' property='id' />,\r\n      <DataTableColumn key='key' label='Key' property='key' />,\r\n      <DataTableColumn key='name' label='Name' property='name' />,\r\n      <DataTableColumn key='description' label='Description' property='description' />,\r\n      <DataTableColumn key='type' label='Type' property='type' />,\r\n    ]\r\n\r\n    let auditLogDetails = []\r\n    let activityDetails = []\r\n\r\n\r\n    if (this.props.journeyAuditLogJobState === 'completed') {\r\n      this.props.journeyAuditLog.items.forEach(item => {\r\n        auditLogDetails.push({\r\n          action: item.action,\r\n          user: item.user.name,\r\n          timeStamp: item.timeStamp\r\n        })\r\n      });\r\n    }\r\n\r\n    if (this.props.journeyDetailsJobState === 'completed') {\r\n      this.props.journeyDetails.activities.forEach(item => {\r\n        activityDetails.push({\r\n          id: item.id,\r\n          key: item.key,\r\n          name: item.name,\r\n          description: item.description,\r\n          type: item.type\r\n        })\r\n      })\r\n    }\r\n  \r\n    return (\r\n      <Modal\r\n        isOpen={this.props.isOpenJourneyDetailModal}\r\n        onRequestClose={() => this.props.dispatch(toggleJourneyDetailModal(!this.props.isOpenJourneyDetailModal))}\r\n        size=\"large\"\r\n        heading={this.props.journeyDetailSelected}\r\n      >\r\n        <IconSettings iconPath={\"/icons/\"} >\r\n          <div>\r\n            <Card\r\n              heading=\"Activities\"\r\n            >\r\n              <DataTable \r\n                items={activityDetails}\r\n                fixedHeader\r\n                fixedLayout\r\n              >\r\n                {activityDetailsColumns}\r\n              </DataTable>\r\n            </Card>\r\n\r\n            <Card\r\n              heading=\"Audit Log History\"\r\n            >\r\n              <DataTable \r\n                items={auditLogDetails}\r\n                fixedHeader\r\n                fixedLayout\r\n              >\r\n                {auditLogDetailColumns}\r\n              </DataTable>\r\n            </Card>\r\n\r\n          </div>\r\n          \r\n        </IconSettings>\r\n\r\n      </Modal>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(JourneyDetailModal)\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport {\r\n  DataTable,\r\n  DataTableColumn,\r\n  DataTableCell,\r\n  PageHeader,\r\n  IconSettings,\r\n  Card,\r\n  MediaObject\r\n} from '@salesforce/design-system-react';\r\nimport toTitleCase from 'titlecase'\r\nimport JourneyDetailModal from '../JourneyDetailModal/JourneyDetailModal';\r\nimport { \r\n  toggleJourneyDetailModal, \r\n  addGetJourneyAuditLogJob,\r\n  changeJourneyDetailSelected,\r\n  filterItemsBySelectedMID\r\n} from '../../stateManagement/actions';\r\nimport { store } from '../../stateManagement/store';\r\nimport filter from '@salesforce/design-system-react/lib/components/combobox/filter';\r\nimport './AccountInventoryDetails.css'\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {dispatch}\r\n}\r\n\r\n\r\n// for some reason state isn't mapping to props...\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    accountInventorySelected: state.accountInventorySelected,\r\n    emailInventory: state.emailInventory,\r\n    templateInventory: state.templateInventory,\r\n    categories: state.categories,\r\n    triggeredSends: state.triggeredSends,\r\n    cloudPages: state.cloudPages,\r\n    dataExtensions: state.dataExtensions,\r\n    filterData: state.filterData,\r\n    queries: state.queries,\r\n    automations: state.automations,\r\n    journeys: state.journeys,\r\n    businessUnits: state.businessUnits,\r\n    accountUsers: state.accountUsers,\r\n    isOpenJourneyDetailModal: state.isOpenJourneyDetailModal,\r\n    businessUnitSelected: state.businessUnitSelected\r\n  };\r\n};\r\n\r\nconst WrappedDataTableCell = ({ children, ...props }) => (\r\n  <DataTableCell {...props} >\r\n    <td class=\"slds-cell-wrap\" >{children}</td>\r\n  </DataTableCell>\r\n);\r\n\r\nWrappedDataTableCell.displayName = DataTableCell.displayName;\r\n\r\nconst handleJourneyDetailModalOpen = (e) => {\r\n  let state = store.getState()\r\n\r\n  store.dispatch(changeJourneyDetailSelected(e.target.innerText))\r\n  store.dispatch(toggleJourneyDetailModal(!state.isOpenJourneyDetailModal))\r\n}\r\n\r\n\r\nconst JourneyDetailCell = ({ children, ...props }) => (\r\n  <DataTableCell {...props} >\r\n    <a onClick={handleJourneyDetailModalOpen}>{children}</a>\r\n  </DataTableCell>\r\n);\r\n\r\nJourneyDetailCell.displayName = DataTableCell.displayName;\r\n\r\n\r\nclass AccountInventoryDetails extends React.Component  {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      items: [],    // gets updated by handleChangingSelection()\r\n      columns: [],  // gets updated by handleChangingSelection()\r\n    }\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    this.handleChangingSelection()\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    // if this.props.emailActivitySelected changes...\r\n    if (prevProps.accountInventorySelected !== this.props.accountInventorySelected) {\r\n      this.handleChangingSelection()\r\n    }\r\n  }\r\n\r\n  handleChangingSelection() {\r\n    let selectedObjectDetailsList = [];\r\n    let columns;\r\n\r\n    switch(this.props.accountInventorySelected) {\r\n      case 'Html Emails':   \r\n\r\n        columns = [\r\n          <DataTableColumn key='customerKey' label='Customer Key' property='customerKey' />,\r\n          <DataTableColumn key='name' label='Name' property='name' />,\r\n          <DataTableColumn key='owner' label='Owner' property='owner' />,\r\n          <DataTableColumn key='status' label='Status' property='status' />,\r\n        ]\r\n\r\n        filterItemsBySelectedMID(this.props.businessUnitSelected, this.props.emailInventory.htmlEmailData.items).forEach(item => {\r\n          selectedObjectDetailsList.push({\r\n            customerKey: item.customerKey,\r\n            name: item.name,\r\n            owner: item.owner.name,\r\n            status: item.status.name \r\n          })\r\n        });\r\n\r\n        break;\r\n\r\n      case 'Templated Emails':          \r\n        columns = [\r\n          <DataTableColumn key='customerKey' label='Customer Key' property='customerKey' />,\r\n          <DataTableColumn key='name' label='Name' property='name' />,\r\n          <DataTableColumn key='owner' label='Owner' property='owner' />,\r\n          <DataTableColumn key='status' label='Status' property='status' />,\r\n        ]\r\n\r\n        filterItemsBySelectedMID(this.props.businessUnitSelected, this.props.emailInventory.templateEmailData.items).forEach(item => {\r\n          selectedObjectDetailsList.push({\r\n            customerKey: item.customerKey,\r\n            name: item.name,\r\n            owner: item.owner.name,\r\n            status: item.status.name \r\n          })\r\n        });\r\n\r\n        break;\r\n\r\n      case 'Text Only Emails':   \r\n\r\n        columns = [\r\n          <DataTableColumn key='customerKey' label='Customer Key' property='customerKey' />,\r\n          <DataTableColumn key='name' label='Name' property='name' />,\r\n          <DataTableColumn key='owner' label='Owner' property='owner' />,\r\n          <DataTableColumn key='status' label='Status' property='status' />,\r\n        ]\r\n    \r\n        filterItemsBySelectedMID(this.props.businessUnitSelected, this.props.emailInventory.textOnlyEmailData.items).forEach(item => {\r\n          selectedObjectDetailsList.push({\r\n            customerKey: item.customerKey,\r\n            name: item.name,\r\n            owner: item.owner.name,\r\n            status: item.status.name \r\n          })\r\n        });\r\n\r\n        break;\r\n\r\n      case 'Templates':   \r\n\r\n        columns = [\r\n          <DataTableColumn key='customerKey' label='Customer Key' property='customerKey' />,\r\n          <DataTableColumn key='name' label='Name' property='name' />,\r\n          <DataTableColumn key='status' label='Status' property='status' />,\r\n        ]\r\n    \r\n        filterItemsBySelectedMID(this.props.businessUnitSelected, this.props.templateInventory.items).forEach(item => {\r\n          selectedObjectDetailsList.push({\r\n            customerKey: item.customerKey,\r\n            name: item.name,\r\n            status: item.status.name \r\n          })\r\n        });\r\n        \r\n\r\n        break;\r\n\r\n      case 'Categories':   \r\n      \r\n        columns = [\r\n          <DataTableColumn key='id' label='Id' property='id' />,\r\n          <DataTableColumn key='name' label='Name' property='name' />,\r\n          <DataTableColumn key='categoryType' label='Category Type' property='categoryType' />,\r\n          <DataTableColumn key='description' label='Description' property='description' />,\r\n          <DataTableColumn key='parentId' label='Parent Id' property='parentId' />\r\n        ]\r\n      \r\n        filterItemsBySelectedMID(this.props.businessUnitSelected, this.props.categories.items).forEach(item => {\r\n          selectedObjectDetailsList.push({\r\n            name: item.name,\r\n            id: item.id,\r\n            categoryType: item.categoryType,\r\n            description: item.description,\r\n            parentId: item.parentId\r\n          })\r\n        });\r\n        \r\n        break;\r\n\r\n      case 'Triggered Sends':   \r\n\r\n        columns = [\r\n          <DataTableColumn key='name' label='Name' property='name' />,\r\n          <DataTableColumn key='customerKey' label='Customer Key' property='customerKey' />,\r\n          <DataTableColumn key='description' label='Description' property='description' />,\r\n          <DataTableColumn key='createdDate' label='Created Date' property='createdDate' />,\r\n          <DataTableColumn key='fromName' label='From Name' property='fromName' />,\r\n          <DataTableColumn key='fromAddress' label='From Address' property='fromAddress' />,\r\n          <DataTableColumn key='emailSubject' label='Email Subject' property='emailSubject' />,\r\n          <DataTableColumn key='triggeredSendType' label='Type' property='triggeredSendType' />,\r\n          <DataTableColumn key='triggeredSendStatus' label='Status' property='triggeredSendStatus' />       \r\n        ]\r\n\r\n        filterItemsBySelectedMID(this.props.businessUnitSelected, this.props.triggeredSends).forEach(item => {\r\n          selectedObjectDetailsList.push({\r\n            name: item.Name,\r\n            customerKey: item.CustomerKey,\r\n            description: item.Description,\r\n            createdDate: item.CreatedDate,\r\n            fromName: item.FromName,\r\n            fromAddress: item.FromAddress,\r\n            emailSubject: item.EmailSubject,\r\n            triggeredSendType: item.TriggeredSendType,\r\n            triggeredSendStatus: item.TriggeredSendStatus\r\n          })\r\n        });        \r\n      \r\n        break;\r\n\r\n      case 'Cloud Pages':\r\n \r\n        columns = [\r\n          <DataTableColumn key='id' label='Id' property='id' />,\r\n          <DataTableColumn key='name' label='Name' property='name' />,\r\n          <DataTableColumn key='customerKey' label='Customer Key' property='customerKey' />,\r\n          <DataTableColumn key='contentType' label='Content Type' property='contentType' />,\r\n          <DataTableColumn key='owner' label='Owner' property='owner' />,\r\n          <DataTableColumn key='createdDate' label='Created Date' property='createdDate' />,\r\n          <DataTableColumn key='status' label='Status' property='status' />\r\n        ]\r\n\r\n        filterItemsBySelectedMID(this.props.businessUnitSelected, this.props.cloudPages.items).forEach(item => {\r\n          selectedObjectDetailsList.push({\r\n            id: item.id,\r\n            name: item.name,\r\n            customerKey: item.customerKey,\r\n            contentType: item.contentType,\r\n            owner: item.owner.name,\r\n            createdDate: item.createdDate,\r\n            status: item.status.name\r\n          })\r\n        });\r\n\r\n        break;\r\n\r\n      case 'Data Extensions':   \r\n\r\n        columns = [\r\n          <DataTableColumn key='name' label='Name' property='name' />,\r\n          <DataTableColumn key='customerKey' label='Customer Key' property='customerKey' />,\r\n          <DataTableColumn key='owner' label='Owner' property='owner' />,\r\n          <DataTableColumn key='createdDate' label='Created Date' property='createdDate' />,\r\n          <DataTableColumn key='isSendable' label='Is Sendable?' property='isSendable' />,\r\n          <DataTableColumn key='isTestable' label='Is Testable?' property='isTestable' />,\r\n          <DataTableColumn key='rowBasedRetention' label='Row Based Retention' property='rowBasedRetention' />,\r\n          <DataTableColumn key='resetRetentionPeriodOnImport' label='Reset Retention Period On Import' property='resetRetentionPeriodOnImport' />,\r\n          <DataTableColumn key='deleteAtEndOfRetentionPeriod' label='Delete At End Of Retention Period' property='deleteAtEndOfRetentionPeriod' />,\r\n          <DataTableColumn key='retainUntil' label='Retain Until' property='retainUntil' />,\r\n          <DataTableColumn key='status' label='Status' property='status' />\r\n        ]\r\n\r\n        filterItemsBySelectedMID(this.props.businessUnitSelected, this.props.dataExtensions).forEach(item => {\r\n          selectedObjectDetailsList.push({\r\n            name: item.Name,\r\n            customerKey: item.CustomerKey,\r\n            owner: item.Owner,\r\n            createdDate: item.CreatedDate,\r\n            isSendable: item.IsSendable,\r\n            isTestable: item.IsTestable,\r\n            rowBasedRetention: item.RowBasedRetention,\r\n            resetRetentionPeriodOnImport: item.ResetRetentionPeriodOnImport,\r\n            deleteAtEndOfRetentionPeriod: item.DeleteAtEndOfRetentionPeriod,\r\n            retainUntil: item.RetainUntil,\r\n            status: item.Status,\r\n          })\r\n        });\r\n        \r\n        break;\r\n\r\n      // case 'Filters':   \r\n        \r\n      //   columns = [\r\n      //     <DataTableColumn key='name' label='Name' property='name' />,\r\n      //     <DataTableColumn key='customerKey' label='Customer Key' property='customerKey' />,\r\n      //     <DataTableColumn key='createdDate' label='Created Date' property='createdDate' />,\r\n      //     <DataTableColumn key='dataSourceName' label='Data Source Name' property='dataSourceName' />,\r\n      //     <DataTableColumn key='dataSourceCustomerKey' label='Data Source Customer Key' property='dataSourceCustomerKey' />\r\n      //   ]\r\n\r\n      //   filterItemsBySelectedMID(this.props.businessUnitSelected, this.props.filterData).forEach(item => {\r\n      //     selectedObjectDetailsList.push({\r\n      //       name: item.Name,\r\n      //       customerKey: item.CustomerKey,\r\n      //       createdDate: item.CreatedDate,\r\n      //       dataSourceName: item.DataSource.Name,\r\n      //       dataSourceCustomerKey: item.DataSource.CustomerKey\r\n      //     })\r\n      //   });\r\n\r\n      //   break;\r\n      \r\n      case 'Queries':   \r\n\r\n        columns = [\r\n          <DataTableColumn key='name' label='Name' property='name' />,\r\n          <DataTableColumn key='customerKey' label='Customer Key' property='customerKey' />,\r\n          <DataTableColumn key='createdDate' label='Created Date' property='createdDate' />,\r\n          <DataTableColumn key='targetType' label='Target Type' property='targetType' />,\r\n          <DataTableColumn key='targetUpdateType' label='Target Update Type' property='targetUpdateType' />,\r\n          <DataTableColumn key='categoryId' label='Category Id' property='categoryId' />,\r\n          <DataTableColumn key='status' label='Status' property='status' />,\r\n        ]\r\n\r\n        filterItemsBySelectedMID(this.props.businessUnitSelected, this.props.queries).forEach(item => {\r\n          selectedObjectDetailsList.push({\r\n            name: item.Name,\r\n            customerKey: item.CustomerKey,\r\n            createdDate: item.CreatedDate,\r\n            targetType: item.TargetType,\r\n            targetUpdateType: item.TargetUpdateType,\r\n            categoryId: item.CategoryId,\r\n            status: item.Status\r\n          })\r\n        });\r\n\r\n        break;\r\n      \r\n      case 'Automations':   \r\n\r\n        columns = [\r\n          <DataTableColumn key='name' label='Name' property='name' />,\r\n          <DataTableColumn key='customerKey' label='Customer Key' property='customerKey' />,\r\n          <DataTableColumn key='createdDate' label='Created Date' property='createdDate' />,\r\n          <DataTableColumn key='isActive' label='Is Active?' property='isActive' />,\r\n          <DataTableColumn key='status' label='Status' property='status' />\r\n        ]\r\n\r\n        filterItemsBySelectedMID(this.props.businessUnitSelected, this.props.automations).forEach(item => {\r\n          selectedObjectDetailsList.push({\r\n            name: item.Name,\r\n            customerKey: item.CustomerKey,\r\n            createdDate: item.CreatedDate,\r\n            isActive: item.IsActive,\r\n            status: item.Status\r\n          })\r\n        });\r\n\r\n        break;\r\n\r\n      case 'Journeys':   \r\n\r\n        columns = [\r\n          <DataTableColumn key='name' label='Name' property='name'>\r\n            <JourneyDetailCell /> \r\n          </DataTableColumn>,\r\n          <DataTableColumn key='id' label='Id' property='id' />,\r\n          <DataTableColumn key='key' label='Key' property='key' />,\r\n          <DataTableColumn key='createdDate' label='Created Date' property='createdDate' />,\r\n          <DataTableColumn key='version' label='Version' property='version' />,\r\n          <DataTableColumn key='entryMode' label='Entry Mode' property='entryMode' />,\r\n          <DataTableColumn key='definitionType' label='Definition Type' property='definitionType' />,\r\n          <DataTableColumn key='categoryId' label='Category Id' property='categoryId' />,\r\n          <DataTableColumn key='currentPopulation' label='Current Population' property='currentPopulation' />,\r\n          <DataTableColumn key='cumulativePopulation' label='Cumulative Population' property='cumulativePopulation' />,\r\n          <DataTableColumn key='metGoal' label='Met Goal' property='metGoal' />,\r\n          <DataTableColumn key='metExitCriteria' label='Met Exit Criteria' property='metExitCriteria' />,\r\n          <DataTableColumn key='goalPerformance' label='Goal Performance' property='goalPerformance' />,\r\n          <DataTableColumn key='status' label='Status' property='status' />,\r\n        ]\r\n\r\n\r\n        filterItemsBySelectedMID(this.props.businessUnitSelected, this.props.journeys.items).forEach(item => {\r\n          selectedObjectDetailsList.push({\r\n            name: item.name,\r\n            id: item.id,\r\n            key: item.key,\r\n            createdDate: item.createdDate,\r\n            version: item.version,\r\n            entryMode: item.entryMode,\r\n            definitionType: item.definitionType,\r\n            categoryId: item.categoryId,\r\n            currentPopulation: item.stats.currentPopulation,\r\n            cumulativePopulation: item.stats.cumulativePopulation,\r\n            metGoal: item.stats.metGoal,\r\n            metExitCriteria: item.stats.metExitCriteria,\r\n            goalPerformance: item.stats.goalPerformance,\r\n            status: item.status\r\n          })\r\n        });\r\n\r\n        break;\r\n      \r\n      case 'Business Units':   \r\n        \r\n        columns = [\r\n          <DataTableColumn key='clientId' label='Client Id' property='clientId' />,\r\n          <DataTableColumn key='enterpriseId' label='Enterprise Id' property='enterpriseId' />,\r\n          <DataTableColumn key='customerKey' label='Customer Key' property='customerKey' />,\r\n          <DataTableColumn key='name' label='Name' property='name' />,\r\n          <DataTableColumn key='email' label='Email' property='email' />,\r\n          <DataTableColumn key='fromName' label='From Name' property='fromName' />,\r\n          <DataTableColumn key='businessName' label='Business Name' property='businessName' />,\r\n          <DataTableColumn key='phone' label='Phone' property='phone' />,\r\n          <DataTableColumn key='address' label='Address' property='address' />,\r\n          <DataTableColumn key='city' label='City' property='city' />,\r\n          <DataTableColumn key='state' label='State' property='state' />,\r\n          <DataTableColumn key='zip' label='Zip' property='zip' />,\r\n          <DataTableColumn key='country' label='Country' property='country' />,\r\n          <DataTableColumn key='isActive' label='Is Active?' property='isActive' />,\r\n          <DataTableColumn key='dbid' label='Database Id' property='dbid' />,\r\n          <DataTableColumn key='masterUnsubscribeBehavior' label='Master Unsubscribe Behavior' property='masterUnsubscribeBehavior' />\r\n        ]\r\n      \r\n        filterItemsBySelectedMID(this.props.businessUnitSelected, this.props.businessUnits).forEach(item => {\r\n          selectedObjectDetailsList.push({\r\n            clientId: item.Client.ID,\r\n            enterpriseId: item.Client.EnterpriseID,\r\n            customerKey: item.CustomerKey,\r\n            name: item.Name,\r\n            email: item.Email,\r\n            fromName: item.FromName,\r\n            businessName: item.BusinessName,\r\n            phone: item.Phone,\r\n            address: item.Address,\r\n            city: item.City,\r\n            state: item.State,\r\n            zip: item.Zip,\r\n            country: item.Country,\r\n            isActive: item.IsActive,\r\n            dbid: item.DBID,\r\n            masterUnsubscribeBehavior: item.MasterUnsubscribeBehavior\r\n          })\r\n        });\r\n\r\n        break;\r\n\r\n      case 'Users':   \r\n \r\n        columns = [\r\n          <DataTableColumn key='id' label='Id' property='id' />,\r\n          <DataTableColumn key='customerKey' label='Customer Key' property='customerKey' />,\r\n          <DataTableColumn key='userId' label='User Id' property='userId' />,\r\n          <DataTableColumn key='name' label='Name' property='name' />,\r\n          <DataTableColumn key='email' label='Email' property='email' />,\r\n          <DataTableColumn key='createdDate' label='Created Date' property='createdDate' />,  \r\n          <DataTableColumn key='mustChangePassword' label='Must Change Password' property='mustChangePassword' />,\r\n          <DataTableColumn key='activeFlag' label='Active Flag' property='activeFlag' />,\r\n          <DataTableColumn key='isApiUser' label='Is Api User?' property='isApiUser' />,  \r\n          <DataTableColumn key='notificationEmailAddress' label='Notification Email Address' property='notificationEmailAddress' />,  \r\n          <DataTableColumn key='defaultBusinessUnit' label='Default Business Unit' property='defaultBusinessUnit' />,  \r\n          <DataTableColumn key='salesforceId' label='Salesforce Id' property='salesforceId' />,  \r\n          <DataTableColumn key='isSendable' label='Is Sendable?' property='isSendable' />,  \r\n          <DataTableColumn key='LastLogin' label='Last Login' property='lastLogin' />,  \r\n        ]\r\n                \r\n        filterItemsBySelectedMID(this.props.businessUnitSelected, this.props.accountUsers).forEach(item => {\r\n          selectedObjectDetailsList.push({ \r\n            id: item.ID,\r\n            customerKey: item.CustomerKey,\r\n            userId: item.UserID,\r\n            name: item.Name,\r\n            email: item.Email,\r\n            createdDate: item.CreatedDate,\r\n            mustChangePassword: item.MustChangePassword,\r\n            activeFlag: item.ActiveFlag,\r\n            isApiUser: item.IsAPIUser,\r\n            notificationEmailAddress: item.NotificationEmailAddress,\r\n            defaultBusinessUnit: item.DefaultBusinessUnit,\r\n            salesforceId: item.SalesForceID,\r\n            isSendable: item.IsSendable,\r\n            lastLogin: item.LastSuccessfulLogin\r\n\r\n          })\r\n        })\r\n\r\n        break;\r\n     \r\n      default:\r\n        selectedObjectDetailsList = <p>default</p>   \r\n    }\r\n    this.setState({ items: selectedObjectDetailsList, columns})\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <IconSettings iconPath='/icons/'>\r\n          <div className='slds-grid slds-grid_vertical'>\r\n            <Card\r\n              id='AccountInventory_Card'\r\n              heading='Account Inventory Summary'\r\n              header={\r\n                <MediaObject \r\n                  body={\r\n                    <div className='slds-grid slds-grid_align-spread'>\r\n                      <div className='slds-text-heading_small'>\r\n                        {toTitleCase(this.props.accountInventorySelected)}\r\n                      </div>\r\n                      <div className=\"slds-text-align_right\">\r\n                        {`${this.state.items.length} items`}\r\n                      </div>\r\n                    </div>\r\n                  }\r\n                  verticalCenter\r\n                />\r\n              }\r\n            >\r\n            <DataTable \r\n              items={this.state.items}\r\n              fixedHeader\r\n            >\r\n              {this.state.columns}\r\n            </DataTable>\r\n          </Card>\r\n        </div>\r\n      </IconSettings>\r\n\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AccountInventoryDetails)","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  DataTable,\r\n  DataTableColumn,\r\n  DataTableCell,\r\n  PageHeader,\r\n  Icon,\r\n  IconSettings,\r\n  Card,\r\n  MediaObject,\r\n  CardFilter,\r\n  CardEmpty\r\n} from '@salesforce/design-system-react';\r\nimport { clearEmailActivitySelected } from '../../stateManagement/actions';\r\nimport toTitleCase from 'titlecase'\r\nimport '../EmailActivityDetails/EmailActivityDetails.css'\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    emailActivitySelected: state.emailActivitySelected,\r\n    eventData: state.eventData\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return { dispatch };\r\n};\r\n\r\n\r\nconst WrappedDataTableCell = ({ children, ...props }) => (\r\n  <DataTableCell {...props} >\r\n    <td class=\"slds-cell-wrap\" >{children}</td>\r\n  </DataTableCell>\r\n);\r\n\r\nWrappedDataTableCell.displayName = DataTableCell.displayName;\r\n\r\n\r\nclass EmailActivityDetails extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      hasMore: true,\r\n      items: [],    // gets updated by handleChangingSelection()\r\n      columns: [],  // gets updated by handleChangingSelection()\r\n      label: '',\r\n      isFiltering: false\r\n    };\r\n  }\r\n\r\n  isLoading = false;\r\n  page = 0;\r\n\r\n\r\n  componentDidMount() {\r\n    this.handleChangingSelection()\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    // if this.props.emailActivitySelected changes...\r\n    if (prevProps.emailActivitySelected !== this.props.emailActivitySelected) {\r\n      this.handleChangingSelection()\r\n    }\r\n  }\r\n\r\n  handleChangingSelection = () => {\r\n    let emailActivityDetails = [];\r\n    let columns;\r\n    \r\n    switch(this.props.emailActivitySelected) {\r\n      case 'sends':\r\n        this.props.eventData.sendData.forEach(item => {\r\n          emailActivityDetails.push({\r\n            SendID: item.SendID,\r\n            listId: item.PartnerProperties.Value,\r\n            SubscriberKey: item.SubscriberKey,\r\n            EventDate: item.EventDate,\r\n            EventType: item.EventType,\r\n            TriggeredSendDefinitionObjectID: item.TriggeredSendDefinitionObjectID,\r\n            BatchID: item.BatchID \r\n          })\r\n        });\r\n  \r\n        columns = [\r\n          <DataTableColumn key='SendID' label='Send Id' property='SendID' />,\r\n          <DataTableColumn key='listId' label='List Id' property='listId' />,\r\n          <DataTableColumn key='SubscriberKey' label='Subscriber Key' property='SubscriberKey' />,\r\n          <DataTableColumn key='EventDate' label='Event Date' property='EventDate' />,\r\n          <DataTableColumn key='EventType' label='Event Type' property='EventType' />,\r\n          <DataTableColumn key='TriggeredSendDefinitionObjectID' label='Triggered Send Definition Object Id' property='TriggeredSendDefinitionObjectID' />,\r\n          <DataTableColumn key='BatchID' label='Batch Id' property='BatchID' />\r\n        ]\r\n\r\n        break;\r\n\r\n      case 'opens':    \r\n        this.props.eventData.openData.forEach(item => {\r\n          emailActivityDetails.push({\r\n            Id: item.ID,\r\n            SendID: item.SendID,\r\n            SubscriberKey: item.SubscriberKey,\r\n            EventDate: item.EventDate,\r\n            EventType: item.EventType,\r\n            TriggeredSendDefinitionObjectID: item.TriggeredSendDefinitionObjectID,\r\n            BatchID: item.BatchID \r\n          })\r\n        });\r\n  \r\n        columns = [\r\n          <DataTableColumn key='Id' label='Id' property='Id' />,\r\n          <DataTableColumn key='SendID' label='Send Id' property='SendID' />,\r\n          <DataTableColumn key='SubscriberKey' label='Subscriber Key' property='SubscriberKey' />,\r\n          <DataTableColumn key='EventDate' label='Event Date' property='EventDate' />,\r\n          <DataTableColumn key='EventType' label='Event Type' property='EventType' />,\r\n          <DataTableColumn key='TriggeredSendDefinitionObjectID' label='Triggered Send Definition Object Id' property='TriggeredSendDefinitionObjectID' />,\r\n          <DataTableColumn key='BatchID' label='Batch Id' property='BatchID' />\r\n        ]\r\n\r\n        break;\r\n\r\n      case 'bounces':\r\n        this.props.eventData.bounceData.forEach(item => {\r\n          emailActivityDetails.push({\r\n            Id: item.ID,\r\n            SendID: item.SendID,\r\n            SubscriberKey: item.SubscriberKey,\r\n            EventDate: item.EventDate,\r\n            EventType: item.EventType,\r\n            TriggeredSendDefinitionObjectID: item.TriggeredSendDefinitionObjectID,\r\n            BatchID: item.BatchID, \r\n            smtpCode: item.SMTPCode,\r\n            bounceCategory: item.BounceCategory,\r\n            smtpReason: item.SMTPReason\r\n          })\r\n        });\r\n  \r\n        columns = [\r\n          <DataTableColumn key='Id' label='Id' property='Id' />,\r\n          <DataTableColumn key='SendID' label='Send Id' property='SendID' />,\r\n          <DataTableColumn key='SubscriberKey' label='Subscriber Key' property='SubscriberKey' />,\r\n          <DataTableColumn key='EventDate' label='Event Date' property='EventDate' />,\r\n          <DataTableColumn key='EventType' label='Event Type' property='EventType' />,\r\n          <DataTableColumn key='TriggeredSendDefinitionObjectID' label='Triggered Send Definition Object Id' property='TriggeredSendDefinitionObjectID' />,\r\n          <DataTableColumn key='BatchID' label='Batch Id' property='BatchID' />,\r\n          <DataTableColumn key='smtpCode' label='SMTP Code' property='smtpCode' />,\r\n          <DataTableColumn key='bounceCategory' label='Bounce Category' property='bounceCategory' />,\r\n          <DataTableColumn key='smtpReason' label='SMTP Reason' property='smtpReason'>\r\n            <WrappedDataTableCell /> \r\n          </DataTableColumn> \r\n        ]\r\n\r\n        break;\r\n\r\n      case 'clicks':\r\n\r\n        this.props.eventData.clickData.forEach(item => {\r\n          emailActivityDetails.push({\r\n            Id: item.ID,\r\n            SendID: item.SendID,\r\n            SubscriberKey: item.SubscriberKey,\r\n            EventDate: item.EventDate,\r\n            EventType: item.EventType,\r\n            TriggeredSendDefinitionObjectID: item.TriggeredSendDefinitionObjectID\r\n          })\r\n        });\r\n  \r\n        columns = [\r\n          <DataTableColumn key='Id' label='Id' property='Id' />,\r\n          <DataTableColumn key='SendID' label='Send Id' property='SendID' />,\r\n          <DataTableColumn key='SubscriberKey' label='Subscriber Key' property='SubscriberKey' />,\r\n          <DataTableColumn key='EventDate' label='Event Date' property='EventDate' />,\r\n          <DataTableColumn key='EventType' label='Event Type' property='EventType' />,\r\n          <DataTableColumn key='TriggeredSendDefinitionObjectID' label='Triggered Send Definition Object Id' property='TriggeredSendDefinitionObjectID' />\r\n        ]\r\n\r\n        break;\r\n      \r\n      case 'unsubscribes':\r\n        this.props.eventData.unsubscribeData.forEach(item => {\r\n          emailActivityDetails.push({\r\n            ID: item.ID,\r\n            SendID: item.SendID,\r\n            SubscriberKey: item.SubscriberKey,\r\n            EventDate: item.EventDate,\r\n            EventType: item.EventType,\r\n            TriggeredSendDefinitionObjectID: item.TriggeredSendDefinitionObjectID\r\n          })\r\n        });\r\n  \r\n        columns = [\r\n          <DataTableColumn key='ID' label='Id' property='ID' />,\r\n          <DataTableColumn key='SendID' label='Send Id' property='SendID' />,\r\n          <DataTableColumn key='SubscriberKey' label='Subscriber Key' property='SubscriberKey' />,\r\n          <DataTableColumn key='EventDate' label='Event Date' property='EventDate' />,\r\n          <DataTableColumn key='EventType' label='Event Type' property='EventType' />,\r\n          <DataTableColumn key='TriggeredSendDefinitionObjectID' label='Triggered Send Definition Object Id' property='TriggeredSendDefinitionObjectID' />\r\n        ]\r\n        break;\r\n\r\n      default:\r\n        break;\r\n      } \r\n\r\n      \r\n\r\n    this.setState({ items: emailActivityDetails, columns})\r\n  }\r\n\r\n  handleFilterChange = (event) => {\r\n    let filteredItems;\r\n    let isFiltering = event.target.value ? true : false\r\n\r\n\r\n    switch (this.props.emailActivitySelected) {\r\n      case 'sends':     \r\n        filteredItems = this.props.eventData.sendData.filter((item) =>\r\n          RegExp(event.target.value, 'i').test(item.SubscriberKey)\r\n        );      \r\n        break;\r\n      case 'opens':\r\n        filteredItems = this.props.eventData.openData.filter((item) =>\r\n          RegExp(event.target.value, 'i').test(item.SubscriberKey)\r\n        );      \r\n        break;\r\n      case 'bounces':\r\n        filteredItems = this.props.eventData.bounceData.filter((item) =>\r\n          RegExp(event.target.value, 'i').test(item.SubscriberKey)\r\n        );      \r\n        break;\r\n      case 'clicks':\r\n        filteredItems = this.props.eventData.clickData.filter((item) =>\r\n          RegExp(event.target.value, 'i').test(item.SubscriberKey)\r\n        );      \r\n        break;\r\n      case 'unsubscribes':\r\n        filteredItems = this.props.eventData.unsubscribeData.filter((item) =>\r\n          RegExp(event.target.value, 'i').test(item.SubscriberKey)\r\n        );      \r\n        break;\r\n      default: \r\n        break;\r\n    }\r\n\r\n\t\tthis.setState({ isFiltering, items: filteredItems });\r\n\t};\r\n\r\n  \r\n  render() {\r\n    const isEmpty = this.state.items.length === 0;\r\n\r\n    return (\r\n      <IconSettings iconPath='/icons/'>\r\n        <div className='slds-grid slds-grid_vertical'>\r\n          <Card\r\n            id='Event-details'\r\n            heading='Event Details'\r\n            header={\r\n              <MediaObject \r\n                body={\r\n                  <div className='slds-grid slds-grid_align-spread'>\r\n                    <div className='slds-text-heading_small'>\r\n                      {toTitleCase(this.props.emailActivitySelected)}\r\n                    </div>\r\n                  </div>\r\n                }\r\n                verticalCenter\r\n              />\r\n            }\r\n            filter={\r\n                (!isEmpty || this.state.isFiltering) && (\r\n                  <CardFilter \r\n                    onChange={this.handleFilterChange} \r\n                    placeholder='Search By Subscriber Key'\r\n                  />\r\n                )\r\n            }\r\n            headerActions={\r\n                <div className=\"slds-text-align_right\">\r\n                  {`${this.state.items.length} items`}\r\n                </div>\r\n            }\r\n            empty={\r\n                isEmpty ? (\r\n                  <CardEmpty heading=\"No Items\" />\r\n                ) : null\r\n            }\r\n          >\r\n          <DataTable \r\n            items={this.state.items}\r\n            fixedHeader\r\n            className=\"infoTable\"\r\n\r\n          >\r\n            {this.state.columns}\r\n          </DataTable>\r\n        </Card>\r\n      </div>\r\n    </IconSettings>\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EmailActivityDetails);\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { \r\n  changeSubscribersSummarySelected,\r\n  clearSubscribersSummarySelected\r\n} from '../../stateManagement/actions';\r\nimport '../SubscribersSummaryTile/SubscribersSummaryTile.css'\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    subscribersJob: state.subscribersJob,\r\n    subscribers: state.subscribers,\r\n    subscribersJobState: state.subscribersJobState,\r\n    subscribersSummarySelected: state.subscribersSummarySelected\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return { dispatch }\r\n}\r\n\r\n\r\nclass SubscribersSummaryTile extends Component {\r\n  constructor(props) {\r\n    super(props) \r\n\r\n  }\r\n\r\n  handleSelection = (e) => {\r\n    console.log(e)\r\n\r\n    if (this.props.label === this.props.subscribersSummarySelected) {\r\n      this.props.dispatch(clearSubscribersSummarySelected())\r\n    } else {\r\n      this.props.dispatch(changeSubscribersSummarySelected(this.props.label))\r\n    }\r\n  }\r\n  \r\n  render() {    \r\n    return (\r\n      <div className=\"slds-col slds-p-horizontal_small emailActivity-card\">\r\n        <div className=\"slds-box EmailActivityCard\" onClick={this.handleSelection}>\r\n          <div className=\"slds-text-title_caps slds-text-align_center\">\r\n            <b>{this.props.label}</b>\r\n          </div>\r\n          \r\n            <div className=\"slds-text-heading_medium slds-text-align_center\">\r\n              <div className=\"slds-text-heading_large slds-text-align_center\">\r\n                {this.props.count}\r\n              </div>\r\n            </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SubscribersSummaryTile);\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { \r\n  addSubscribersJob, \r\n  updateSubscribersJob\r\n } from '../../stateManagement/actions';\r\nimport { \r\n  IconSettings,\r\n  PageHeader,\r\n  Icon,\r\n  Card,\r\n  Button,\r\n  MediaObject\r\n} from '@salesforce/design-system-react';\r\nimport SubscribersSummaryTile from '../SubscribersSummaryTile/SubscribersSummaryTile';\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    subscribersJob: state.subscribersJob,\r\n    subscribers: state.subscribers,\r\n    subscribersJobState: state.subscribersJobState\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return { dispatch };\r\n};\r\n\r\n\r\nclass SubscribersSummary extends Component {\r\n  constructor(props) {\r\n    super(props) \r\n    this.state = {\r\n      timer: '0:00',\r\n      timerInterval: null\r\n    }\r\n  }\r\n  \r\n  \r\n  componentDidMount() {\r\n    if (this.props.subscribersJobState !== 'completed') {\r\n      this.props.dispatch(addSubscribersJob());\r\n\r\n      let counter = 0\r\n\r\n      setInterval(() => {\r\n        if (this.props.subscribersJobState !== 'completed' && counter < 10) {\r\n          counter++\r\n          this.props.dispatch(updateSubscribersJob(this.props.subscribersJob));\r\n        } \r\n      }, 2000);\r\n\r\n\r\n      let seconds = 0;\r\n      // Store the timer ID in the component state\r\n      let timerInterval = setInterval(() => {\r\n        if (this.props.subscribersJobState !== 'completed') {\r\n          seconds++;\r\n          let minutes = Math.floor(seconds / 60);\r\n          let remainingSeconds = seconds % 60;\r\n          let formattedTime = `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;\r\n          this.setState({ timer: formattedTime });\r\n        }\r\n      }, 1000)\r\n\r\n      this.setState({timerInterval})\r\n\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    // When component is refreshed\r\n    if (prevProps.subscribersJobState === 'completed' && this.props.subscribersJobState !== 'completed') {\r\n      setInterval(() => {\r\n        if (this.props.subscribersJobState !== 'completed') {\r\n          this.props.dispatch(updateSubscribersJob(this.props.subscribersJob));\r\n        }\r\n      }, 2000);\r\n\r\n\r\n      // reset timer \r\n      this.setState({timer: \"00:00\"})\r\n      let seconds = 0;\r\n      // Store the timer ID in the component state\r\n      let timerInterval = setInterval(() => {\r\n        seconds++;\r\n        let minutes = Math.floor(seconds / 60);\r\n        let remainingSeconds = seconds % 60;\r\n        let formattedTime = `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;\r\n        this.setState({ timer: formattedTime });\r\n      }, 1000)\r\n\r\n      this.setState({timerInterval})\r\n    }\r\n\r\n    if (this.props.subscribersJobState === 'completed') {\r\n      clearInterval(this.state.timerInterval)\r\n    }\r\n  }\r\n\r\n  handleRefresh = () => {\r\n    this.props.dispatch(addSubscribersJob());\r\n  }\r\n\r\n  render() {\r\n    let info;\r\n    \r\n    if (this.props.subscribersJobState !== 'completed') {\r\n      info = (\r\n        <div className=\"slds-text-color_weak\">\r\n          Retrieving results...\r\n        </div>\r\n      )\r\n    } else {\r\n      info = (\r\n        <div className=\"slds-text-color_success\">\r\n          Finished - Results retrieved! \r\n        </div>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <> \r\n        <IconSettings iconPath='/icons/'>\r\n          <div className='slds-grid slds-grid_vertical'>\r\n            <Card\r\n              id='ExampleCard'\r\n              heading='Subscribers Summary'\r\n              headerActions={\r\n                <Button label=\"Refresh\" onClick={this.handleRefresh} /> \r\n              }\r\n              header={\r\n                <MediaObject \r\n                  body={\r\n                    <>\r\n                      <div className='slds-text-heading_medium'>\r\n                        Subscribers Summary\r\n                      </div>\r\n                      {info}\r\n                      {this.state.timer}\r\n                    </>\r\n                  }\r\n                  figure={<Icon category=\"standard\" name=\"people\" size=\"medium\" />}\r\n                  verticalCenter\r\n                />\r\n              }\r\n            >\r\n              <div className=\"slds-grid slds-gutter emailActivity-wrapper\">\r\n                <SubscribersSummaryTile \r\n                  label='All Subscribers'   \r\n                  count={this.props.subscribers.allSubscribers.length}\r\n                />\r\n                <SubscribersSummaryTile \r\n                  label='Duplicate Subscribers' \r\n                  count={this.props.subscribers.duplicateSubscribers.length} \r\n                />\r\n                <SubscribersSummaryTile \r\n                  label='Active Subscribers' \r\n                  count={this.props.subscribers.activeSubscribers.length}  \r\n                />\r\n                <SubscribersSummaryTile \r\n                  label='Bounced Subscribers'   \r\n                  count={this.props.subscribers.bouncedSubscribers.length}\r\n                />\r\n                <SubscribersSummaryTile \r\n                  label='Unsubscribed Subscribers'\r\n                  count={this.props.subscribers.unsubscribedSubscribers.length} \r\n                />\r\n              </div>\r\n            </Card>\r\n          </div>\r\n        </IconSettings>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SubscribersSummary)","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  DataTable,\r\n  DataTableColumn,\r\n  DataTableCell,\r\n  PageHeader,\r\n  Icon,\r\n  IconSettings,\r\n  Card,\r\n  MediaObject,\r\n  CardFilter,\r\n  CardEmpty\r\n} from '@salesforce/design-system-react';\r\nimport '../SubscribersSummaryDetails/SubscribersSummaryDetails.css'\r\nimport toTitleCase from 'titlecase'\r\nimport filter from '@salesforce/design-system-react/lib/components/combobox/filter';\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    subscribersSummarySelected: state.subscribersSummarySelected,\r\n    subscribers: state.subscribers\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return { dispatch };\r\n};\r\n\r\nclass SubscribersSummaryDetails extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      hasMore: true,\r\n      items: [],    // gets updated by handleChangingSelection()\r\n      columns: [],  // gets updated by handleChangingSelection()\r\n      isFiltering: false,\r\n      handleFilterChange: null,\r\n    };\r\n  }\r\n\r\n  isLoading = false;\r\n  page = 0;\r\n\r\n\r\n  componentDidMount() {\r\n    this.handleChangingSelection()\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    // if this.props.subscribersSummarySelected changes...\r\n    if (prevProps.subscribersSummarySelected !== this.props.subscribersSummarySelected) {\r\n      this.handleChangingSelection()\r\n    }\r\n  }\r\n\r\n  handleChangingSelection = () => {\r\n    let subscribersSummaryDetails = [];\r\n    let columns;\r\n    let handleFilterChange;\r\n    \r\n    switch(this.props.subscribersSummarySelected) {\r\n      case 'All Subscribers':\r\n        this.props.subscribers.allSubscribers.forEach(item => {\r\n          subscribersSummaryDetails.push({\r\n            SubscriberKey: item.SubscriberKey,\r\n            EmailAddress: item.EmailAddress,\r\n            CreatedDate: item.CreatedDate,\r\n            Status: item.Status\r\n          })\r\n        });\r\n\r\n\r\n        columns = [\r\n          <DataTableColumn key='SubscriberKey' label='Subscriber Key' property='SubscriberKey' />,\r\n          <DataTableColumn key='EmailAddress' label='Email Address' property='EmailAddress' />,\r\n          <DataTableColumn key='CreatedDate' label='Created Date' property='CreatedDate' />,\r\n          <DataTableColumn key='Status' label='Status' property='Status' />,\r\n        ]\r\n\r\n        break;\r\n\r\n      case 'Duplicate Subscribers':    \r\n        this.props.subscribers.duplicateSubscribers.forEach(item => {\r\n          subscribersSummaryDetails.push({\r\n            SubscriberKey: item.SubscriberKey,\r\n            EmailAddress: item.EmailAddress,\r\n            CreatedDate: item.CreatedDate,\r\n            Status: item.Status\r\n          })\r\n        });\r\n\r\n\r\n        columns = [\r\n          <DataTableColumn key='SubscriberKey' label='Subscriber Key' property='SubscriberKey' />,\r\n          <DataTableColumn key='EmailAddress' label='Email Address' property='EmailAddress' />,\r\n          <DataTableColumn key='CreatedDate' label='Created Date' property='CreatedDate' />,\r\n          <DataTableColumn key='Status' label='Status' property='Status' />,\r\n        ]\r\n\r\n        break;\r\n\r\n      case 'Active Subscribers':\r\n        this.props.subscribers.activeSubscribers.forEach(item => {\r\n          subscribersSummaryDetails.push({\r\n            SubscriberKey: item.SubscriberKey,\r\n            EmailAddress: item.EmailAddress,\r\n            CreatedDate: item.CreatedDate,\r\n            Status: item.Status\r\n          })\r\n        });\r\n\r\n\r\n        columns = [\r\n          <DataTableColumn key='SubscriberKey' label='Subscriber Key' property='SubscriberKey' />,\r\n          <DataTableColumn key='EmailAddress' label='Email Address' property='EmailAddress' />,\r\n          <DataTableColumn key='CreatedDate' label='Created Date' property='CreatedDate' />,\r\n          <DataTableColumn key='Status' label='Status' property='Status' />,\r\n        ]\r\n\r\n        break;\r\n\r\n      case 'Unsubscribed Subscribers':\r\n        this.props.subscribers.unsubscribedSubscribers.forEach(item => {\r\n          subscribersSummaryDetails.push({\r\n            SubscriberKey: item.SubscriberKey,\r\n            EmailAddress: item.EmailAddress,\r\n            CreatedDate: item.CreatedDate,\r\n            Status: item.Status\r\n          })\r\n        });\r\n\r\n\r\n        columns = [\r\n          <DataTableColumn key='SubscriberKey' label='Subscriber Key' property='SubscriberKey' />,\r\n          <DataTableColumn key='EmailAddress' label='Email Address' property='EmailAddress' />,\r\n          <DataTableColumn key='CreatedDate' label='Created Date' property='CreatedDate' />,\r\n          <DataTableColumn key='Status' label='Status' property='Status' />,\r\n        ]\r\n\r\n        break;\r\n      \r\n      case 'Bounced Subscribers':\r\n        this.props.subscribers.bouncedSubscribers.forEach(item => {\r\n          subscribersSummaryDetails.push({\r\n            SubscriberKey: item.SubscriberKey,\r\n            emailAddress: item.EmailAddress,\r\n            createdDate: item.CreatedDate,\r\n            status: item.Status\r\n          })\r\n        });\r\n\r\n\r\n        columns = [\r\n          <DataTableColumn key='SubscriberKey' label='Subscriber Key' property='SubscriberKey' />,\r\n          <DataTableColumn key='EmailAddress' label='Email Address' property='EmailAddress' />,\r\n          <DataTableColumn key='CreatedDate' label='Created Date' property='CreatedDate' />,\r\n          <DataTableColumn key='Status' label='Status' property='Status' />,\r\n        ]\r\n      } \r\n\r\n    this.setState({ items: subscribersSummaryDetails, columns, handleFilterChange})\r\n  }\r\n\r\n  handleFilterChange = (event) => {\r\n    let filteredItems;\r\n    let isFiltering = event.target.value ? true : false\r\n\r\n\r\n    switch (this.props.subscribersSummarySelected) {\r\n      case 'All Subscribers':     \r\n        filteredItems = this.props.subscribers.allSubscribers.filter((item) =>\r\n          RegExp(event.target.value, 'i').test(item.SubscriberKey)\r\n        );      \r\n        break;\r\n      case 'Duplicate Subscribers':\r\n        filteredItems = this.props.subscribers.duplicateSubscribers.filter((item) =>\r\n          RegExp(event.target.value, 'i').test(item.SubscriberKey)\r\n        );      \r\n        break;\r\n      case 'Active Subscribers':\r\n        filteredItems = this.props.subscribers.activeSubscribers.filter((item) =>\r\n          RegExp(event.target.value, 'i').test(item.SubscriberKey)\r\n        );      \r\n        break;\r\n      case 'Bounced Subscribers':\r\n        filteredItems = this.props.subscribers.bouncedSubscribers.filter((item) =>\r\n          RegExp(event.target.value, 'i').test(item.SubscriberKey)\r\n        );      \r\n        break;\r\n      case 'Unsubscribed Subscribers':\r\n        filteredItems = this.props.subscribers.unsubscribedSubscribers.filter((item) =>\r\n          RegExp(event.target.value, 'i').test(item.SubscriberKey)\r\n        );      \r\n        break;\r\n    }\r\n\r\n\t\tthis.setState({ isFiltering, items: filteredItems });\r\n\t};\r\n\r\n  render() {\r\n    const isEmpty = this.state.items.length === 0;\r\n\r\n\r\n    return (\r\n      <div>\r\n\r\n        <IconSettings iconPath='/icons/'>\r\n          <div className='slds-grid slds-grid_vertical'>\r\n            <Card\r\n              id='subscribersSummaryDetails_Card'\r\n              heading='Subscribers Summary'\r\n              headerActions={\r\n                <div className=\"slds-text-align_right\">\r\n                  {`${this.state.items.length} items`}\r\n                </div>\r\n              }\r\n              filter={\r\n                (!isEmpty || this.state.isFiltering) && (\r\n                  <CardFilter \r\n                    onChange={this.handleFilterChange} \r\n                    placeholder='Search By Subscriber Key'\r\n                  />\r\n                )\r\n              }\r\n              header={\r\n                <MediaObject \r\n                  body={\r\n                    <div className='slds-grid slds-grid_align-spread'>\r\n                      <div className='slds-text-heading_small'>\r\n                        {toTitleCase(this.props.subscribersSummarySelected)}\r\n                      </div>\r\n\r\n                    </div>\r\n                  }\r\n                  verticalCenter\r\n                />\r\n              }\r\n              empty={\r\n                isEmpty ? (\r\n                  <CardEmpty heading=\"No Items\" />\r\n                ) : null\r\n              }\r\n            >\r\n              {console.log(this.state.items)}\r\n              <DataTable \r\n                items={this.state.items} \r\n                fixedHeader\r\n              >\r\n                {this.state.columns}\r\n              </DataTable>\r\n            </Card>\r\n          </div>\r\n        </IconSettings>\r\n      </div> \r\n    )\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SubscribersSummaryDetails);\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport {\r\n  DataTable,\r\n  DataTableColumn,\r\n  DataTableCell,\r\n  PageHeader,\r\n  Icon,\r\n  Card,\r\n  Button,\r\n  MediaObject,\r\n  IconSettings\r\n} from '@salesforce/design-system-react';\r\nimport {\r\n  addAuditEventsJob,\r\n  updateAuditEventsJob,\r\n  filterItemsBySelectedMID\r\n} from '../../stateManagement/actions'\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    auditEvents: state.auditEvents,\r\n    auditEventsJob: state.auditEventsJob,\r\n    auditEventsJobState: state.auditEventsJobState,\r\n    businessUnitSelected: state.businessUnitSelected\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return { dispatch };\r\n};\r\n\r\nclass AuditTrail extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      items: []\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.props.auditEventsJobState === '') {\r\n      this.props.dispatch(addAuditEventsJob())\r\n      \r\n\r\n\r\n      let counter = 0\r\n\r\n      setInterval(() => {\r\n        if ( this.props.auditEventsJobState !== 'completed' && counter < 10 ) {\r\n          counter++\r\n          this.props.dispatch(updateAuditEventsJob(this.props.auditEventsJob));\r\n        }\r\n         \r\n      }, 2000);\r\n    } else {\r\n      this.handleUpdateToAuditEventsProps()\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(PrevProps, PrevState) {\r\n    if (PrevProps.auditEventsJobState !== 'completed' && this.props.auditEventsJobState === 'completed' && this.props.auditEvents.items.length > 0) {\r\n      this.handleUpdateToAuditEventsProps()\r\n    }\r\n  }\r\n\r\n  handleRefresh = () => {\r\n    this.props.dispatch(addAuditEventsJob());\r\n  }\r\n  \r\n\r\n  handleUpdateToAuditEventsProps() {\r\n    let auditTrail = []\r\n    \r\n    this.props.auditEvents.items.forEach(item => {\r\n      auditTrail.push({\r\n        id: item.id,\r\n        memberId: item.memberId,\r\n        createdDate: item.createdDate,\r\n        employee: item.employee.employeeName,\r\n        objectType: item.objectType.name,\r\n        operation: item.operation.name\r\n      })\r\n    })\r\n\r\n    this.setState({items: auditTrail})\r\n  }\r\n  \r\n  render() {\r\n\r\n    let info;\r\n    \r\n    if (this.props.auditEventsJobState !== 'completed') {\r\n      info = (\r\n        <div className=\"slds-text-color_weak\">\r\n          Retrieving results...\r\n        </div>\r\n      )\r\n    } else {\r\n      info = (\r\n        <div className=\"slds-text-color_success\">\r\n          Finished - Results retrieved! \r\n        </div>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <IconSettings iconPath='/icons/'>\r\n          <div className='slds-grid slds-grid_vertical'>\r\n            <Card\r\n              id='ExampleCard'\r\n              heading='Subscribers Summary'\r\n              headerActions={\r\n                <Button label=\"Refresh\" onClick={this.handleRefresh} /> \r\n              }\r\n              header={\r\n                <MediaObject \r\n                  body={\r\n                    <>\r\n                      <div className='slds-text-heading_medium'>\r\n                        Audit Trail\r\n                      </div>\r\n                      {info}\r\n                    </>\r\n                  }\r\n                  figure={<Icon category=\"custom\" name=\"custom91\" size=\"medium\" />}\r\n                  verticalCenter\r\n                />\r\n              }\r\n            >\r\n        <DataTable \r\n          items={filterItemsBySelectedMID(this.props.businessUnitSelected, this.state.items)}\r\n          fixedHeader\r\n          fixedLayout\r\n        >\r\n          <DataTableColumn key='id' label='Id' property='id' />\r\n          <DataTableColumn key='memberId' label='MID' property='memberId' />\r\n          <DataTableColumn key='createdDate' label='Created Date' property='createdDate' />\r\n          <DataTableColumn key='employee' label='Employee' property='employee' />\r\n          <DataTableColumn key='objectType' label='Object Type' property='objectType' />\r\n          <DataTableColumn key='operation' label='Operation' property='operation' />\r\n        </DataTable>\r\n      </Card>\r\n      </div>\r\n      </IconSettings>\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AuditTrail);\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { Button, IconSettings } from '@salesforce/design-system-react';\r\nimport * as FileSaver from \"file-saver\";\r\nimport * as XLSX from \"xlsx\";\r\nimport { \r\n  addSubscribersJob, \r\n  updateSubscribersJob,\r\n  addEventDataJob,\r\n  updateEventDataJob,\r\n  addEmailInventoryJob, \r\n  updateEmailInventoryJob,\r\n  addTemplateInventoryJob,\r\n  updateTemplateInventoryJob,\r\n  addCategoriesJob,\r\n  updateCategoriesJob,\r\n  addTriggeredSendsJob,\r\n  updateTriggeredSendsJob,\r\n  addCloudPagesJob,\r\n  updateCloudPagesJob,\r\n  addDataExtensionsJob,\r\n  updateDataExtensionsJob,\r\n  addFilterDataJob,\r\n  updateFilterDataJob,\r\n  addQueriesJob,\r\n  updateQueriesJob,\r\n  addAutomationsJob,\r\n  updateAutomationsJob,\r\n  addJourneysJob,\r\n  updateJourneysJob,\r\n  addBusinessUnitsJob,\r\n  updateBusinessUnitsJob,\r\n  addAccountUsersJob,\r\n  updateAccountUsersJob,\r\n  addRolesJob,\r\n  updateRolesJob,\r\n  addAuditEventsJob,\r\n  updateAuditEventsJob\r\n } from '../../stateManagement/actions'\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    eventDataJob: state.eventDataJob,\r\n    eventData: state.eventData,\r\n    eventDataJobState: state.eventDataJobState,\r\n    subscribersJob: state.subscribersJob,\r\n    subscribers: state.subscribers,\r\n    subscribersJobState: state.subscribersJobState,\r\n    emailInventory: state.emailInventory,\r\n    emailInventoryJob: state.emailInventoryJob,\r\n    emailInventoryJobState: state.emailInventoryJobState,\r\n    templateInventory: state.templateInventory,\r\n    templateInventoryJob: state.templateInventoryJob,\r\n    templateInventoryJobState: state.templateInventoryJobState,\r\n    categories: state.categories,\r\n    categoriesJob: state.categoriesJob,\r\n    categoriesJobState: state.categoriesJobState,\r\n    triggeredSends: state.triggeredSends,\r\n    triggeredSendsJob: state.triggeredSendsJob,\r\n    triggeredSendsJobState: state.triggeredSendsJobState,\r\n    cloudPages: state.cloudPages,\r\n    cloudPagesJob: state.cloudPagesJob,\r\n    cloudPagesJobState: state.cloudPagesJobState,\r\n    dataExtensions: state.dataExtensions,\r\n    dataExtensionsJob: state.dataExtensionsJob,\r\n    dataExtensionsJobState: state.dataExtensionsJobState,\r\n    filterData: state.filterData,\r\n    filterDataJob: state.filterDataJob,\r\n    filterDataJobState: state.filterDataJobState,\r\n    queries: state.queries,\r\n    queriesJob: state.queriesJob,\r\n    queriesJobState: state.queriesJobState,\r\n    automations: state.automations,\r\n    automationsJob: state.automationsJob,\r\n    automationsJobState: state.automationsJobState,\r\n    journeys: state.journeys,\r\n    journeysJob: state.journeysJob,\r\n    journeysJobState: state.journeysJobState,\r\n    businessUnits: state.businessUnits,\r\n    businessUnitsJob: state.businessUnitsJob,\r\n    businessUnitsJobState: state.businessUnitsJobState,\r\n    accountUsers: state.accountUsers,\r\n    accountUsersJob: state.accountUsersJob,\r\n    accountUsersJobState: state.accountUsersJobState,\r\n    auditEvents: state.auditEvents,\r\n    auditEventsJob: state.auditEventsJob,\r\n    auditEventsJobState: state.auditEventsJobState\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return { dispatch };\r\n};\r\n\r\nclass DownloadButton extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      fileType:\r\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\",\r\n      fileExtension: \".xlsx\",\r\n      buttonState: 'Ready', // Can either be 'Ready' or 'Loading'\r\n      downloadActionState: 'Download Pending' // Can either be 'Download Pending' or 'Download Complete'\r\n    }\r\n  }\r\n  \r\n  exportToExcel = () => {\r\n    this.setState({downloadActionState: 'Download Pending'})\r\n\r\n    // if data isn't in the state already - get it\r\n    if (\r\n      this.props.eventDataJobState !== 'completed' || \r\n      this.props.subscribersJobState !== 'completed' || \r\n      this.props.emailInventoryJobState !== 'completed' ||\r\n      this.props.templateInventoryJobState !== 'completed' ||\r\n      this.props.categoriesJobState !== 'completed' ||\r\n      this.props.triggeredSendsJobState !== 'completed' || \r\n      this.props.cloudPagesJobState !== 'completed' ||\r\n      this.props.dataExtensionsJobState !== 'completed' ||\r\n      this.props.filterDataJobState !== 'completed' ||\r\n      this.props.queriesJobState !== 'completed' ||\r\n      this.props.automationsJobState !== 'completed' ||\r\n      this.props.journeysJobState !== 'completed' ||\r\n      this.props.businessUnitsJobState !== 'completed' ||\r\n      this.props.accountUsersJobState !== 'completed' ||\r\n      this.props.auditEventsJobState !== 'completed'\r\n    ) {\r\n      this.setState({buttonState: 'Loading'})\r\n\r\n      this.props.dispatch(addEventDataJob());\r\n      this.props.dispatch(addSubscribersJob())\r\n      this.props.dispatch(addEmailInventoryJob())\r\n      this.props.dispatch(addTemplateInventoryJob())\r\n      this.props.dispatch(addCategoriesJob())\r\n      this.props.dispatch(addTriggeredSendsJob())\r\n      this.props.dispatch(addCloudPagesJob())\r\n      this.props.dispatch(addDataExtensionsJob())\r\n      this.props.dispatch(addFilterDataJob())\r\n      this.props.dispatch(addQueriesJob())\r\n      this.props.dispatch(addAutomationsJob())\r\n      this.props.dispatch(addJourneysJob())\r\n      this.props.dispatch(addBusinessUnitsJob())\r\n      this.props.dispatch(addAccountUsersJob())\r\n      this.props.dispatch(addAuditEventsJob())\r\n\r\n      // 1st counter - we do this to prevent an infinite loop with setInterval()\r\n      let counter1 = 0; \r\n\r\n      setInterval(() => {\r\n        if (counter1 < 10) {\r\n          counter1++\r\n\r\n          if (this.props.eventDataJobState !== 'completed') {\r\n            this.props.dispatch(updateEventDataJob(this.props.eventDataJob))\r\n          }\r\n\r\n          if (this.props.subscribersJobState !== 'completed') {\r\n            this.props.dispatch(updateSubscribersJob(this.props.subscribersJob))\r\n          }\r\n\r\n          if (this.props.emailInventoryJobState !== 'completed') {\r\n            this.props.dispatch(updateEmailInventoryJob(this.props.emailInventoryJob));\r\n          } \r\n  \r\n          if (this.props.templateInventoryJobState !== 'completed') {\r\n            this.props.dispatch(updateTemplateInventoryJob(this.props.templateInventoryJob));\r\n          }\r\n          \r\n          if (this.props.categoriesJobState !== 'completed') {\r\n            this.props.dispatch(updateCategoriesJob(this.props.categoriesJob));\r\n          }\r\n  \r\n          if (this.props.triggeredSendsJobState !== 'completed') {\r\n            this.props.dispatch(updateTriggeredSendsJob(this.props.triggeredSendsJob));\r\n          }\r\n  \r\n          if (this.props.cloudPagesJobState !== 'completed') {\r\n            this.props.dispatch(updateCloudPagesJob(this.props.cloudPagesJob));\r\n          }\r\n  \r\n          if (this.props.dataExtensionsJobState !== 'completed') {\r\n            this.props.dispatch(updateDataExtensionsJob(this.props.dataExtensionsJob));\r\n          }\r\n  \r\n          if (this.props.filterDataJobState !== 'completed') {\r\n            this.props.dispatch(updateFilterDataJob(this.props.filterDataJob));\r\n          }\r\n  \r\n          if (this.props.queriesJobState !== 'completed') {\r\n            this.props.dispatch(updateQueriesJob(this.props.queriesJob));\r\n          }\r\n  \r\n          if (this.props.automationsJobState !== 'completed') {\r\n            this.props.dispatch(updateAutomationsJob(this.props.automationsJob));\r\n          }\r\n  \r\n          if (this.props.journeysJobState !== 'completed' ) {\r\n            this.props.dispatch(updateJourneysJob(this.props.journeysJob));\r\n          }\r\n  \r\n          if (this.props.businessUnitsJobState !== 'completed') {\r\n            this.props.dispatch(updateBusinessUnitsJob(this.props.businessUnitsJob))\r\n          }\r\n  \r\n          if (this.props.accountUsersJobState !== 'completed') {\r\n            this.props.dispatch(updateAccountUsersJob(this.props.accountUsersJob))\r\n          }\r\n\r\n          if (this.props.auditEventsJobState !== 'completed') {\r\n            this.props.dispatch(updateAuditEventsJob(this.props.auditEventsJob))\r\n          }\r\n        }    \r\n\r\n        if (\r\n          this.props.eventDataJobState === 'completed' && \r\n          this.props.subscribersJobState === 'completed' && \r\n          this.props.emailInventoryJobState === 'completed' &&\r\n          this.props.templateInventoryJobState === 'completed' &&\r\n          this.props.categoriesJobState === 'completed' &&\r\n          this.props.triggeredSendsJobState === 'completed' && \r\n          this.props.cloudPagesJobState === 'completed' &&\r\n          this.props.dataExtensionsJobState === 'completed' &&\r\n          this.props.filterDataJobState === 'completed' &&\r\n          this.props.queriesJobState === 'completed' &&\r\n          this.props.automationsJobState === 'completed' &&\r\n          this.props.journeysJobState === 'completed' &&\r\n          this.props.businessUnitsJobState === 'completed' &&\r\n          this.props.accountUsersJobState === 'completed' &&\r\n          this.props.auditEventsJobState === 'completed'\r\n        ) {\r\n          this.setState({buttonState: 'Ready'})\r\n        }\r\n\r\n      }, 2000 )\r\n    }\r\n\r\n\r\n    let counter2 = 0\r\n\r\n    setInterval(() => {\r\n      if (counter2 < 10) {\r\n        counter2++ \r\n        if (\r\n          this.state.buttonState === 'Ready' &&\r\n          this.state.downloadActionState === 'Download Pending' &&\r\n          this.props.eventDataJobState === 'completed' && \r\n          this.props.subscribersJobState === 'completed' && \r\n          this.props.emailInventoryJobState === 'completed' &&\r\n          this.props.templateInventoryJobState === 'completed' &&\r\n          this.props.categoriesJobState === 'completed' &&\r\n          this.props.triggeredSendsJobState === 'completed' && \r\n          this.props.cloudPagesJobState === 'completed' &&\r\n          this.props.dataExtensionsJobState === 'completed' &&\r\n          this.props.filterDataJobState === 'completed' &&\r\n          this.props.queriesJobState === 'completed' &&\r\n          this.props.automationsJobState === 'completed' &&\r\n          this.props.journeysJobState === 'completed' &&\r\n          this.props.businessUnitsJobState === 'completed' &&\r\n          this.props.accountUsersJobState === 'completed' &&\r\n          this.props.auditEventsJobState === 'completed'\r\n        ) {\r\n          console.log('Should be downloading a file soon...')\r\n          let allSubscribers = this.props.subscribers.allSubscribers\r\n    \r\n          // Clean up sendData prop to pull object props that matter\r\n          let sendData = []     \r\n          this.props.eventData.sendData.forEach(item => {\r\n            sendData.push({\r\n              sendId: item.SendID,\r\n              listId: item.PartnerProperties.Value,\r\n              subscriberKey: item.SubscriberKey,\r\n              eventDate: item.EventDate,\r\n              eventType: item.EventType,\r\n              triggeredSendDefinitionObjectId: item.TriggeredSendDefinitionObjectID,\r\n              batchId: item.BatchID \r\n            })\r\n          })\r\n      \r\n          // Clean up openData prop to pull object props that matter\r\n          let openData = []\r\n          this.props.eventData.openData.forEach(item => {\r\n            openData.push({\r\n              Id: item.ID,\r\n              sendId: item.SendID,\r\n              subscriberKey: item.SubscriberKey,\r\n              eventDate: item.EventDate,\r\n              eventType: item.EventType,\r\n              triggeredSendDefinitionObjectId: item.TriggeredSendDefinitionObjectID,\r\n              batchId: item.BatchID \r\n            })\r\n          });    \r\n          \r\n          // Clean up bounceData prop to pull object props that matter\r\n          let bounceData = []\r\n          this.props.eventData.bounceData.forEach(item => {\r\n            bounceData.push({\r\n              Id: item.ID,\r\n              sendId: item.SendID,\r\n              subscriberKey: item.SubscriberKey,\r\n              eventDate: item.EventDate,\r\n              eventType: item.EventType,\r\n              triggeredSendDefinitionObjectId: item.TriggeredSendDefinitionObjectID,\r\n              batchId: item.BatchID, \r\n              smtpCode: item.SMTPCode,\r\n              bounceCategory: item.BounceCategory,\r\n              smtpReason: item.SMTPReason\r\n            })\r\n          });\r\n      \r\n          // Clean up clickData prop to pull object props that matter\r\n          let clickData = []\r\n          this.props.eventData.clickData.forEach(item => {\r\n            clickData.push({\r\n              Id: item.ID,\r\n              sendId: item.SendID,\r\n              subscriberKey: item.SubscriberKey,\r\n              eventDate: item.EventDate,\r\n              eventType: item.EventType,\r\n              triggeredSendDefinitionObjectId: item.TriggeredSendDefinitionObjectID\r\n            })\r\n          });\r\n      \r\n          // Clean up bounceData prop to pull object props that matter\r\n          let unsubscribeData = []\r\n          this.props.eventData.unsubscribeData.forEach(item => {\r\n            unsubscribeData.push({\r\n              Id: item.ID,\r\n              sendId: item.SendID,\r\n              subscriberKey: item.SubscriberKey,\r\n              eventDate: item.EventDate,\r\n              eventType: item.EventType,\r\n              triggeredSendDefinitionObjectId: item.TriggeredSendDefinitionObjectID\r\n            })\r\n          });\r\n      \r\n          let htmlEmailData = []\r\n          this.props.emailInventory.htmlEmailData.items.forEach(item => {\r\n            htmlEmailData.push({\r\n              customerKey: item.customerKey,\r\n              name: item.name,\r\n              owner: item.owner.name,\r\n              status: item.status.name \r\n            })\r\n          });\r\n      \r\n          let templateEmailData = []\r\n          this.props.emailInventory.templateEmailData.items.forEach(item => {\r\n            templateEmailData.push({\r\n              customerKey: item.customerKey,\r\n              name: item.name,\r\n              owner: item.owner.name,\r\n              status: item.status.name \r\n            })\r\n          });\r\n      \r\n          let textOnlyEmailData = []\r\n          this.props.emailInventory.textOnlyEmailData.items.forEach(item => {\r\n            textOnlyEmailData.push({\r\n              customerKey: item.customerKey,\r\n              name: item.name,\r\n              owner: item.owner.name,\r\n              status: item.status.name \r\n            })\r\n          });\r\n      \r\n          let templateInventory = []\r\n          this.props.templateInventory.items.forEach(item => {\r\n            templateInventory.push({\r\n              customerKey: item.customerKey,\r\n              name: item.name,\r\n              status: item.status.name \r\n            })\r\n          });\r\n      \r\n          // categories doesn't need any object props filtered out...\r\n          let categories = this.props.categories.items\r\n      \r\n          let triggeredSends = []\r\n          this.props.triggeredSends.forEach(item => {\r\n            triggeredSends.push({\r\n              name: item.Name,\r\n              customerKey: item.CustomerKey,\r\n              description: item.Description,\r\n              createdDate: item.CreatedDate,\r\n              fromName: item.FromName,\r\n              fromAddress: item.FromAddress,\r\n              emailSubject: item.EmailSubject,\r\n              triggeredSendType: item.TriggeredSendType,\r\n              triggeredSendStatus: item.TriggeredSendStatus\r\n            })\r\n          });      \r\n      \r\n          let cloudPages = []\r\n          this.props.cloudPages.items.forEach(item => {\r\n            cloudPages.push({\r\n              id: item.id,\r\n              name: item.name,\r\n              customerKey: item.customerKey,\r\n              contentType: item.contentType,\r\n              owner: item.owner.name,\r\n              createdDate: item.createdDate,\r\n              status: item.status.name\r\n            })\r\n          });\r\n      \r\n          let dataExtensions = []\r\n          this.props.dataExtensions.forEach(item => {\r\n            dataExtensions.push({\r\n              name: item.Name,\r\n              customerKey: item.CustomerKey,\r\n              owner: item.Owner,\r\n              createdDate: item.CreatedDate,\r\n              isSendable: item.IsSendable,\r\n              isTestable: item.IsTestable,\r\n              rowBasedRetention: item.RowBasedRetention,\r\n              resetRetentionPeriodOnImport: item.ResetRetentionPeriodOnImport,\r\n              deleteAtEndOfRetentionPeriod: item.DeleteAtEndOfRetentionPeriod,\r\n              retainUntil: item.RetainUntil,\r\n              status: item.Status\r\n            })\r\n          });\r\n      \r\n          let filters = []\r\n          this.props.filterData.forEach(item => {\r\n            filters.push({\r\n              name: item.Name,\r\n              customerKey: item.CustomerKey,\r\n              createdDate: item.CreatedDate,\r\n              dataSourceName: item.DataSource.Name,\r\n              dataSourceCustomerKey: item.DataSource.CustomerKey\r\n            })\r\n          });\r\n      \r\n          let queries = []\r\n          this.props.queries.forEach(item => {\r\n            queries.push({\r\n              name: item.Name,\r\n              customerKey: item.CustomerKey,\r\n              createdDate: item.CreatedDate,\r\n              targetType: item.TargetType,\r\n              targetUpdateType: item.TargetUpdateType,\r\n              categoryId: item.CategoryId,\r\n              status: item.Status\r\n            })\r\n          });\r\n      \r\n          let automations = []\r\n          this.props.automations.forEach(item => {\r\n            automations.push({\r\n              name: item.Name,\r\n              customerKey: item.CustomerKey,\r\n              createdDate: item.CreatedDate,\r\n              isActive: item.IsActive,\r\n              status: item.Status\r\n            })\r\n          });\r\n      \r\n          let journeys = []\r\n          this.props.journeys.items.forEach(item => {\r\n            journeys.push({\r\n              name: item.name,\r\n              key: item.key,\r\n              createdDate: item.createdDate,\r\n              version: item.version,\r\n              entryMode: item.entryMode,\r\n              definitionType: item.definitionType,\r\n              categoryId: item.categoryId,\r\n              currentPopulation: item.stats.currentPopulation,\r\n              cumulativePopulation: item.stats.cumulativePopulation,\r\n              metGoal: item.stats.metGoal,\r\n              metExitCriteria: item.stats.metExitCriteria,\r\n              goalPerformance: item.stats.goalPerformance,\r\n              status: item.status\r\n            })\r\n          });\r\n      \r\n          let businessUnits = []\r\n          this.props.businessUnits.forEach(item => {\r\n            businessUnits.push({\r\n              clientId: item.Client.ID,\r\n              enterpriseId: item.Client.EnterpriseID,\r\n              customerKey: item.CustomerKey,\r\n              name: item.Name,\r\n              email: item.Email,\r\n              fromName: item.FromName,\r\n              businessName: item.BusinessName,\r\n              phone: item.Phone,\r\n              address: item.Address,\r\n              city: item.City,\r\n              state: item.State,\r\n              zip: item.Zip,\r\n              country: item.Country,\r\n              isActive: item.IsActive,\r\n              dbid: item.DBID,\r\n              masterUnsubscribeBehavior: item.MasterUnsubscribeBehavior\r\n            })\r\n          });\r\n      \r\n          let users = []\r\n          this.props.accountUsers.forEach(item => {\r\n            users.push({ \r\n              id: item.ID,\r\n              customerKey: item.CustomerKey,\r\n              userId: item.UserID,\r\n              name: item.Name,\r\n              email: item.Email,\r\n              createdDate: item.CreatedDate,\r\n              mustChangePassword: item.MustChangePassword,\r\n              activeFlag: item.ActiveFlag,\r\n              isApiUser: item.IsAPIUser,\r\n              notificationEmailAddress: item.NotificationEmailAddress,\r\n              defaultBusinessUnit: item.DefaultBusinessUnit,\r\n              salesforceId: item.SalesForceID,\r\n              isSendable: item.IsSendable,\r\n              lastLogin: item.LastSuccessfulLogin\r\n            })\r\n          })\r\n      \r\n          let auditEvents = []\r\n          this.props.auditEvents.items.forEach(item => {\r\n            users.push({ \r\n              id: item.ID,\r\n              createdDate: item.createdDate,\r\n              memberId: item.memberId,\r\n              employee: item.employeeName,\r\n              objectType: item.objectType.name,\r\n              operation: item.operation.name\r\n            })\r\n          })\r\n      \r\n      \r\n          const ws_allSubscribers = XLSX.utils.json_to_sheet(allSubscribers);\r\n          const ws_sendData = XLSX.utils.json_to_sheet(sendData);\r\n          const ws_openData = XLSX.utils.json_to_sheet(openData);\r\n          const ws_bounceData = XLSX.utils.json_to_sheet(bounceData);\r\n          const ws_clickData = XLSX.utils.json_to_sheet(clickData);\r\n          const ws_unsubscribeData = XLSX.utils.json_to_sheet(unsubscribeData);\r\n          const ws_htmlEmailData = XLSX.utils.json_to_sheet(htmlEmailData);\r\n          const ws_templateEmailData = XLSX.utils.json_to_sheet(templateEmailData);\r\n          const ws_textOnlyEmailData = XLSX.utils.json_to_sheet(textOnlyEmailData);\r\n          const ws_templates = XLSX.utils.json_to_sheet(templateInventory);\r\n          const ws_categories = XLSX.utils.json_to_sheet(categories);\r\n          const ws_triggeredSends = XLSX.utils.json_to_sheet(triggeredSends);\r\n          const ws_cloudPages = XLSX.utils.json_to_sheet(cloudPages);\r\n          const ws_dataExtensions = XLSX.utils.json_to_sheet(dataExtensions);\r\n          const ws_filters = XLSX.utils.json_to_sheet(filters);\r\n          const ws_queries = XLSX.utils.json_to_sheet(queries);\r\n          const ws_automations = XLSX.utils.json_to_sheet(automations);\r\n          const ws_journeys = XLSX.utils.json_to_sheet(journeys);\r\n          const ws_businessUnits = XLSX.utils.json_to_sheet(businessUnits);\r\n          const ws_users = XLSX.utils.json_to_sheet(users);\r\n          const ws_auditEvents = XLSX.utils.json_to_sheet(auditEvents)\r\n      \r\n      \r\n          let Sheets = {\r\n            allSubscribers: ws_allSubscribers,\r\n            sendData: ws_sendData,\r\n            openData: ws_openData,\r\n            bounceData: ws_bounceData,\r\n            clickData: ws_clickData,\r\n            unsubscribeData: ws_unsubscribeData,\r\n            htmlEmailData: ws_htmlEmailData,\r\n            templateEmailData: ws_templateEmailData,\r\n            textOnlyEmailData: ws_textOnlyEmailData,\r\n            templates: ws_templates,\r\n            categories: ws_categories,\r\n            triggeredSends: ws_triggeredSends,\r\n            cloudPages: ws_cloudPages,\r\n            dataExtensions: ws_dataExtensions,\r\n            filters: ws_filters,\r\n            queries: ws_queries,\r\n            automations: ws_automations,\r\n            journeys: ws_journeys,\r\n            businessUnits: ws_businessUnits,\r\n            users: ws_users,\r\n            auditEvents: ws_auditEvents\r\n          }\r\n      \r\n          let SheetNames = [\r\n            'allSubscribers',\r\n            'sendData',\r\n            'openData',\r\n            'bounceData',\r\n            'clickData',\r\n            'unsubscribeData',\r\n            'htmlEmailData',\r\n            'templateEmailData',\r\n            'textOnlyEmailData',\r\n            'templates',\r\n            'categories',\r\n            'triggeredSends',\r\n            'cloudPages',\r\n            'dataExtensions',\r\n            'filters',\r\n            'queries',\r\n            'journeys',\r\n            'businessUnits',\r\n            'users',\r\n            'auditEvents'\r\n          ]\r\n      \r\n          const wb = { \r\n            Sheets, \r\n            SheetNames\r\n          };\r\n          const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\r\n          const data = new Blob([excelBuffer], { type: this.state.fileType });\r\n          const today = new Date();\r\n          const dd = String(today.getDate()).padStart(2, '0')\r\n          const mm = String(today.getMonth() + 1).padStart(2, '0')\r\n          const yyyy = today.getFullYear();\r\n          FileSaver.saveAs(data, 'TA_Dashboard_Data_' + mm + dd + yyyy + this.state.fileExtension);\r\n          this.setState({downloadActionState: 'Download Complete'})\r\n        }\r\n      }\r\n    }, 2000)\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className='downloadButton'>\r\n      <IconSettings iconPath=\"/icons/\">\r\n        <Button \r\n          onClick={() => this.exportToExcel()} \r\n          iconPosition='left' \r\n          label={this.state.buttonState !== 'Ready' ? 'Download Pending...' : 'Download Data' }\r\n          iconCategory='utility'\r\n          iconName='download'  \r\n          variant='brand' \r\n          disabled={this.state.buttonState !== 'Ready' ? true : false}\r\n        /> \r\n      </IconSettings>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DownloadButton)","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport DownloadButton from '../DownloadButton/DownloadButton';\r\nimport { \r\n  IconSettings,\r\n  Icon,\r\n  Card,\r\n  Button,\r\n  MediaObject\r\n} from '@salesforce/design-system-react';\r\nimport '../../components/DownloadDataPage/DownloadDataPage.css'\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return { dispatch };\r\n};\r\n\r\nclass DownloadDataPage extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n      \r\n      <IconSettings iconPath='/icons/'>\r\n        <div className='slds-grid slds-grid_vertical'>\r\n            <Card\r\n              id='ExampleCard'\r\n              hasNoHeader\r\n            >\r\n              <p class=\"slds-text-heading_small slds-text-align_center\">\r\n                Click the button below to download an excel file containing all of the raw data displayed in the dashboard!\r\n              </p>\r\n              <DownloadButton /> \r\n            </Card>\r\n        </div>  \r\n      </IconSettings>\r\n\r\n      {/* <div class=\"slds-box downloadDataPage\">\r\n        <p class=\"slds-text-heading_small slds-text-align_center\">\r\n          Click the button below to download an excel file containing all of the raw data displayed in the dashboard!\r\n        </p> \r\n        <DownloadButton /> \r\n      </div> */}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DownloadDataPage);","import React, { Component } from 'react';\r\n\r\nexport default class About extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div data-testid=\"about-page\">\r\n        <div className=\"slds-box slds-theme_default\">\r\n          <div className=\"slds-grid slds-gutters\">\r\n            <div className=\"slds-col\">\r\n              <div \r\n                className=\"slds-text-heading_medium slds-align_absolute-center\" \r\n                style={{marginBottom: '1em'}}\r\n              >\r\n                Coming Soon! Please visit the Github Wiki below\r\n              </div>\r\n              <div className=\"slds-align_absolute-center\" >\r\n                <a href='https://github.com/balwillSFDC/sfmc-audit-dashboard' \r\n                  target='_blank'\r\n                  rel=\"noreferrer\"\r\n                >\r\n                  <img \r\n                    src={process.env.PUBLIC_URL + '/assets/images/github/GitHub-Mark-64px.png'} alt='github-logo'   \r\n                  />\r\n                </a>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { \r\n  IconSettings,\r\n  Icon,\r\n  Card,\r\n  Button,\r\n  MediaObject,\r\n  Input\r\n} from '@salesforce/design-system-react';\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return { dispatch };\r\n};\r\n\r\nclass JourneyToolsPage extends Component {\r\n  render() {\r\n    return (\r\n\r\n      <IconSettings iconPath='/icons/'>\r\n        <div className='slds-grid slds-grid_vertical'>\r\n            <Card\r\n              id='ExampleCard'\r\n              hasNoHeader\r\n            >\r\n              <div>\r\n                <Input\r\n                  assistiveText={{label: 'Subscriber Key'}}\r\n                  id='subscriberKey'\r\n                  placeholder='Search By Subscriber Key'\r\n                />\r\n              </div>\r\n              \r\n            </Card>\r\n        </div>  \r\n      </IconSettings>\r\n\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(JourneyToolsPage);","import React from 'react';\r\nimport '../App/App.css';\r\nimport { connect } from 'react-redux';\r\nimport { BrandBand, Button } from '@salesforce/design-system-react';\r\nimport Appheader from '../AppHeader/AppHeader';\r\nimport EmailActivity from '../EmailActivity/EmailActivity';\r\nimport { BrowserRouter, Route } from 'react-router-dom';\r\nimport AccountInventory from '../AccountInventory/AccountInventory';\r\nimport AccountInventoryDetails from '../AccountInventoryDetails/AccountInventoryDetails'\r\nimport EmailActivityDetails from '../EmailActivityDetails/EmailActivityDetails'\r\nimport SubscribersSummary from '../SubscribersSummary/SubscribersSummary'\r\nimport SubscribersSummaryDetails from '../SubscribersSummaryDetails/SubscribersSummaryDetails';\r\nimport AuditTrail from '../AuditTrail/AuditTrail';\r\nimport DownloadDataPage from '../DownloadDataPage/DownloadDataPage';\r\nimport About from '../About/About';\r\nimport JourneyDetailModal from '../JourneyDetailModal/JourneyDetailModal';\r\nimport JourneyToolsPage from '../JourneyToolsPage/JourneyToolsPage';\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    accountInventorySelected: state.accountInventorySelected,\r\n    emailActivitySelected: state.emailActivitySelected,\r\n    subscribersSummarySelected: state.subscribersSummarySelected,\r\n    isOpenJourneyDetailModal: state.isOpenJourneyDetailModal\r\n    // ...\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return { dispatch };\r\n};\r\n\r\n\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n\r\n    }\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <BrowserRouter>\r\n          <BrandBand\r\n            id=\"brand-band-lightning-blue\"\r\n            className=\"slds-p-around_small\"\r\n            theme=\"lightning-blue\"\r\n          >\r\n            <Appheader />\r\n            <Route exact path=\"/\">\r\n              <SubscribersSummary /> \r\n              { this.props.subscribersSummarySelected && <SubscribersSummaryDetails />  }\r\n\r\n              <EmailActivity />\r\n              { this.props.emailActivitySelected && <EmailActivityDetails />  }\r\n\r\n              <AccountInventory />\r\n              { this.props.accountInventorySelected && <AccountInventoryDetails />  }\r\n              { this.props.isOpenJourneyDetailModal && <JourneyDetailModal /> }\r\n            </Route>\r\n\r\n            <Route exact path='/auditTrail'>\r\n              <AuditTrail /> \r\n            </Route>\r\n\r\n            <Route exact path='/journeyTools'>\r\n              <JourneyToolsPage /> \r\n            </Route>\r\n\r\n            <Route exact path='/download'>\r\n              <DownloadDataPage /> \r\n            </Route>\r\n\r\n            <Route exact path='/about'>\r\n              <About />\r\n            </Route>\r\n          </BrandBand>\r\n        </BrowserRouter>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App/App';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './stateManagement/store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}