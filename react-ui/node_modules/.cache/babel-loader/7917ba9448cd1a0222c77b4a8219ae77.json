{"ast":null,"code":"import assign from 'lodash.assign';\nvar COLOR_NAMES = {\n  aliceblue: '#f0f8ff',\n  antiquewhite: '#faebd7',\n  aqua: '#00ffff',\n  aquamarine: '#7fffd4',\n  azure: '#f0ffff',\n  beige: '#f5f5dc',\n  bisque: '#ffe4c4',\n  black: '#000000',\n  blanchedalmond: '#ffebcd',\n  blue: '#0000ff',\n  blueviolet: '#8a2be2',\n  brown: '#a52a2a',\n  burlywood: '#deb887',\n  cadetblue: '#5f9ea0',\n  chartreuse: '#7fff00',\n  chocolate: '#d2691e',\n  coral: '#ff7f50',\n  cornflowerblue: '#6495ed',\n  cornsilk: '#fff8dc',\n  crimson: '#dc143c',\n  cyan: '#00ffff',\n  darkblue: '#00008b',\n  darkcyan: '#008b8b',\n  darkgoldenrod: '#b8860b',\n  darkgray: '#a9a9a9',\n  darkgreen: '#006400',\n  darkkhaki: '#bdb76b',\n  darkmagenta: '#8b008b',\n  darkolivegreen: '#556b2f',\n  darkorange: '#ff8c00',\n  darkorchid: '#9932cc',\n  darkred: '#8b0000',\n  darksalmon: '#e9967a',\n  darkseagreen: '#8fbc8f',\n  darkslateblue: '#483d8b',\n  darkslategray: '#2f4f4f',\n  darkturquoise: '#00ced1',\n  darkviolet: '#9400d3',\n  deeppink: '#ff1493',\n  deepskyblue: '#00bfff',\n  dimgray: '#696969',\n  dodgerblue: '#1e90ff',\n  firebrick: '#b22222',\n  floralwhite: '#fffaf0',\n  forestgreen: '#228b22',\n  fuchsia: '#ff00ff',\n  gainsboro: '#dcdcdc',\n  ghostwhite: '#f8f8ff',\n  gold: '#ffd700',\n  goldenrod: '#daa520',\n  gray: '#808080',\n  green: '#008000',\n  greenyellow: '#adff2f',\n  honeydew: '#f0fff0',\n  hotpink: '#ff69b4',\n  indianred: '#cd5c5c',\n  indigo: '#4b0082',\n  ivory: '#fffff0',\n  khaki: '#f0e68c',\n  lavender: '#e6e6fa',\n  lavenderblush: '#fff0f5',\n  lawngreen: '#7cfc00',\n  lemonchiffon: '#fffacd',\n  lightblue: '#add8e6',\n  lightcoral: '#f08080',\n  lightcyan: '#e0ffff',\n  lightgoldenrodyellow: '#fafad2',\n  lightgrey: '#d3d3d3',\n  lightgreen: '#90ee90',\n  lightpink: '#ffb6c1',\n  lightsalmon: '#ffa07a',\n  lightseagreen: '#20b2aa',\n  lightskyblue: '#87cefa',\n  lightslategray: '#778899',\n  lightsteelblue: '#b0c4de',\n  lightyellow: '#ffffe0',\n  lime: '#00ff00',\n  limegreen: '#32cd32',\n  linen: '#faf0e6',\n  magenta: '#ff00ff',\n  maroon: '#800000',\n  mediumaquamarine: '#66cdaa',\n  mediumblue: '#0000cd',\n  mediumorchid: '#ba55d3',\n  mediumpurple: '#9370d8',\n  mediumseagreen: '#3cb371',\n  mediumslateblue: '#7b68ee',\n  mediumspringgreen: '#00fa9a',\n  mediumturquoise: '#48d1cc',\n  mediumvioletred: '#c71585',\n  midnightblue: '#191970',\n  mintcream: '#f5fffa',\n  mistyrose: '#ffe4e1',\n  moccasin: '#ffe4b5',\n  navajowhite: '#ffdead',\n  navy: '#000080',\n  oldlace: '#fdf5e6',\n  olive: '#808000',\n  olivedrab: '#6b8e23',\n  orange: '#ffa500',\n  orangered: '#ff4500',\n  orchid: '#da70d6',\n  palegoldenrod: '#eee8aa',\n  palegreen: '#98fb98',\n  paleturquoise: '#afeeee',\n  palevioletred: '#d87093',\n  papayawhip: '#ffefd5',\n  peachpuff: '#ffdab9',\n  peru: '#cd853f',\n  pink: '#ffc0cb',\n  plum: '#dda0dd',\n  powderblue: '#b0e0e6',\n  purple: '#800080',\n  rebeccapurple: '#663399',\n  red: '#ff0000',\n  rosybrown: '#bc8f8f',\n  royalblue: '#4169e1',\n  saddlebrown: '#8b4513',\n  salmon: '#fa8072',\n  sandybrown: '#f4a460',\n  seagreen: '#2e8b57',\n  seashell: '#fff5ee',\n  sienna: '#a0522d',\n  silver: '#c0c0c0',\n  skyblue: '#87ceeb',\n  slateblue: '#6a5acd',\n  slategray: '#708090',\n  snow: '#fffafa',\n  springgreen: '#00ff7f',\n  steelblue: '#4682b4',\n  tan: '#d2b48c',\n  teal: '#008080',\n  thistle: '#d8bfd8',\n  tomato: '#ff6347',\n  turquoise: '#40e0d0',\n  violet: '#ee82ee',\n  wheat: '#f5deb3',\n  white: '#ffffff',\n  whitesmoke: '#f5f5f5',\n  yellow: '#ffff00',\n  yellowgreen: '#9acd32'\n};\nvar HEX_REGEX = /^#([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i;\nvar ColorUtils = {\n  getNewColor: function getNewColor(options, customHexValidator) {\n    var oldColor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (options.hex) {\n      if (customHexValidator ? !customHexValidator(options.hex) : !this.isValidHex(options.hex)) {\n        return assign({}, oldColor, {\n          hex: options.hex,\n          errors: assign({}, oldColor.errors, {\n            hex: true\n          }),\n          hsv: {\n            hue: '',\n            saturation: '',\n            value: ''\n          },\n          rgb: {\n            red: '',\n            green: '',\n            blue: ''\n          }\n        });\n      }\n\n      var returnColor = {\n        hex: options.hex,\n        hsv: this.getHsvFromHex(options.hex),\n        rgb: this.getRgbFromHex(options.hex)\n      };\n\n      if (options.name) {\n        returnColor.name = options.name;\n      }\n\n      return returnColor;\n    }\n\n    if ('red' in options || 'blue' in options || 'green' in options) {\n      var rgb = assign({}, oldColor.rgb, options);\n      var errors = this.getRgbErrors(rgb);\n\n      if (Object.values(errors).includes(true)) {\n        return assign({}, oldColor, {\n          rgb: rgb,\n          errors: assign({}, oldColor.errors, errors)\n        });\n      }\n\n      return {\n        hex: this.getHexFromRgb(rgb),\n        hsv: this.getHsvFromRgb(rgb),\n        rgb: rgb\n      };\n    }\n\n    if ('hue' in options || 'saturation' in options || 'value' in options) {\n      var hsv = assign({}, oldColor.hsv, options);\n      return {\n        hex: this.getHexFromHsv(hsv),\n        hsv: hsv,\n        rgb: this.getRgbFromHsv(hsv)\n      };\n    }\n\n    return {\n      hex: '',\n      hsv: {\n        hue: '',\n        saturation: '',\n        value: ''\n      },\n      rgb: {\n        red: '',\n        green: '',\n        blue: ''\n      }\n    };\n  },\n  getDeltaColor: function getDeltaColor(options, customHexValidator, oldColor) {\n    var limitValue = function limitValue(value) {\n      return Math.min(Math.max(value, 0), 100);\n    };\n\n    return this.getNewColor({\n      saturation: limitValue(oldColor.hsv.saturation + (options.saturation || 0)),\n      value: limitValue(oldColor.hsv.value + (options.value || 0))\n    }, customHexValidator, oldColor);\n  },\n  isValidHex: function isValidHex(value) {\n    return !value || HEX_REGEX.test(this.toSixDigitHex(value));\n  },\n  getRgbErrors: function getRgbErrors(rgb) {\n    var hasError = function hasError(value) {\n      return isNaN(value) || Math.floor(value) !== Number(value) || value < 0 || value >= 256;\n    };\n\n    return Object.entries(rgb).reduce(function (errors, keyValue) {\n      // eslint-disable-next-line no-param-reassign\n      errors[keyValue[0]] = hasError(keyValue[1]);\n      return errors;\n    }, {});\n  },\n  getHsvFromHex: function getHsvFromHex(hex) {\n    return this.getHsvFromRgb(this.getRgbFromHex(hex));\n  },\n  getHexFromHsv: function getHexFromHsv(_ref) {\n    var hue = _ref.hue,\n        saturation = _ref.saturation,\n        value = _ref.value;\n    return this.getHexFromRgb(this.getRgbFromHsv({\n      hue: hue,\n      saturation: saturation,\n      value: value\n    }));\n  },\n  getHexFromNamedColor: function getHexFromNamedColor(name) {\n    return COLOR_NAMES[name.toLowerCase()] || null;\n  },\n  getHsvFromRgb: function getHsvFromRgb(_ref2) {\n    var red = _ref2.red,\n        green = _ref2.green,\n        blue = _ref2.blue;\n    var redRatio = red / 255;\n    var greenRatio = green / 255;\n    var blueRatio = blue / 255;\n    var max = Math.max(redRatio, greenRatio, blueRatio);\n    var min = Math.min(redRatio, greenRatio, blueRatio);\n    var delta = max - min;\n    var saturation = max === 0 ? 0 : delta / max * 100;\n    var value = max * 100;\n    var hue;\n\n    if (max === min) {\n      hue = 0;\n    } else {\n      if (redRatio === max) {\n        hue = (greenRatio - blueRatio) / delta + (greenRatio < blueRatio ? 6 : 0);\n      } else if (greenRatio === max) {\n        hue = (blueRatio - redRatio) / delta + 2;\n      } else {\n        hue = (redRatio - greenRatio) / delta + 4;\n      }\n\n      hue *= 60;\n    }\n\n    return {\n      hue: hue,\n      saturation: saturation,\n      value: value\n    };\n  },\n  getRgbFromHsv: function getRgbFromHsv(_ref3) {\n    var hue = _ref3.hue,\n        saturation = _ref3.saturation,\n        value = _ref3.value;\n    var hueRatio = hue / 360;\n    var satRatio = saturation / 100;\n    var valRatio = value / 100;\n    var red;\n    var green;\n    var blue;\n    var i = Math.floor(hueRatio * 6);\n    var f = hueRatio * 6 - i;\n    var p = valRatio * (1 - satRatio);\n    var q = valRatio * (1 - f * satRatio);\n    var t = valRatio * (1 - (1 - f) * satRatio);\n\n    switch (i % 6) {\n      case 0:\n        red = valRatio;\n        green = t;\n        blue = p;\n        break;\n\n      case 1:\n        red = q;\n        green = valRatio;\n        blue = p;\n        break;\n\n      case 2:\n        red = p;\n        green = valRatio;\n        blue = t;\n        break;\n\n      case 3:\n        red = p;\n        green = q;\n        blue = valRatio;\n        break;\n\n      case 4:\n        red = t;\n        green = p;\n        blue = valRatio;\n        break;\n\n      default:\n        red = valRatio;\n        green = p;\n        blue = q;\n    }\n\n    return {\n      red: Math.round(red * 255),\n      blue: Math.round(blue * 255),\n      green: Math.round(green * 255)\n    };\n  },\n  getHexFromRgb: function getHexFromRgb(_ref4) {\n    var red = _ref4.red,\n        green = _ref4.green,\n        blue = _ref4.blue;\n\n    function getHex(color) {\n      return \"0\".concat(Math.round(color).toString(16)).substr(-2);\n    }\n\n    return \"#\".concat(getHex(red)).concat(getHex(green)).concat(getHex(blue));\n  },\n  getRgbFromHex: function getRgbFromHex(hex) {\n    var result = HEX_REGEX.exec(this.toSixDigitHex(hex));\n    return {\n      red: parseInt(result[1], 16),\n      green: parseInt(result[2], 16),\n      blue: parseInt(result[3], 16)\n    };\n  },\n  toSixDigitHex: function toSixDigitHex(value) {\n    var shortHandHex = /^#([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n    var match = shortHandHex.exec(value);\n\n    if (match) {\n      return \"#\".concat(match[1]).concat(match[1]).concat(match[2]).concat(match[2]).concat(match[3]).concat(match[3]);\n    }\n\n    return value;\n  }\n};\nexport default ColorUtils;","map":{"version":3,"sources":["../../.tmp-es/utilities/color.js"],"names":["COLOR_NAMES","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","HEX_REGEX","ColorUtils","getNewColor","oldColor","options","customHexValidator","assign","hex","errors","hsv","hue","saturation","value","rgb","returnColor","Object","getDeltaColor","limitValue","Math","isValidHex","getRgbErrors","hasError","isNaN","Number","keyValue","getHsvFromHex","getHexFromHsv","getHexFromNamedColor","name","getHsvFromRgb","redRatio","greenRatio","blueRatio","max","min","delta","getRgbFromHsv","hueRatio","satRatio","valRatio","i","f","p","q","t","getHexFromRgb","getHex","getRgbFromHex","result","parseInt","toSixDigitHex","shortHandHex","match"],"mappings":"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","sourcesContent":["import assign from 'lodash.assign';\n\nconst COLOR_NAMES = {\n\taliceblue: '#f0f8ff',\n\tantiquewhite: '#faebd7',\n\taqua: '#00ffff',\n\taquamarine: '#7fffd4',\n\tazure: '#f0ffff',\n\tbeige: '#f5f5dc',\n\tbisque: '#ffe4c4',\n\tblack: '#000000',\n\tblanchedalmond: '#ffebcd',\n\tblue: '#0000ff',\n\tblueviolet: '#8a2be2',\n\tbrown: '#a52a2a',\n\tburlywood: '#deb887',\n\tcadetblue: '#5f9ea0',\n\tchartreuse: '#7fff00',\n\tchocolate: '#d2691e',\n\tcoral: '#ff7f50',\n\tcornflowerblue: '#6495ed',\n\tcornsilk: '#fff8dc',\n\tcrimson: '#dc143c',\n\tcyan: '#00ffff',\n\tdarkblue: '#00008b',\n\tdarkcyan: '#008b8b',\n\tdarkgoldenrod: '#b8860b',\n\tdarkgray: '#a9a9a9',\n\tdarkgreen: '#006400',\n\tdarkkhaki: '#bdb76b',\n\tdarkmagenta: '#8b008b',\n\tdarkolivegreen: '#556b2f',\n\tdarkorange: '#ff8c00',\n\tdarkorchid: '#9932cc',\n\tdarkred: '#8b0000',\n\tdarksalmon: '#e9967a',\n\tdarkseagreen: '#8fbc8f',\n\tdarkslateblue: '#483d8b',\n\tdarkslategray: '#2f4f4f',\n\tdarkturquoise: '#00ced1',\n\tdarkviolet: '#9400d3',\n\tdeeppink: '#ff1493',\n\tdeepskyblue: '#00bfff',\n\tdimgray: '#696969',\n\tdodgerblue: '#1e90ff',\n\tfirebrick: '#b22222',\n\tfloralwhite: '#fffaf0',\n\tforestgreen: '#228b22',\n\tfuchsia: '#ff00ff',\n\tgainsboro: '#dcdcdc',\n\tghostwhite: '#f8f8ff',\n\tgold: '#ffd700',\n\tgoldenrod: '#daa520',\n\tgray: '#808080',\n\tgreen: '#008000',\n\tgreenyellow: '#adff2f',\n\thoneydew: '#f0fff0',\n\thotpink: '#ff69b4',\n\tindianred: '#cd5c5c',\n\tindigo: '#4b0082',\n\tivory: '#fffff0',\n\tkhaki: '#f0e68c',\n\tlavender: '#e6e6fa',\n\tlavenderblush: '#fff0f5',\n\tlawngreen: '#7cfc00',\n\tlemonchiffon: '#fffacd',\n\tlightblue: '#add8e6',\n\tlightcoral: '#f08080',\n\tlightcyan: '#e0ffff',\n\tlightgoldenrodyellow: '#fafad2',\n\tlightgrey: '#d3d3d3',\n\tlightgreen: '#90ee90',\n\tlightpink: '#ffb6c1',\n\tlightsalmon: '#ffa07a',\n\tlightseagreen: '#20b2aa',\n\tlightskyblue: '#87cefa',\n\tlightslategray: '#778899',\n\tlightsteelblue: '#b0c4de',\n\tlightyellow: '#ffffe0',\n\tlime: '#00ff00',\n\tlimegreen: '#32cd32',\n\tlinen: '#faf0e6',\n\tmagenta: '#ff00ff',\n\tmaroon: '#800000',\n\tmediumaquamarine: '#66cdaa',\n\tmediumblue: '#0000cd',\n\tmediumorchid: '#ba55d3',\n\tmediumpurple: '#9370d8',\n\tmediumseagreen: '#3cb371',\n\tmediumslateblue: '#7b68ee',\n\tmediumspringgreen: '#00fa9a',\n\tmediumturquoise: '#48d1cc',\n\tmediumvioletred: '#c71585',\n\tmidnightblue: '#191970',\n\tmintcream: '#f5fffa',\n\tmistyrose: '#ffe4e1',\n\tmoccasin: '#ffe4b5',\n\tnavajowhite: '#ffdead',\n\tnavy: '#000080',\n\toldlace: '#fdf5e6',\n\tolive: '#808000',\n\tolivedrab: '#6b8e23',\n\torange: '#ffa500',\n\torangered: '#ff4500',\n\torchid: '#da70d6',\n\tpalegoldenrod: '#eee8aa',\n\tpalegreen: '#98fb98',\n\tpaleturquoise: '#afeeee',\n\tpalevioletred: '#d87093',\n\tpapayawhip: '#ffefd5',\n\tpeachpuff: '#ffdab9',\n\tperu: '#cd853f',\n\tpink: '#ffc0cb',\n\tplum: '#dda0dd',\n\tpowderblue: '#b0e0e6',\n\tpurple: '#800080',\n\trebeccapurple: '#663399',\n\tred: '#ff0000',\n\trosybrown: '#bc8f8f',\n\troyalblue: '#4169e1',\n\tsaddlebrown: '#8b4513',\n\tsalmon: '#fa8072',\n\tsandybrown: '#f4a460',\n\tseagreen: '#2e8b57',\n\tseashell: '#fff5ee',\n\tsienna: '#a0522d',\n\tsilver: '#c0c0c0',\n\tskyblue: '#87ceeb',\n\tslateblue: '#6a5acd',\n\tslategray: '#708090',\n\tsnow: '#fffafa',\n\tspringgreen: '#00ff7f',\n\tsteelblue: '#4682b4',\n\ttan: '#d2b48c',\n\tteal: '#008080',\n\tthistle: '#d8bfd8',\n\ttomato: '#ff6347',\n\tturquoise: '#40e0d0',\n\tviolet: '#ee82ee',\n\twheat: '#f5deb3',\n\twhite: '#ffffff',\n\twhitesmoke: '#f5f5f5',\n\tyellow: '#ffff00',\n\tyellowgreen: '#9acd32',\n};\nconst HEX_REGEX = /^#([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i;\n\nconst ColorUtils = {\n\tgetNewColor(options, customHexValidator, oldColor = {}) {\n\t\tif (options.hex) {\n\t\t\tif (\n\t\t\t\tcustomHexValidator\n\t\t\t\t\t? !customHexValidator(options.hex)\n\t\t\t\t\t: !this.isValidHex(options.hex)\n\t\t\t) {\n\t\t\t\treturn assign({}, oldColor, {\n\t\t\t\t\thex: options.hex,\n\t\t\t\t\terrors: assign({}, oldColor.errors, {\n\t\t\t\t\t\thex: true,\n\t\t\t\t\t}),\n\t\t\t\t\thsv: {\n\t\t\t\t\t\thue: '',\n\t\t\t\t\t\tsaturation: '',\n\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t},\n\t\t\t\t\trgb: {\n\t\t\t\t\t\tred: '',\n\t\t\t\t\t\tgreen: '',\n\t\t\t\t\t\tblue: '',\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst returnColor = {\n\t\t\t\thex: options.hex,\n\t\t\t\thsv: this.getHsvFromHex(options.hex),\n\t\t\t\trgb: this.getRgbFromHex(options.hex),\n\t\t\t};\n\n\t\t\tif (options.name) {\n\t\t\t\treturnColor.name = options.name;\n\t\t\t}\n\n\t\t\treturn returnColor;\n\t\t}\n\n\t\tif ('red' in options || 'blue' in options || 'green' in options) {\n\t\t\tconst rgb = assign({}, oldColor.rgb, options);\n\t\t\tconst errors = this.getRgbErrors(rgb);\n\n\t\t\tif (Object.values(errors).includes(true)) {\n\t\t\t\treturn assign({}, oldColor, {\n\t\t\t\t\trgb,\n\t\t\t\t\terrors: assign({}, oldColor.errors, errors),\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\thex: this.getHexFromRgb(rgb),\n\t\t\t\thsv: this.getHsvFromRgb(rgb),\n\t\t\t\trgb,\n\t\t\t};\n\t\t}\n\n\t\tif ('hue' in options || 'saturation' in options || 'value' in options) {\n\t\t\tconst hsv = assign({}, oldColor.hsv, options);\n\t\t\treturn {\n\t\t\t\thex: this.getHexFromHsv(hsv),\n\t\t\t\thsv,\n\t\t\t\trgb: this.getRgbFromHsv(hsv),\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\thex: '',\n\t\t\thsv: {\n\t\t\t\thue: '',\n\t\t\t\tsaturation: '',\n\t\t\t\tvalue: '',\n\t\t\t},\n\t\t\trgb: {\n\t\t\t\tred: '',\n\t\t\t\tgreen: '',\n\t\t\t\tblue: '',\n\t\t\t},\n\t\t};\n\t},\n\n\tgetDeltaColor(options, customHexValidator, oldColor) {\n\t\tconst limitValue = (value) => Math.min(Math.max(value, 0), 100);\n\n\t\treturn this.getNewColor(\n\t\t\t{\n\t\t\t\tsaturation: limitValue(\n\t\t\t\t\toldColor.hsv.saturation + (options.saturation || 0)\n\t\t\t\t),\n\t\t\t\tvalue: limitValue(oldColor.hsv.value + (options.value || 0)),\n\t\t\t},\n\t\t\tcustomHexValidator,\n\t\t\toldColor\n\t\t);\n\t},\n\n\tisValidHex(value) {\n\t\treturn !value || HEX_REGEX.test(this.toSixDigitHex(value));\n\t},\n\n\tgetRgbErrors(rgb) {\n\t\tconst hasError = (value) =>\n\t\t\tisNaN(value) ||\n\t\t\tMath.floor(value) !== Number(value) ||\n\t\t\tvalue < 0 ||\n\t\t\tvalue >= 256;\n\n\t\treturn Object.entries(rgb).reduce((errors, keyValue) => {\n\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\terrors[keyValue[0]] = hasError(keyValue[1]);\n\t\t\treturn errors;\n\t\t}, {});\n\t},\n\n\tgetHsvFromHex(hex) {\n\t\treturn this.getHsvFromRgb(this.getRgbFromHex(hex));\n\t},\n\n\tgetHexFromHsv({ hue, saturation, value }) {\n\t\treturn this.getHexFromRgb(this.getRgbFromHsv({ hue, saturation, value }));\n\t},\n\n\tgetHexFromNamedColor(name) {\n\t\treturn COLOR_NAMES[name.toLowerCase()] || null;\n\t},\n\n\tgetHsvFromRgb({ red, green, blue }) {\n\t\tconst redRatio = red / 255;\n\t\tconst greenRatio = green / 255;\n\t\tconst blueRatio = blue / 255;\n\n\t\tconst max = Math.max(redRatio, greenRatio, blueRatio);\n\t\tconst min = Math.min(redRatio, greenRatio, blueRatio);\n\n\t\tconst delta = max - min;\n\t\tconst saturation = max === 0 ? 0 : (delta / max) * 100;\n\t\tconst value = max * 100;\n\t\tlet hue;\n\n\t\tif (max === min) {\n\t\t\thue = 0;\n\t\t} else {\n\t\t\tif (redRatio === max) {\n\t\t\t\thue =\n\t\t\t\t\t(greenRatio - blueRatio) / delta + (greenRatio < blueRatio ? 6 : 0);\n\t\t\t} else if (greenRatio === max) {\n\t\t\t\thue = (blueRatio - redRatio) / delta + 2;\n\t\t\t} else {\n\t\t\t\thue = (redRatio - greenRatio) / delta + 4;\n\t\t\t}\n\n\t\t\thue *= 60;\n\t\t}\n\n\t\treturn { hue, saturation, value };\n\t},\n\n\tgetRgbFromHsv({ hue, saturation, value }) {\n\t\tconst hueRatio = hue / 360;\n\t\tconst satRatio = saturation / 100;\n\t\tconst valRatio = value / 100;\n\n\t\tlet red;\n\t\tlet green;\n\t\tlet blue;\n\n\t\tconst i = Math.floor(hueRatio * 6);\n\t\tconst f = hueRatio * 6 - i;\n\t\tconst p = valRatio * (1 - satRatio);\n\t\tconst q = valRatio * (1 - f * satRatio);\n\t\tconst t = valRatio * (1 - (1 - f) * satRatio);\n\n\t\tswitch (i % 6) {\n\t\t\tcase 0:\n\t\t\t\tred = valRatio;\n\t\t\t\tgreen = t;\n\t\t\t\tblue = p;\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tred = q;\n\t\t\t\tgreen = valRatio;\n\t\t\t\tblue = p;\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tred = p;\n\t\t\t\tgreen = valRatio;\n\t\t\t\tblue = t;\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tred = p;\n\t\t\t\tgreen = q;\n\t\t\t\tblue = valRatio;\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tred = t;\n\t\t\t\tgreen = p;\n\t\t\t\tblue = valRatio;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tred = valRatio;\n\t\t\t\tgreen = p;\n\t\t\t\tblue = q;\n\t\t}\n\n\t\treturn {\n\t\t\tred: Math.round(red * 255),\n\t\t\tblue: Math.round(blue * 255),\n\t\t\tgreen: Math.round(green * 255),\n\t\t};\n\t},\n\n\tgetHexFromRgb({ red, green, blue }) {\n\t\tfunction getHex(color) {\n\t\t\treturn `0${Math.round(color).toString(16)}`.substr(-2);\n\t\t}\n\t\treturn `#${getHex(red)}${getHex(green)}${getHex(blue)}`;\n\t},\n\n\tgetRgbFromHex(hex) {\n\t\tconst result = HEX_REGEX.exec(this.toSixDigitHex(hex));\n\t\treturn {\n\t\t\tred: parseInt(result[1], 16),\n\t\t\tgreen: parseInt(result[2], 16),\n\t\t\tblue: parseInt(result[3], 16),\n\t\t};\n\t},\n\n\ttoSixDigitHex(value) {\n\t\tconst shortHandHex = /^#([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n\t\tconst match = shortHandHex.exec(value);\n\t\tif (match) {\n\t\t\treturn `#${match[1]}${match[1]}${match[2]}${match[2]}${match[3]}${match[3]}`;\n\t\t}\n\n\t\treturn value;\n\t},\n};\n\nexport default ColorUtils;\n"]},"metadata":{},"sourceType":"module"}