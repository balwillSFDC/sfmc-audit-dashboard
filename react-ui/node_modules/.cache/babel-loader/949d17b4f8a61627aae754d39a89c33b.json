{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n// # Search Component\n// Wraps the input to default to a search style.\n// ## Dependencies\n// ### React\n\n\nimport React from 'react';\nimport PropTypes from 'prop-types'; // ## Children\n\nimport Input from './index';\nimport InputIcon from '../icon/input-icon';\nimport checkProps from './check-props';\nimport componentDoc from './component.json'; // ### Event Helpers\n\nimport KEYS from '../../utilities/key-code';\nimport EventUtil from '../../utilities/event'; // ## Constants\n\nimport { SEARCH } from '../../utilities/constants';\n\nvar handleKeyDown = function handleKeyDown(event, onSearch) {\n  if (event.keyCode === KEYS.ENTER) {\n    EventUtil.trapImmediate(event);\n    onSearch(event);\n  }\n};\n\nvar defaultProps = {\n  assistiveText: {}\n};\n/**\n * A `Search` is an `Input` which renders the search icon by default. It can be cleared, too. All `Input` props not specified as props already may be used with this component and will override defaults.\n */\n\nvar Search = function Search(_ref) {\n  var clearable = _ref.clearable,\n      onClear = _ref.onClear,\n      onSearch = _ref.onSearch,\n      placeholder = _ref.placeholder,\n      props = _objectWithoutProperties(_ref, [\"clearable\", \"onClear\", \"onSearch\", \"placeholder\"]);\n\n  checkProps(SEARCH, props, componentDoc);\n  var assistiveText = typeof props.assistiveText === 'string' ? props.assistiveText : _objectSpread(_objectSpread({}, defaultProps.assistiveText), props.assistiveText).label;\n  return /*#__PURE__*/React.createElement(Input, _extends({\n    assistiveText: {\n      label: assistiveText\n    },\n    iconLeft: /*#__PURE__*/React.createElement(InputIcon, {\n      assistiveText: {\n        icon: 'Search'\n      },\n      category: \"utility\",\n      name: \"search\",\n      onClick: onSearch\n    }),\n    iconRight: clearable ? /*#__PURE__*/React.createElement(InputIcon, {\n      assistiveText: {\n        icon: 'Clear'\n      },\n      category: \"utility\",\n      name: \"clear\",\n      onClick: onClear\n    }) : null,\n    onKeyDown: onSearch ? function (event) {\n      return handleKeyDown(event, onSearch);\n    } : null,\n    placeholder: placeholder\n  }, props));\n};\n\nSearch.displayName = SEARCH;\nSearch.propTypes = {\n  /**\n   * **Assistive text for accessibility.**\n   * This object is merged with the default props object on every render.\n   * * `label`: Assistive text to search input\n   */\n  assistiveText: PropTypes.shape({\n    label: PropTypes.string\n  }),\n\n  /**\n   * Adds a clear button to right side of the input\n   */\n  clearable: PropTypes.bool,\n\n  /**\n   * Triggers when the clear button is clicked\n   */\n  onClear: PropTypes.func,\n\n  /**\n   * This event fires when enter is pressed in the `input` or the search button is clicked.\n   */\n  onSearch: PropTypes.func,\n\n  /**\n   * Placeholder for the input\n   */\n  placeholder: PropTypes.string\n};\nSearch.defaultProps = defaultProps;\nexport default Search;","map":{"version":3,"sources":["../../../.tmp-es/components/input/search.jsx"],"names":["handleKeyDown","event","KEYS","EventUtil","onSearch","defaultProps","assistiveText","Search","clearable","onClear","placeholder","props","checkProps","label","icon","PropTypes","string"],"mappings":"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","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// # Search Component\n\n// Wraps the input to default to a search style.\n\n// ## Dependencies\n\n// ### React\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n// ## Children\nimport Input from './index';\nimport InputIcon from '../icon/input-icon';\n\nimport checkProps from './check-props';\nimport componentDoc from './component.json';\n\n// ### Event Helpers\nimport KEYS from '../../utilities/key-code';\nimport EventUtil from '../../utilities/event';\n\n// ## Constants\nimport { SEARCH } from '../../utilities/constants';\n\nconst handleKeyDown = (event, onSearch) => {\n\tif (event.keyCode === KEYS.ENTER) {\n\t\tEventUtil.trapImmediate(event);\n\t\tonSearch(event);\n\t}\n};\n\nconst defaultProps = {\n\tassistiveText: {},\n};\n\n/**\n * A `Search` is an `Input` which renders the search icon by default. It can be cleared, too. All `Input` props not specified as props already may be used with this component and will override defaults.\n */\nconst Search = ({ clearable, onClear, onSearch, placeholder, ...props }) => {\n\tcheckProps(SEARCH, props, componentDoc);\n\tconst assistiveText =\n\t\ttypeof props.assistiveText === 'string'\n\t\t\t? props.assistiveText\n\t\t\t: {\n\t\t\t\t\t...defaultProps.assistiveText,\n\t\t\t\t\t...props.assistiveText,\n\t\t\t  }.label;\n\treturn (\n\t\t<Input\n\t\t\tassistiveText={{ label: assistiveText }}\n\t\t\ticonLeft={\n\t\t\t\t<InputIcon\n\t\t\t\t\tassistiveText={{ icon: 'Search' }}\n\t\t\t\t\tcategory=\"utility\"\n\t\t\t\t\tname=\"search\"\n\t\t\t\t\tonClick={onSearch}\n\t\t\t\t/>\n\t\t\t}\n\t\t\ticonRight={\n\t\t\t\tclearable ? (\n\t\t\t\t\t<InputIcon\n\t\t\t\t\t\tassistiveText={{ icon: 'Clear' }}\n\t\t\t\t\t\tcategory=\"utility\"\n\t\t\t\t\t\tname=\"clear\"\n\t\t\t\t\t\tonClick={onClear}\n\t\t\t\t\t/>\n\t\t\t\t) : null\n\t\t\t}\n\t\t\tonKeyDown={onSearch ? (event) => handleKeyDown(event, onSearch) : null}\n\t\t\tplaceholder={placeholder}\n\t\t\t{...props}\n\t\t/>\n\t);\n};\n\nSearch.displayName = SEARCH;\n\nSearch.propTypes = {\n\t/**\n\t * **Assistive text for accessibility.**\n\t * This object is merged with the default props object on every render.\n\t * * `label`: Assistive text to search input\n\t */\n\tassistiveText: PropTypes.shape({\n\t\tlabel: PropTypes.string,\n\t}),\n\t/**\n\t * Adds a clear button to right side of the input\n\t */\n\tclearable: PropTypes.bool,\n\t/**\n\t * Triggers when the clear button is clicked\n\t */\n\tonClear: PropTypes.func,\n\t/**\n\t * This event fires when enter is pressed in the `input` or the search button is clicked.\n\t */\n\tonSearch: PropTypes.func,\n\t/**\n\t * Placeholder for the input\n\t */\n\tplaceholder: PropTypes.string,\n};\n\nSearch.defaultProps = defaultProps;\n\nexport default Search;\n"]},"metadata":{},"sourceType":"module"}