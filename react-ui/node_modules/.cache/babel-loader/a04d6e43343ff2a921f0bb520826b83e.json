{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n// # GlobalNavigationBar Link Component\n// ## Dependencies\n// ### React\n\n\nimport React from 'react';\nimport PropTypes from 'prop-types'; // ### classNames\n\nimport classNames from 'classnames'; // ### isFunction\n\nimport isFunction from 'lodash.isfunction'; // ## Constants\n\nimport { GLOBAL_NAVIGATION_BAR_LINK } from '../../utilities/constants';\n/**\n * Wraps a link in the proper markup to support use in the GlobalNavigationBar.\n */\n\nvar GlobalNavigationBarLink = function GlobalNavigationBarLink(props) {\n  // Separate props we care about in order to pass others along passively to the `a` tag\n  var active = props.active,\n      activeBackgroundColor = props.activeBackgroundColor,\n      assistiveText = props.assistiveText,\n      className = props.className,\n      dividerPosition = props.dividerPosition,\n      href = props.href,\n      id = props.id,\n      label = props.label,\n      onBlur = props.onBlur,\n      onClick = props.onClick,\n      onFocus = props.onFocus,\n      onKeyDown = props.onKeyDown,\n      onKeyPress = props.onKeyPress,\n      onKeyUp = props.onKeyUp,\n      onMouseEnter = props.onMouseEnter,\n      onMouseLeave = props.onMouseLeave,\n      tabIndex = props.tabIndex;\n  var listItemstyle = active ? {\n    backgroundColor: activeBackgroundColor,\n    borderBottomColor: activeBackgroundColor\n  } : null;\n\n  function handleOnClick(event) {\n    if (isFunction(onClick) || href === '#') {\n      event.preventDefault();\n    }\n\n    if (isFunction(onClick)) {\n      onClick(event, {\n        href: href\n      });\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"li\", {\n    className: classNames('slds-context-bar__item', _defineProperty({\n      'slds-is-active': active\n    }, \"slds-context-bar__item_divider-\".concat(dividerPosition), dividerPosition)),\n    id: id,\n    style: listItemstyle\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: href,\n    className: classNames('slds-context-bar__label-action', className),\n    onBlur: onBlur,\n    onClick: handleOnClick,\n    onFocus: onFocus,\n    onKeyDown: onKeyDown,\n    onKeyPress: onKeyPress,\n    onKeyUp: onKeyUp,\n    onMouseEnter: onMouseEnter,\n    onMouseLeave: onMouseLeave,\n    tabIndex: tabIndex,\n    title: label\n  }, active ? /*#__PURE__*/React.createElement(\"span\", {\n    className: \"slds-assistive-text\"\n  }, assistiveText.activeDescriptor) : null, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"slds-truncate\",\n    title: label\n  }, label)));\n};\n\nGlobalNavigationBarLink.displayName = GLOBAL_NAVIGATION_BAR_LINK; // ### Prop Types\n\nGlobalNavigationBarLink.propTypes = {\n  /**\n   * Whether the item is active or not.\n   */\n  active: PropTypes.bool,\n\n  /**\n   * Allows alignment of active item with active application background color. If application background is dark, text color may need to be `#fff`. This can be done with the style prop.\n   */\n  activeBackgroundColor: PropTypes.string,\n\n  /**\n   * **Assistive text for accessibility.**\n   * * `activeDescriptor`: The text that appears alongside a link that is currently active.\n   */\n  assistiveText: PropTypes.shape({\n    activeDescriptor: PropTypes.string\n  }),\n\n  /**\n   * Class names to be added to the anchor element\n   */\n  className: PropTypes.oneOfType([PropTypes.array, PropTypes.object, PropTypes.string]),\n\n  /**\n   * Determines position of separating bar.\n   */\n  dividerPosition: PropTypes.oneOf(['left', 'right']),\n\n  /**\n   * The `href` attribute of the link. Please pass in bookmarkable URLs from your routing library. Use `GlobalNavigationBarButton` if a \"real URL\" is not desired. If the `onClick` callback is specified this URL will still be prevented from changing the browser's location.\n   */\n  href: PropTypes.string,\n\n  /**\n   * The `id` attribute is applied to the `li` tag. _This was recently changed from being on the anchor tag._\n   */\n  id: PropTypes.string,\n\n  /**\n   * Text to show for link item.\n   */\n  label: PropTypes.string,\n\n  /**\n   * Triggered when focus is removed.\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * `function (event, href)` - fires when the link is clicked. If set, the browser location change to the `href` specified will be ignored, but the `href` will be included in an additional parameter passed to the callback.\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * Triggered when component is focused.\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * Triggered when a key is pressed down\n   */\n  onKeyDown: PropTypes.func,\n\n  /**\n   * Triggered when a key is pressed and released\n   */\n  onKeyPress: PropTypes.func,\n\n  /**\n   * Triggered when a key is released\n   */\n  onKeyUp: PropTypes.func,\n\n  /**\n   * Triggered when a mouse arrow hovers\n   */\n  onMouseEnter: PropTypes.func,\n\n  /**\n   * Triggered when a mouse arrow no longer hovers\n   */\n  onMouseLeave: PropTypes.func,\n\n  /**\n   * Write \"-1\" if you don't want the user to tab to the button.\n   */\n  tabIndex: PropTypes.string\n};\nGlobalNavigationBarLink.defaultProps = {\n  assistiveText: {\n    activeDescriptor: 'Current page:'\n  },\n  href: '#'\n};\nexport default GlobalNavigationBarLink;","map":{"version":3,"sources":["../../../.tmp-es/components/global-navigation-bar/link.jsx"],"names":["GlobalNavigationBarLink","active","activeBackgroundColor","assistiveText","className","dividerPosition","href","id","label","onBlur","onClick","onFocus","onKeyDown","onKeyPress","onKeyUp","onMouseEnter","onMouseLeave","tabIndex","props","listItemstyle","backgroundColor","borderBottomColor","isFunction","event","classNames","PropTypes","activeDescriptor","string"],"mappings":"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","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// # GlobalNavigationBar Link Component\n\n// ## Dependencies\n\n// ### React\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n// ### classNames\nimport classNames from 'classnames';\n\n// ### isFunction\nimport isFunction from 'lodash.isfunction';\n\n// ## Constants\nimport { GLOBAL_NAVIGATION_BAR_LINK } from '../../utilities/constants';\n\n/**\n * Wraps a link in the proper markup to support use in the GlobalNavigationBar.\n */\nconst GlobalNavigationBarLink = (props) => {\n\t// Separate props we care about in order to pass others along passively to the `a` tag\n\tconst {\n\t\tactive,\n\t\tactiveBackgroundColor,\n\t\tassistiveText,\n\t\tclassName,\n\t\tdividerPosition,\n\t\thref,\n\t\tid,\n\t\tlabel,\n\t\tonBlur,\n\t\tonClick,\n\t\tonFocus,\n\t\tonKeyDown,\n\t\tonKeyPress,\n\t\tonKeyUp,\n\t\tonMouseEnter,\n\t\tonMouseLeave,\n\t\ttabIndex,\n\t} = props;\n\n\tconst listItemstyle = active\n\t\t? {\n\t\t\t\tbackgroundColor: activeBackgroundColor,\n\t\t\t\tborderBottomColor: activeBackgroundColor,\n\t\t  }\n\t\t: null;\n\n\tfunction handleOnClick(event) {\n\t\tif (isFunction(onClick) || href === '#') {\n\t\t\tevent.preventDefault();\n\t\t}\n\n\t\tif (isFunction(onClick)) {\n\t\t\tonClick(event, { href });\n\t\t}\n\t}\n\n\treturn (\n\t\t<li\n\t\t\tclassName={classNames('slds-context-bar__item', {\n\t\t\t\t'slds-is-active': active,\n\t\t\t\t[`slds-context-bar__item_divider-${dividerPosition}`]: dividerPosition,\n\t\t\t})}\n\t\t\tid={id}\n\t\t\tstyle={listItemstyle}\n\t\t>\n\t\t\t<a\n\t\t\t\thref={href}\n\t\t\t\tclassName={classNames('slds-context-bar__label-action', className)}\n\t\t\t\tonBlur={onBlur}\n\t\t\t\tonClick={handleOnClick}\n\t\t\t\tonFocus={onFocus}\n\t\t\t\tonKeyDown={onKeyDown}\n\t\t\t\tonKeyPress={onKeyPress}\n\t\t\t\tonKeyUp={onKeyUp}\n\t\t\t\tonMouseEnter={onMouseEnter}\n\t\t\t\tonMouseLeave={onMouseLeave}\n\t\t\t\ttabIndex={tabIndex}\n\t\t\t\ttitle={label}\n\t\t\t>\n\t\t\t\t{active ? (\n\t\t\t\t\t<span className=\"slds-assistive-text\">\n\t\t\t\t\t\t{assistiveText.activeDescriptor}\n\t\t\t\t\t</span>\n\t\t\t\t) : null}\n\t\t\t\t<span className=\"slds-truncate\" title={label}>\n\t\t\t\t\t{label}\n\t\t\t\t</span>\n\t\t\t</a>\n\t\t</li>\n\t);\n};\n\nGlobalNavigationBarLink.displayName = GLOBAL_NAVIGATION_BAR_LINK;\n\n// ### Prop Types\nGlobalNavigationBarLink.propTypes = {\n\t/**\n\t * Whether the item is active or not.\n\t */\n\tactive: PropTypes.bool,\n\t/**\n\t * Allows alignment of active item with active application background color. If application background is dark, text color may need to be `#fff`. This can be done with the style prop.\n\t */\n\tactiveBackgroundColor: PropTypes.string,\n\t/**\n\t * **Assistive text for accessibility.**\n\t * * `activeDescriptor`: The text that appears alongside a link that is currently active.\n\t */\n\tassistiveText: PropTypes.shape({\n\t\tactiveDescriptor: PropTypes.string,\n\t}),\n\t/**\n\t * Class names to be added to the anchor element\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * Determines position of separating bar.\n\t */\n\tdividerPosition: PropTypes.oneOf(['left', 'right']),\n\t/**\n\t * The `href` attribute of the link. Please pass in bookmarkable URLs from your routing library. Use `GlobalNavigationBarButton` if a \"real URL\" is not desired. If the `onClick` callback is specified this URL will still be prevented from changing the browser's location.\n\t */\n\thref: PropTypes.string,\n\t/**\n\t * The `id` attribute is applied to the `li` tag. _This was recently changed from being on the anchor tag._\n\t */\n\tid: PropTypes.string,\n\t/**\n\t * Text to show for link item.\n\t */\n\tlabel: PropTypes.string,\n\t/**\n\t * Triggered when focus is removed.\n\t */\n\tonBlur: PropTypes.func,\n\t/**\n\t * `function (event, href)` - fires when the link is clicked. If set, the browser location change to the `href` specified will be ignored, but the `href` will be included in an additional parameter passed to the callback.\n\t */\n\tonClick: PropTypes.func,\n\t/**\n\t * Triggered when component is focused.\n\t */\n\tonFocus: PropTypes.func,\n\t/**\n\t * Triggered when a key is pressed down\n\t */\n\tonKeyDown: PropTypes.func,\n\t/**\n\t * Triggered when a key is pressed and released\n\t */\n\tonKeyPress: PropTypes.func,\n\t/**\n\t * Triggered when a key is released\n\t */\n\tonKeyUp: PropTypes.func,\n\t/**\n\t * Triggered when a mouse arrow hovers\n\t */\n\tonMouseEnter: PropTypes.func,\n\t/**\n\t * Triggered when a mouse arrow no longer hovers\n\t */\n\tonMouseLeave: PropTypes.func,\n\t/**\n\t * Write \"-1\" if you don't want the user to tab to the button.\n\t */\n\ttabIndex: PropTypes.string,\n};\n\nGlobalNavigationBarLink.defaultProps = {\n\tassistiveText: {\n\t\tactiveDescriptor: 'Current page:',\n\t},\n\thref: '#',\n};\n\nexport default GlobalNavigationBarLink;\n"]},"metadata":{},"sourceType":"module"}