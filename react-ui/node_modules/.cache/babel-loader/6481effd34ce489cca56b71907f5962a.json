{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n// # Global Header Dropdown Component\n// NOTE: THIS COMPONENT HAS BEEN DEPRECATED AND WILL BE REMOVED IN FUTURE MAJOR RELEASES\n// ## Dependencies\n// ### React\n\n\nimport React from 'react';\nimport PropTypes from 'prop-types'; // ### Dropdown\n\nimport MenuDropdown from '../menu-dropdown';\nimport GlobalHeaderTrigger from './private/dropdown-trigger'; // This component's `checkProps` which issues warnings to developers about properties\n// when in development mode (similar to React's built in development tools)\n\nimport checkProps from './check-props'; // ## Constants\n\nimport { GLOBAL_HEADER_DROPDOWN, GLOBAL_HEADER_TOOL } from '../../utilities/constants';\n/**\n * This component is an implementation of `MenuDropdown` with a custom trigger. All the properties listed below are provided to the `MenuDropdown` component. Any additional properties are provided to the Custom Trigger (that is the `Button` or `li` tag).\n */\n\nvar GlobalHeaderDropdown = function GlobalHeaderDropdown(props) {\n  checkProps(GLOBAL_HEADER_DROPDOWN, props);\n\n  var globalAction = props.globalAction,\n      iconVariant = props.iconVariant,\n      rest = _objectWithoutProperties(props, [\"globalAction\", \"iconVariant\"]);\n\n  var iconVariantOverride;\n\n  if (globalAction) {\n    iconVariantOverride = 'container';\n  }\n\n  return /*#__PURE__*/React.createElement(MenuDropdown, _extends({\n    nubbinPosition: \"top right\"\n  }, rest), /*#__PURE__*/React.createElement(GlobalHeaderTrigger, {\n    globalAction: globalAction,\n    iconSize: globalAction && 'small',\n    iconVariant: iconVariantOverride || iconVariant\n  }));\n}; // ### Display Name\n// Always use the canonical component name (set in the core) as the React\n// display name.\n\n\nGlobalHeaderDropdown.displayName = GLOBAL_HEADER_TOOL; // ### Prop Types\n\nGlobalHeaderDropdown.propTypes = {\n  /**\n   * Aligns the right or left side of the menu with the respective side of the trigger. This is not intended for use with `nubbinPosition`.\n   */\n  align: PropTypes.oneOf(['left', 'right']),\n\n  /**\n   * Extra classnames to apply to the dropdown menu.\n   */\n  className: PropTypes.string,\n\n  /**\n   * CSS classes to be added to `li` element.\n   */\n  buttonClassName: PropTypes.oneOfType([PropTypes.array, PropTypes.object, PropTypes.string]),\n\n  /**\n   * Name of the icon. Visit <a href=\"http://www.lightningdesignsystem.com/resources/icons\">Lightning Design System Icons</a> to reference icon names.\n   */\n  iconName: PropTypes.string,\n\n  /**\n   * For icon variants, please reference <a href=\"http://www.lightningdesignsystem.com/components/buttons/#icon\">Lightning Design System Icons</a>.\n   */\n  iconVariant: PropTypes.oneOf(['bare', 'container', 'border', 'border-filled', 'more', 'global-header']),\n\n  /**\n   * A unique ID is needed in order to support keyboard navigation, ARIA support, and connect the dropdown to the triggering button.\n   */\n  id: PropTypes.string,\n\n  /**\n   * Adds custom styling such as inverse fill and special sizing/spacing\n   */\n  globalAction: PropTypes.bool,\n\n  /**\n   * Positions dropdown menu with a nubbin--that is the arrow notch. The placement options correspond to the placement of the nubbin. This is implemeted with CSS classes and is best used with a `Button` with \"icon container\" styling. Dropdown menus will still be contained to the closest scrolling parent.\n   */\n  nubbinPosition: PropTypes.oneOf(['top left', 'top', 'top right', 'bottom left', 'bottom', 'bottom right']),\n\n  /**\n   *  Offset adds pixels to the absolutely positioned dropdown menu in the format: ([vertical]px [horizontal]px).\n   */\n  offset: PropTypes.string,\n\n  /**\n   * Triggered when an item in the menu is clicked.\n   */\n  onSelect: PropTypes.func,\n\n  /**\n   * An array of menu item.\n   */\n  options: PropTypes.array.isRequired\n}; // ### Default Props\n\nGlobalHeaderDropdown.defaultProps = {\n  align: 'right',\n  buttonVariant: 'icon',\n  iconVariant: 'global-header',\n  nubbinPosition: 'top right'\n};\nexport default GlobalHeaderDropdown;","map":{"version":3,"sources":["../../../.tmp-es/components/global-header/dropdown.jsx"],"names":["GlobalHeaderDropdown","checkProps","globalAction","iconVariant","rest","props","iconVariantOverride","align","PropTypes","className","buttonClassName","iconName","id","nubbinPosition","offset","onSelect","options","isRequired","buttonVariant"],"mappings":"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","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// # Global Header Dropdown Component\n// NOTE: THIS COMPONENT HAS BEEN DEPRECATED AND WILL BE REMOVED IN FUTURE MAJOR RELEASES\n\n// ## Dependencies\n\n// ### React\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n// ### Dropdown\nimport MenuDropdown from '../menu-dropdown';\nimport GlobalHeaderTrigger from './private/dropdown-trigger';\n\n// This component's `checkProps` which issues warnings to developers about properties\n// when in development mode (similar to React's built in development tools)\nimport checkProps from './check-props';\n\n// ## Constants\nimport {\n\tGLOBAL_HEADER_DROPDOWN,\n\tGLOBAL_HEADER_TOOL,\n} from '../../utilities/constants';\n\n/**\n * This component is an implementation of `MenuDropdown` with a custom trigger. All the properties listed below are provided to the `MenuDropdown` component. Any additional properties are provided to the Custom Trigger (that is the `Button` or `li` tag).\n */\nconst GlobalHeaderDropdown = (props) => {\n\tcheckProps(GLOBAL_HEADER_DROPDOWN, props);\n\n\tconst { globalAction, iconVariant, ...rest } = props;\n\tlet iconVariantOverride;\n\n\tif (globalAction) {\n\t\ticonVariantOverride = 'container';\n\t}\n\n\treturn (\n\t\t<MenuDropdown nubbinPosition=\"top right\" {...rest}>\n\t\t\t<GlobalHeaderTrigger\n\t\t\t\tglobalAction={globalAction}\n\t\t\t\ticonSize={globalAction && 'small'}\n\t\t\t\ticonVariant={iconVariantOverride || iconVariant}\n\t\t\t/>\n\t\t</MenuDropdown>\n\t);\n};\n\n// ### Display Name\n// Always use the canonical component name (set in the core) as the React\n// display name.\nGlobalHeaderDropdown.displayName = GLOBAL_HEADER_TOOL;\n\n// ### Prop Types\nGlobalHeaderDropdown.propTypes = {\n\t/**\n\t * Aligns the right or left side of the menu with the respective side of the trigger. This is not intended for use with `nubbinPosition`.\n\t */\n\talign: PropTypes.oneOf(['left', 'right']),\n\t/**\n\t * Extra classnames to apply to the dropdown menu.\n\t */\n\tclassName: PropTypes.string,\n\t/**\n\t * CSS classes to be added to `li` element.\n\t */\n\tbuttonClassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * Name of the icon. Visit <a href=\"http://www.lightningdesignsystem.com/resources/icons\">Lightning Design System Icons</a> to reference icon names.\n\t */\n\ticonName: PropTypes.string,\n\t/**\n\t * For icon variants, please reference <a href=\"http://www.lightningdesignsystem.com/components/buttons/#icon\">Lightning Design System Icons</a>.\n\t */\n\ticonVariant: PropTypes.oneOf([\n\t\t'bare',\n\t\t'container',\n\t\t'border',\n\t\t'border-filled',\n\t\t'more',\n\t\t'global-header',\n\t]),\n\t/**\n\t * A unique ID is needed in order to support keyboard navigation, ARIA support, and connect the dropdown to the triggering button.\n\t */\n\tid: PropTypes.string,\n\t/**\n\t * Adds custom styling such as inverse fill and special sizing/spacing\n\t */\n\tglobalAction: PropTypes.bool,\n\t/**\n\t * Positions dropdown menu with a nubbin--that is the arrow notch. The placement options correspond to the placement of the nubbin. This is implemeted with CSS classes and is best used with a `Button` with \"icon container\" styling. Dropdown menus will still be contained to the closest scrolling parent.\n\t */\n\tnubbinPosition: PropTypes.oneOf([\n\t\t'top left',\n\t\t'top',\n\t\t'top right',\n\t\t'bottom left',\n\t\t'bottom',\n\t\t'bottom right',\n\t]),\n\t/**\n\t *  Offset adds pixels to the absolutely positioned dropdown menu in the format: ([vertical]px [horizontal]px).\n\t */\n\toffset: PropTypes.string,\n\t/**\n\t * Triggered when an item in the menu is clicked.\n\t */\n\tonSelect: PropTypes.func,\n\t/**\n\t * An array of menu item.\n\t */\n\toptions: PropTypes.array.isRequired,\n};\n\n// ### Default Props\nGlobalHeaderDropdown.defaultProps = {\n\talign: 'right',\n\tbuttonVariant: 'icon',\n\ticonVariant: 'global-header',\n\tnubbinPosition: 'top right',\n};\n\nexport default GlobalHeaderDropdown;\n"]},"metadata":{},"sourceType":"module"}