{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n// # Global Header Notifications Component\n// Implements the [Global Header Notifications design pattern](https://www.lightningdesignsystem.com/components/global-header/#Notifications) in React.\n\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport assign from 'lodash.assign';\nimport Button from '../button';\nimport Popover from '../popover';\nimport { GLOBAL_HEADER_NOTIFICATIONS } from '../../utilities/constants';\nvar propTypes = {\n  /**\n   * **Assistive text for accessibility**\n   * * `newNotificationsAfter`: Assistive text for when there are new notifications, after the notificationCount. The default is ' new notifications'.\n   * * `newNotificationsBefore`: Assistive text for when there are new notifications, before the notificationCount. The default is ''.\n   * * `noNotifications`: Assistive text for when there are no new notifications.\n   */\n  assistiveText: PropTypes.shape({\n    newNotificationsAfter: PropTypes.string,\n    newNotificationsBefore: PropTypes.string,\n    noNotifications: PropTypes.string\n  }),\n\n  /**\n   * Dictates the number of notifications shown in the new notifications badge.\n   */\n  notificationCount: PropTypes.number,\n\n  /**\n   * A `Popover` component. The props from this popover will be merged and override any default props. The `children` prop will be ignored.\n   */\n  popover: PropTypes.node\n};\n/**\n * A GlobalHeaderNotifications component. Notifications are a way to notify a user about a global change within the application.\n */\n\nvar GlobalHeaderNotifications = /*#__PURE__*/function (_React$Component) {\n  _inherits(GlobalHeaderNotifications, _React$Component);\n\n  var _super = _createSuper(GlobalHeaderNotifications);\n\n  function GlobalHeaderNotifications() {\n    _classCallCheck(this, GlobalHeaderNotifications);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(GlobalHeaderNotifications, [{\n    key: \"render\",\n    value: function render() {\n      var buttonAriaProps = {\n        'aria-live': 'assertive'\n      };\n      var notificationCount = this.props.notificationCount;\n      var popoverProps = assign({\n        align: 'bottom right',\n        body: /*#__PURE__*/React.createElement(\"span\", null),\n        triggerClassName: 'slds-dropdown-trigger slds-dropdown-trigger_click'\n      }, this.props.popover ? this.props.popover.props : {});\n      var notificationsAssistiveText = this.props.assistiveText.noNotifications; // eslint-disable-next-line fp/no-delete\n\n      delete popoverProps.children;\n\n      if (notificationCount > 0) {\n        notificationsAssistiveText = \"\".concat(this.props.assistiveText.newNotificationsBefore).concat(notificationCount).concat(this.props.assistiveText.newNotificationsAfter);\n      } else {\n        buttonAriaProps['aria-atomic'] = true;\n      }\n\n      return /*#__PURE__*/React.createElement(Popover, popoverProps, /*#__PURE__*/React.createElement(Button, _extends({\n        assistiveText: {\n          icon: notificationsAssistiveText\n        },\n        className: \"slds-button_icon slds-global-actions__notifications slds-global-actions__item-action\",\n        iconCategory: \"utility\",\n        iconClassName: \"slds-global-header__icon\",\n        iconName: \"notification\",\n        iconSize: \"small\",\n        iconVariant: \"container\",\n        title: notificationsAssistiveText,\n        variant: \"icon\"\n      }, buttonAriaProps)), notificationCount > 0 ? /*#__PURE__*/React.createElement(\"span\", {\n        \"aria-hidden\": \"true\",\n        className: \"slds-notification-badge slds-incoming-notification slds-show-notification\"\n      }, notificationCount) : /*#__PURE__*/React.createElement(\"span\", {\n        \"aria-hidden\": \"true\",\n        className: \"slds-notification-badge\"\n      }));\n    }\n  }]);\n\n  return GlobalHeaderNotifications;\n}(React.Component);\n\nGlobalHeaderNotifications.displayName = GLOBAL_HEADER_NOTIFICATIONS;\nGlobalHeaderNotifications.defaultProps = {\n  assistiveText: {\n    newNotificationsAfter: ' new notifications',\n    newNotificationsBefore: '',\n    noNotifications: 'No new notifications'\n  },\n  notificationCount: 0\n};\nGlobalHeaderNotifications.propTypes = propTypes;\nexport default GlobalHeaderNotifications;","map":{"version":3,"sources":["../../../.tmp-es/components/global-header/notifications.jsx"],"names":["propTypes","assistiveText","newNotificationsAfter","PropTypes","newNotificationsBefore","noNotifications","string","notificationCount","popover","node","GlobalHeaderNotifications","React","Component","buttonAriaProps","popoverProps","assign","align","body","triggerClassName","notificationsAssistiveText","icon"],"mappings":"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","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// # Global Header Notifications Component\n// Implements the [Global Header Notifications design pattern](https://www.lightningdesignsystem.com/components/global-header/#Notifications) in React.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport assign from 'lodash.assign';\nimport Button from '../button';\nimport Popover from '../popover';\n\nimport { GLOBAL_HEADER_NOTIFICATIONS } from '../../utilities/constants';\n\nconst propTypes = {\n\t/**\n\t * **Assistive text for accessibility**\n\t * * `newNotificationsAfter`: Assistive text for when there are new notifications, after the notificationCount. The default is ' new notifications'.\n\t * * `newNotificationsBefore`: Assistive text for when there are new notifications, before the notificationCount. The default is ''.\n\t * * `noNotifications`: Assistive text for when there are no new notifications.\n\t */\n\tassistiveText: PropTypes.shape({\n\t\tnewNotificationsAfter: PropTypes.string,\n\t\tnewNotificationsBefore: PropTypes.string,\n\t\tnoNotifications: PropTypes.string,\n\t}),\n\t/**\n\t * Dictates the number of notifications shown in the new notifications badge.\n\t */\n\tnotificationCount: PropTypes.number,\n\t/**\n\t * A `Popover` component. The props from this popover will be merged and override any default props. The `children` prop will be ignored.\n\t */\n\tpopover: PropTypes.node,\n};\n\n/**\n * A GlobalHeaderNotifications component. Notifications are a way to notify a user about a global change within the application.\n */\nclass GlobalHeaderNotifications extends React.Component {\n\trender() {\n\t\tconst buttonAriaProps = {\n\t\t\t'aria-live': 'assertive',\n\t\t};\n\t\tconst { notificationCount } = this.props;\n\t\tconst popoverProps = assign(\n\t\t\t{\n\t\t\t\talign: 'bottom right',\n\t\t\t\tbody: <span />,\n\t\t\t\ttriggerClassName: 'slds-dropdown-trigger slds-dropdown-trigger_click',\n\t\t\t},\n\t\t\tthis.props.popover ? this.props.popover.props : {}\n\t\t);\n\t\tlet notificationsAssistiveText = this.props.assistiveText.noNotifications;\n\n\t\t// eslint-disable-next-line fp/no-delete\n\t\tdelete popoverProps.children;\n\n\t\tif (notificationCount > 0) {\n\t\t\tnotificationsAssistiveText = `${this.props.assistiveText.newNotificationsBefore}${notificationCount}${this.props.assistiveText.newNotificationsAfter}`;\n\t\t} else {\n\t\t\tbuttonAriaProps['aria-atomic'] = true;\n\t\t}\n\n\t\treturn (\n\t\t\t<Popover {...popoverProps}>\n\t\t\t\t<Button\n\t\t\t\t\tassistiveText={{ icon: notificationsAssistiveText }}\n\t\t\t\t\tclassName=\"slds-button_icon slds-global-actions__notifications slds-global-actions__item-action\"\n\t\t\t\t\ticonCategory=\"utility\"\n\t\t\t\t\ticonClassName=\"slds-global-header__icon\"\n\t\t\t\t\ticonName=\"notification\"\n\t\t\t\t\ticonSize=\"small\"\n\t\t\t\t\ticonVariant=\"container\"\n\t\t\t\t\ttitle={notificationsAssistiveText}\n\t\t\t\t\tvariant=\"icon\"\n\t\t\t\t\t{...buttonAriaProps}\n\t\t\t\t/>\n\t\t\t\t{notificationCount > 0 ? (\n\t\t\t\t\t<span\n\t\t\t\t\t\taria-hidden=\"true\"\n\t\t\t\t\t\tclassName=\"slds-notification-badge slds-incoming-notification slds-show-notification\"\n\t\t\t\t\t>\n\t\t\t\t\t\t{notificationCount}\n\t\t\t\t\t</span>\n\t\t\t\t) : (\n\t\t\t\t\t<span aria-hidden=\"true\" className=\"slds-notification-badge\" />\n\t\t\t\t)}\n\t\t\t</Popover>\n\t\t);\n\t}\n}\n\nGlobalHeaderNotifications.displayName = GLOBAL_HEADER_NOTIFICATIONS;\n\nGlobalHeaderNotifications.defaultProps = {\n\tassistiveText: {\n\t\tnewNotificationsAfter: ' new notifications',\n\t\tnewNotificationsBefore: '',\n\t\tnoNotifications: 'No new notifications',\n\t},\n\tnotificationCount: 0,\n};\n\nGlobalHeaderNotifications.propTypes = propTypes;\n\nexport default GlobalHeaderNotifications;\n"]},"metadata":{},"sourceType":"module"}