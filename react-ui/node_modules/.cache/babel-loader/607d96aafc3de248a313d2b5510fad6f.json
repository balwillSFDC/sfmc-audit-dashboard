{"ast":null,"code":"function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n// # Tabs Component\n// Implements the [Tabs design pattern](https://www.lightningdesignsystem.com/components/tabs/) in React.\n// ## Dependencies\n// ### React\n\n\nimport React from 'react';\nimport PropTypes from 'prop-types'; // ### classNames\n\nimport classNames from 'classnames';\nimport { TAB_PANEL } from '../../../utilities/constants';\n/**\n * The containers of content that are shown and hidden by `Tabs`.\n */\n\nvar TabPanel = function TabPanel(_ref) {\n  var className = _ref.className,\n      children = _ref.children,\n      variant = _ref.variant,\n      selected = _ref.selected,\n      id = _ref.id,\n      tabId = _ref.tabId,\n      attributes = _objectWithoutProperties(_ref, [\"className\", \"children\", \"variant\", \"selected\", \"id\", \"tabId\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    \"aria-labelledby\": tabId,\n    className: classNames(className, {\n      'slds-show': selected,\n      'slds-hide': !selected,\n      'slds-tabs_default__content': variant === 'default',\n      'slds-tabs_scoped__content': variant === 'scoped',\n      'slds-vertical-tabs__content': variant === 'vertical'\n    }),\n    id: id,\n    role: \"tabpanel\"\n  }, children.props.children);\n};\n\nTabPanel.displayName = TAB_PANEL;\nTabPanel.propTypes = {\n  /**\n   * The `children` are the contents of the tab panel.\n   *\n   * Note that the structure of the `<Tabs />` component **does not** correspond to the DOM structure that is rendered. The `<Tabs />` component requires one or more children of type `<TabsPanel />`, which themselves require a `label` property which will be what shows in the `<Tab />` and has `children`, which end up being the _contents of the tab's corresponding panel_.\n   *\n   * The component iterates through each `<TabsPanel />` and rendering one `<Tab />` and one `<TabPanel />` for each of them. The tab(s) end up being children of the `<TabsList />`.\n   *\n   * The tab panel component actually returns the _children_ of the _children_ which were provided by the `<TabsPanel />` component.\n   *\n   * Due to React's nature, the `<TabsPanel />` component wraps its children in a `div` element which we don't need nor want in our rendered DOM structure, so we just bypass it and get its kids via `{children.props.children}` in the render method below.\n   * ```\n   * <Tabs>\n   * \t<TabsPanel label=\"Tab 1\">\n   * \t\t<h2 className=\"slds-text-heading_medium\">This is my tab 1 contents!</h2>\n   * \t\t<p>They show when you click the first tab.</p>\n   * \t</TabsPanel>\n   * \t<TabsPanel label=\"Tab 2\">\n   * \t\t<h2 className=\"slds-text-heading_medium\">This is my tab 2 contents!</h2>\n   * \t\t<p>They show when you click the second tab.</p>\n   * \t</TabsPanel>\n   * </Tabs>\n   * ```\n   */\n  children: PropTypes.oneOfType([PropTypes.array, PropTypes.object, PropTypes.string]),\n\n  /**\n   * CSS classes to be added to the tab panel.\n   */\n  className: PropTypes.string,\n\n  /**\n   * The HTML ID of this tab panel. Also used by the `<Tab />`that controls it as `panelId`.\n   */\n  id: PropTypes.string,\n\n  /**\n   * Whether this panel is hidden or shown. Uses the `.slds-show` and `.slds-hide` classes.\n   */\n  selected: PropTypes.bool,\n\n  /**\n   * If the Tabs should be scoped, vertical, or default (default value)\n   */\n  variant: PropTypes.oneOf(['default', 'scoped', 'vertical']),\n\n  /**\n   * The HTML ID of the `<Tab />` that controls this panel.\n   */\n  tabId: PropTypes.string\n};\nTabPanel.defaultProps = {\n  variant: 'default',\n  selected: false\n};\nexport default TabPanel;","map":{"version":3,"sources":["../../../../.tmp-es/components/tabs/private/tab-panel.jsx"],"names":["TabPanel","className","children","variant","selected","id","tabId","attributes","classNames","PropTypes","string"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;AAEA;AAEA;AAEA;AAEA;;;AACA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA,C,CAEA;;AACA,OAAA,UAAA,MAAA,YAAA;AACA,SAAA,SAAA,QAAA,8BAAA;AAEA;AACA;AACA;;AACA,IAAMA,QAAQ,GAAG,SAAXA,QAAW,CAAA,IAAA,EAAA;AAAA,MAChBC,SADgB,GAAA,IAAA,CAAA,SAAA;AAAA,MAEhBC,QAFgB,GAAA,IAAA,CAAA,QAAA;AAAA,MAGhBC,OAHgB,GAAA,IAAA,CAAA,OAAA;AAAA,MAIhBC,QAJgB,GAAA,IAAA,CAAA,QAAA;AAAA,MAKhBC,EALgB,GAAA,IAAA,CAAA,EAAA;AAAA,MAMhBC,KANgB,GAAA,IAAA,CAAA,KAAA;AAAA,MAObC,UAPa,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,WAAA,EAAA,UAAA,EAAA,SAAA,EAAA,UAAA,EAAA,IAAA,EAAA,OAAA,CAAA,CAAA;;AAAA,SAAA,aAShB,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACC,uBADD,KAAA;AAEC,IAAA,SAAS,EAAEC,UAAU,CAAA,SAAA,EAAY;AAChC,mBADgC,QAAA;AAEhC,mBAAa,CAFmB,QAAA;AAGhC,oCAA8BL,OAAO,KAHL,SAAA;AAIhC,mCAA6BA,OAAO,KAJJ,QAAA;AAKhC,qCAA+BA,OAAO,KAAK;AALX,KAAZ,CAFtB;AASC,IAAA,EAAE,EATH,EAAA;AAUC,IAAA,IAAI,EAAC;AAVN,GAAA,EAYED,QAAQ,CAARA,KAAAA,CArBc,QAShB,CATgB;AAAjB,CAAA;;AAyBAF,QAAQ,CAARA,WAAAA,GAAAA,SAAAA;AAEAA,QAAQ,CAARA,SAAAA,GAAqB;AACpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACCE,EAAAA,QAAQ,EAAEO,SAAS,CAATA,SAAAA,CAAoB,CAC7BA,SAAS,CADoB,KAAA,EAE7BA,SAAS,CAFoB,MAAA,EAG7BA,SAAS,CA3BU,MAwBU,CAApBA,CAxBU;;AA8BpB;AACD;AACA;AACCR,EAAAA,SAAS,EAAEQ,SAAS,CAjCA,MAAA;;AAmCpB;AACD;AACA;AACCJ,EAAAA,EAAE,EAAEI,SAAS,CAtCO,MAAA;;AAwCpB;AACD;AACA;AACCL,EAAAA,QAAQ,EAAEK,SAAS,CA3CC,IAAA;;AA6CpB;AACD;AACA;AACCN,EAAAA,OAAO,EAAEM,SAAS,CAATA,KAAAA,CAAgB,CAAA,SAAA,EAAA,QAAA,EAhDL,UAgDK,CAAhBA,CAhDW;;AAkDpB;AACD;AACA;AACCH,EAAAA,KAAK,EAAEG,SAAS,CAACC;AArDG,CAArBV;AAwDAA,QAAQ,CAARA,YAAAA,GAAwB;AACvBG,EAAAA,OAAO,EADgB,SAAA;AAEvBC,EAAAA,QAAQ,EAAE;AAFa,CAAxBJ;AAKA,eAAA,QAAA","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// # Tabs Component\n\n// Implements the [Tabs design pattern](https://www.lightningdesignsystem.com/components/tabs/) in React.\n\n// ## Dependencies\n\n// ### React\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n// ### classNames\nimport classNames from 'classnames';\nimport { TAB_PANEL } from '../../../utilities/constants';\n\n/**\n * The containers of content that are shown and hidden by `Tabs`.\n */\nconst TabPanel = ({\n\tclassName,\n\tchildren,\n\tvariant,\n\tselected,\n\tid,\n\ttabId,\n\t...attributes // eslint-disable-line no-unused-vars\n}) => (\n\t<div\n\t\taria-labelledby={tabId}\n\t\tclassName={classNames(className, {\n\t\t\t'slds-show': selected,\n\t\t\t'slds-hide': !selected,\n\t\t\t'slds-tabs_default__content': variant === 'default',\n\t\t\t'slds-tabs_scoped__content': variant === 'scoped',\n\t\t\t'slds-vertical-tabs__content': variant === 'vertical',\n\t\t})}\n\t\tid={id}\n\t\trole=\"tabpanel\"\n\t>\n\t\t{children.props.children}\n\t</div>\n);\n\nTabPanel.displayName = TAB_PANEL;\n\nTabPanel.propTypes = {\n\t/**\n\t * The `children` are the contents of the tab panel.\n\t *\n\t * Note that the structure of the `<Tabs />` component **does not** correspond to the DOM structure that is rendered. The `<Tabs />` component requires one or more children of type `<TabsPanel />`, which themselves require a `label` property which will be what shows in the `<Tab />` and has `children`, which end up being the _contents of the tab's corresponding panel_.\n\t *\n\t * The component iterates through each `<TabsPanel />` and rendering one `<Tab />` and one `<TabPanel />` for each of them. The tab(s) end up being children of the `<TabsList />`.\n\t *\n\t * The tab panel component actually returns the _children_ of the _children_ which were provided by the `<TabsPanel />` component.\n\t *\n\t * Due to React's nature, the `<TabsPanel />` component wraps its children in a `div` element which we don't need nor want in our rendered DOM structure, so we just bypass it and get its kids via `{children.props.children}` in the render method below.\n\t * ```\n\t * <Tabs>\n\t * \t<TabsPanel label=\"Tab 1\">\n\t * \t\t<h2 className=\"slds-text-heading_medium\">This is my tab 1 contents!</h2>\n\t * \t\t<p>They show when you click the first tab.</p>\n\t * \t</TabsPanel>\n\t * \t<TabsPanel label=\"Tab 2\">\n\t * \t\t<h2 className=\"slds-text-heading_medium\">This is my tab 2 contents!</h2>\n\t * \t\t<p>They show when you click the second tab.</p>\n\t * \t</TabsPanel>\n\t * </Tabs>\n\t * ```\n\t */\n\tchildren: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\n\t/**\n\t * CSS classes to be added to the tab panel.\n\t */\n\tclassName: PropTypes.string,\n\n\t/**\n\t * The HTML ID of this tab panel. Also used by the `<Tab />`that controls it as `panelId`.\n\t */\n\tid: PropTypes.string,\n\n\t/**\n\t * Whether this panel is hidden or shown. Uses the `.slds-show` and `.slds-hide` classes.\n\t */\n\tselected: PropTypes.bool,\n\n\t/**\n\t * If the Tabs should be scoped, vertical, or default (default value)\n\t */\n\tvariant: PropTypes.oneOf(['default', 'scoped', 'vertical']),\n\n\t/**\n\t * The HTML ID of the `<Tab />` that controls this panel.\n\t */\n\ttabId: PropTypes.string,\n};\n\nTabPanel.defaultProps = {\n\tvariant: 'default',\n\tselected: false,\n};\n\nexport default TabPanel;\n"]},"metadata":{},"sourceType":"module"}