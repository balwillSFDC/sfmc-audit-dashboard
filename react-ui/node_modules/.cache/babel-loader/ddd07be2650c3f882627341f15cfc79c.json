{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport shortid from 'shortid';\nimport classNames from 'classnames';\nimport ToggleButton, { TOGGLE_BUTTON_WIDTH } from './private/toggle-button';\nimport { SPLIT_VIEW } from '../../utilities/constants';\nvar propTypes = {\n  /**\n   * **Assistive text for accessibility**\n   * * `toggleButtonOpen`: The button used to open the split view.\n   * * `toggleButtonClose`: The button used to close the split view.\n   */\n  assistiveText: PropTypes.shape({\n    toggleButtonOpen: PropTypes.string,\n    toggleButtonClose: PropTypes.string\n  }),\n\n  /**\n   * HTML Id for the component.\n   */\n  id: PropTypes.string,\n\n  /**\n   * CSS classes to be added to the root `div` tag. Uses `classNames` [API](https://github.com/JedWatson/classnames).\n   */\n  className: PropTypes.oneOfType([PropTypes.array, PropTypes.object, PropTypes.string]),\n\n  /**\n   * Sets the split view to be open or closed.\n   */\n  isOpen: PropTypes.bool,\n\n  /**\n   * Event Callbacks\n   * * `onClose`: Triggered when the split view has closed.\n   * * `onOpen`: Triggered when the split view has opened.\n   */\n  events: PropTypes.shape({\n    onClose: PropTypes.func,\n    onOpen: PropTypes.func\n  }),\n\n  /**\n   * The React component that is rendered in the master section.\n   * You need to pass in an array of elements in order for the scrolling to in the SplitViewList to work correctly.\n   * React requires that you also supply a unique `key` for each element [React Lists and Keys](https://reactjs.org/docs/lists-and-keys.html#keys).\n   */\n  master: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.element), PropTypes.element]).isRequired,\n\n  /**\n   * The width of the master section.\n   */\n  masterWidth: PropTypes.string,\n\n  /**\n   * The React component that is rendered in the detail section.\n   */\n  detail: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.element), PropTypes.element]).isRequired\n};\nvar defaultProps = {\n  assistiveText: {\n    toggleButtonOpen: 'Close split view',\n    toggleButtonClose: 'Open split view'\n  },\n  events: {},\n  masterWidth: '20rem'\n};\n/**\n * Split view is used to navigate between records in a list while staying on the same screen.\n */\n\nvar SplitView = /*#__PURE__*/function (_React$Component) {\n  _inherits(SplitView, _React$Component);\n\n  var _super = _createSuper(SplitView);\n\n  function SplitView(props) {\n    var _this;\n\n    _classCallCheck(this, SplitView);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      isOpen: typeof props.isOpen === 'boolean' ? props.isOpen : true\n    };\n    _this.generatedId = shortid.generate();\n    return _this;\n  }\n\n  _createClass(SplitView, [{\n    key: \"getId\",\n    value: function getId() {\n      return this.props.id || this.generatedId;\n    }\n  }, {\n    key: \"getIsOpen\",\n    value: function getIsOpen() {\n      return typeof this.props.isOpen === 'boolean' ? this.props.isOpen : this.state.isOpen;\n    }\n  }, {\n    key: \"getMasterViewId\",\n    value: function getMasterViewId() {\n      return \"master_view_\".concat(this.getId());\n    }\n  }, {\n    key: \"toggle\",\n    value: function toggle(event) {\n      if (typeof this.props.isOpen !== 'boolean') {\n        this.setState(function (prevState) {\n          return {\n            isOpen: !prevState.isOpen\n          };\n        });\n      }\n\n      var isOpen = this.getIsOpen();\n\n      if (isOpen && this.props.events.onClose) {\n        this.props.events.onClose(event);\n      } else if (!isOpen && this.props.events.onOpen) {\n        this.props.events.onOpen(event);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        id: this.getId(),\n        className: classNames('slds-grid', this.props.className),\n        style: {\n          height: '100%'\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          maxWidth: this.getIsOpen() ? this.props.masterWidth : '0',\n          minWidth: this.getIsOpen() ? this.props.masterWidth : '0'\n        },\n        className: classNames('slds-split-view_container', {\n          'slds-is-open': this.getIsOpen()\n        }, {\n          'slds-is-closed': !this.getIsOpen()\n        })\n      }, /*#__PURE__*/React.createElement(ToggleButton, {\n        assistiveText: this.props.assistiveText,\n        ariaControls: this.getMasterViewId(),\n        isOpen: this.getIsOpen(),\n        events: {\n          onClick: function onClick(event) {\n            return _this2.toggle(event);\n          }\n        }\n      }), /*#__PURE__*/React.createElement(\"article\", {\n        id: this.getMasterViewId(),\n        className: \"slds-split-view slds-grid slds-grid_vertical slds-grow slds-scrollable_none\"\n      }, this.getIsOpen() ? this.props.master : null)), /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          marginLeft: TOGGLE_BUTTON_WIDTH\n        },\n        className: \"slds-grow slds-scrollable_y\"\n      }, this.props.detail));\n    }\n  }]);\n\n  return SplitView;\n}(React.Component);\n\n_defineProperty(SplitView, \"displayName\", SPLIT_VIEW);\n\n_defineProperty(SplitView, \"propTypes\", propTypes);\n\n_defineProperty(SplitView, \"defaultProps\", defaultProps);\n\nexport default SplitView;","map":{"version":3,"sources":["../../../.tmp-es/components/split-view/index.jsx"],"names":["propTypes","assistiveText","toggleButtonOpen","PropTypes","toggleButtonClose","string","id","className","isOpen","events","onClose","onOpen","func","master","masterWidth","detail","isRequired","defaultProps","SplitView","React","Component","SPLIT_VIEW","props","shortid","event","prevState","classNames","height","maxWidth","minWidth","onClick","marginLeft","TOGGLE_BUTTON_WIDTH"],"mappings":"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","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport shortid from 'shortid';\nimport classNames from 'classnames';\n\nimport ToggleButton, { TOGGLE_BUTTON_WIDTH } from './private/toggle-button';\n\nimport { SPLIT_VIEW } from '../../utilities/constants';\n\nconst propTypes = {\n\t/**\n\t * **Assistive text for accessibility**\n\t * * `toggleButtonOpen`: The button used to open the split view.\n\t * * `toggleButtonClose`: The button used to close the split view.\n\t */\n\tassistiveText: PropTypes.shape({\n\t\ttoggleButtonOpen: PropTypes.string,\n\t\ttoggleButtonClose: PropTypes.string,\n\t}),\n\t/**\n\t * HTML Id for the component.\n\t */\n\tid: PropTypes.string,\n\t/**\n\t * CSS classes to be added to the root `div` tag. Uses `classNames` [API](https://github.com/JedWatson/classnames).\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * Sets the split view to be open or closed.\n\t */\n\tisOpen: PropTypes.bool,\n\t/**\n\t * Event Callbacks\n\t * * `onClose`: Triggered when the split view has closed.\n\t * * `onOpen`: Triggered when the split view has opened.\n\t */\n\tevents: PropTypes.shape({\n\t\tonClose: PropTypes.func,\n\t\tonOpen: PropTypes.func,\n\t}),\n\t/**\n\t * The React component that is rendered in the master section.\n\t * You need to pass in an array of elements in order for the scrolling to in the SplitViewList to work correctly.\n\t * React requires that you also supply a unique `key` for each element [React Lists and Keys](https://reactjs.org/docs/lists-and-keys.html#keys).\n\t */\n\tmaster: PropTypes.oneOfType([\n\t\tPropTypes.arrayOf(PropTypes.element),\n\t\tPropTypes.element,\n\t]).isRequired,\n\t/**\n\t * The width of the master section.\n\t */\n\tmasterWidth: PropTypes.string,\n\t/**\n\t * The React component that is rendered in the detail section.\n\t */\n\tdetail: PropTypes.oneOfType([\n\t\tPropTypes.arrayOf(PropTypes.element),\n\t\tPropTypes.element,\n\t]).isRequired,\n};\n\nconst defaultProps = {\n\tassistiveText: {\n\t\ttoggleButtonOpen: 'Close split view',\n\t\ttoggleButtonClose: 'Open split view',\n\t},\n\tevents: {},\n\tmasterWidth: '20rem',\n};\n\n/**\n * Split view is used to navigate between records in a list while staying on the same screen.\n */\nclass SplitView extends React.Component {\n\tstatic displayName = SPLIT_VIEW;\n\n\tstatic propTypes = propTypes;\n\n\tstatic defaultProps = defaultProps;\n\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tisOpen: typeof props.isOpen === 'boolean' ? props.isOpen : true,\n\t\t};\n\n\t\tthis.generatedId = shortid.generate();\n\t}\n\n\tgetId() {\n\t\treturn this.props.id || this.generatedId;\n\t}\n\n\tgetIsOpen() {\n\t\treturn typeof this.props.isOpen === 'boolean'\n\t\t\t? this.props.isOpen\n\t\t\t: this.state.isOpen;\n\t}\n\n\tgetMasterViewId() {\n\t\treturn `master_view_${this.getId()}`;\n\t}\n\n\ttoggle(event) {\n\t\tif (typeof this.props.isOpen !== 'boolean') {\n\t\t\tthis.setState((prevState) => ({\n\t\t\t\tisOpen: !prevState.isOpen,\n\t\t\t}));\n\t\t}\n\n\t\tconst isOpen = this.getIsOpen();\n\n\t\tif (isOpen && this.props.events.onClose) {\n\t\t\tthis.props.events.onClose(event);\n\t\t} else if (!isOpen && this.props.events.onOpen) {\n\t\t\tthis.props.events.onOpen(event);\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div\n\t\t\t\tid={this.getId()}\n\t\t\t\tclassName={classNames('slds-grid', this.props.className)}\n\t\t\t\tstyle={{\n\t\t\t\t\theight: '100%',\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<div\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tmaxWidth: this.getIsOpen() ? this.props.masterWidth : '0',\n\t\t\t\t\t\tminWidth: this.getIsOpen() ? this.props.masterWidth : '0',\n\t\t\t\t\t}}\n\t\t\t\t\tclassName={classNames(\n\t\t\t\t\t\t'slds-split-view_container',\n\t\t\t\t\t\t{ 'slds-is-open': this.getIsOpen() },\n\t\t\t\t\t\t{ 'slds-is-closed': !this.getIsOpen() }\n\t\t\t\t\t)}\n\t\t\t\t>\n\t\t\t\t\t<ToggleButton\n\t\t\t\t\t\tassistiveText={this.props.assistiveText}\n\t\t\t\t\t\tariaControls={this.getMasterViewId()}\n\t\t\t\t\t\tisOpen={this.getIsOpen()}\n\t\t\t\t\t\tevents={{\n\t\t\t\t\t\t\tonClick: (event) => this.toggle(event),\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t\t<article\n\t\t\t\t\t\tid={this.getMasterViewId()}\n\t\t\t\t\t\tclassName=\"slds-split-view slds-grid slds-grid_vertical slds-grow slds-scrollable_none\"\n\t\t\t\t\t>\n\t\t\t\t\t\t{this.getIsOpen() ? this.props.master : null}\n\t\t\t\t\t</article>\n\t\t\t\t</div>\n\t\t\t\t<div\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tmarginLeft: TOGGLE_BUTTON_WIDTH,\n\t\t\t\t\t}}\n\t\t\t\t\tclassName=\"slds-grow slds-scrollable_y\"\n\t\t\t\t>\n\t\t\t\t\t{this.props.detail}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default SplitView;\n"]},"metadata":{},"sourceType":"module"}