{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n// Implements the [Accordion design\n// pattern](https://www.lightningdesignsystem.com/components/accordion/) in\n// React. Based on SLDS v2.4.3\n\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport shortid from 'shortid';\nimport { ACCORDION } from '../../utilities/constants';\nvar propTypes = {\n  /**\n   * CSS class names to be added to the accordion component. _Tested with snapshot testing._\n   */\n  className: PropTypes.oneOfType([PropTypes.array, PropTypes.object, PropTypes.string]),\n\n  /**\n   * HTML id for accordion component. _Tested with snapshot testing._\n   */\n  id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * The panel content for the Accordion component. Accordion panels should be added as <AccordionPanel />. Event handler for the accordion panels should be added to `<AccordionPanel />`. Optional `panelContentActions` component may be passed as prop. _Tested with Mocha framework and snapshot testing._\n   *\n   * Example:\n   * ```\n   * <SLDSAccordion>\n   *   <SLDSAccordionpanel />\n   *   <SLDSAccordionpanel />\n   *   <SLDSAccordionpanel />\n   * </SLDSAccordion>\n   * ```\n   */\n  children: PropTypes.node.isRequired\n};\n/**\n * An accordion allows a user to toggle the display of sections of content.\n * The accordion component wraps accordion panels that can be selected and expanded. It accepts children to define the content displayed within.\n */\n\nvar Accordion = /*#__PURE__*/function (_Component) {\n  _inherits(Accordion, _Component);\n\n  var _super = _createSuper(Accordion);\n\n  function Accordion(props) {\n    var _this;\n\n    _classCallCheck(this, Accordion);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      currButtonIndex: 0\n    };\n    _this.summaryButtons = [];\n    _this.generatedId = shortid.generate();\n    return _this;\n  }\n\n  _createClass(Accordion, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (this.state.currButtonIndex !== null && this.state.currButtonIndex !== prevState.currButtonIndex) {\n        this.summaryButtons[this.state.currButtonIndex].focus();\n      }\n    }\n  }, {\n    key: \"onClickSummary\",\n    value: function onClickSummary() {\n      this.setState({\n        currButtonIndex: null\n      });\n    }\n  }, {\n    key: \"onKeyDownSummary\",\n    value: function onKeyDownSummary(e) {\n      var buttonIndex = this.state.currButtonIndex;\n\n      if (buttonIndex === null) {\n        buttonIndex = this.summaryButtons.findIndex(function (el) {\n          return el.id === e.target.id;\n        });\n      }\n\n      if (e.key === 'ArrowDown') {\n        e.preventDefault();\n\n        if (buttonIndex < this.props.children.length - 1) {\n          this.setState({\n            currButtonIndex: buttonIndex + 1\n          });\n        } else {\n          this.setState({\n            currButtonIndex: 0\n          });\n        }\n      } else if (e.key === 'ArrowUp') {\n        e.preventDefault();\n\n        if (buttonIndex > 0) {\n          this.setState({\n            currButtonIndex: buttonIndex - 1\n          });\n        } else {\n          this.setState({\n            currButtonIndex: this.props.children.length - 1\n          });\n        }\n      }\n    }\n  }, {\n    key: \"addSummaryButton\",\n    value: function addSummaryButton(button) {\n      var btnInArr = this.summaryButtons.find(function (el) {\n        return button === el;\n      });\n\n      if (button !== null && btnInArr === undefined) {\n        // eslint-disable-next-line fp/no-mutating-methods\n        this.summaryButtons.push(button);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return /*#__PURE__*/React.createElement(\"ul\", {\n        name: this.props.id || this.generatedId,\n        className: classNames('slds-accordion', this.props.className)\n      }, React.Children.map(this.props.children, function (child) {\n        return /*#__PURE__*/React.cloneElement(child, {\n          refs: {\n            summaryButton: _this2.addSummaryButton.bind(_this2)\n          },\n          onClickSummary: _this2.onClickSummary.bind(_this2),\n          onKeyDownSummary: _this2.onKeyDownSummary.bind(_this2)\n        });\n      }));\n    }\n  }]);\n\n  return Accordion;\n}(Component);\n\nAccordion.displayName = ACCORDION;\nAccordion.propTypes = propTypes;\nexport default Accordion;","map":{"version":3,"sources":["../../../.tmp-es/components/accordion/index.jsx"],"names":["propTypes","className","PropTypes","id","children","isRequired","Accordion","Component","currButtonIndex","shortid","prevProps","prevState","e","buttonIndex","el","button","btnInArr","classNames","refs","summaryButton","onClickSummary","onKeyDownSummary"],"mappings":"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","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// Implements the [Accordion design\n// pattern](https://www.lightningdesignsystem.com/components/accordion/) in\n// React. Based on SLDS v2.4.3\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport shortid from 'shortid';\n\nimport { ACCORDION } from '../../utilities/constants';\n\nconst propTypes = {\n\t/**\n\t * CSS class names to be added to the accordion component. _Tested with snapshot testing._\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * HTML id for accordion component. _Tested with snapshot testing._\n\t */\n\tid: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\t/**\n\t * The panel content for the Accordion component. Accordion panels should be added as <AccordionPanel />. Event handler for the accordion panels should be added to `<AccordionPanel />`. Optional `panelContentActions` component may be passed as prop. _Tested with Mocha framework and snapshot testing._\n\t *\n\t * Example:\n\t * ```\n\t * <SLDSAccordion>\n\t *   <SLDSAccordionpanel />\n\t *   <SLDSAccordionpanel />\n\t *   <SLDSAccordionpanel />\n\t * </SLDSAccordion>\n\t * ```\n\t */\n\tchildren: PropTypes.node.isRequired,\n};\n\n/**\n * An accordion allows a user to toggle the display of sections of content.\n * The accordion component wraps accordion panels that can be selected and expanded. It accepts children to define the content displayed within.\n */\nclass Accordion extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = { currButtonIndex: 0 };\n\t\tthis.summaryButtons = [];\n\t\tthis.generatedId = shortid.generate();\n\t}\n\n\tcomponentDidUpdate(prevProps, prevState) {\n\t\tif (\n\t\t\tthis.state.currButtonIndex !== null &&\n\t\t\tthis.state.currButtonIndex !== prevState.currButtonIndex\n\t\t) {\n\t\t\tthis.summaryButtons[this.state.currButtonIndex].focus();\n\t\t}\n\t}\n\n\tonClickSummary() {\n\t\tthis.setState({ currButtonIndex: null });\n\t}\n\n\tonKeyDownSummary(e) {\n\t\tlet buttonIndex = this.state.currButtonIndex;\n\t\tif (buttonIndex === null) {\n\t\t\tbuttonIndex = this.summaryButtons.findIndex(\n\t\t\t\t(el) => el.id === e.target.id\n\t\t\t);\n\t\t}\n\n\t\tif (e.key === 'ArrowDown') {\n\t\t\te.preventDefault();\n\t\t\tif (buttonIndex < this.props.children.length - 1) {\n\t\t\t\tthis.setState({\n\t\t\t\t\tcurrButtonIndex: buttonIndex + 1,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.setState({ currButtonIndex: 0 });\n\t\t\t}\n\t\t} else if (e.key === 'ArrowUp') {\n\t\t\te.preventDefault();\n\t\t\tif (buttonIndex > 0) {\n\t\t\t\tthis.setState({\n\t\t\t\t\tcurrButtonIndex: buttonIndex - 1,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.setState({ currButtonIndex: this.props.children.length - 1 });\n\t\t\t}\n\t\t}\n\t}\n\n\taddSummaryButton(button) {\n\t\tconst btnInArr = this.summaryButtons.find((el) => button === el);\n\t\tif (button !== null && btnInArr === undefined) {\n\t\t\t// eslint-disable-next-line fp/no-mutating-methods\n\t\t\tthis.summaryButtons.push(button);\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<ul\n\t\t\t\tname={this.props.id || this.generatedId}\n\t\t\t\tclassName={classNames('slds-accordion', this.props.className)}\n\t\t\t>\n\t\t\t\t{React.Children.map(this.props.children, (child) =>\n\t\t\t\t\tReact.cloneElement(child, {\n\t\t\t\t\t\trefs: { summaryButton: this.addSummaryButton.bind(this) },\n\t\t\t\t\t\tonClickSummary: this.onClickSummary.bind(this),\n\t\t\t\t\t\tonKeyDownSummary: this.onKeyDownSummary.bind(this),\n\t\t\t\t\t})\n\t\t\t\t)}\n\t\t\t</ul>\n\t\t);\n\t}\n}\n\nAccordion.displayName = ACCORDION;\nAccordion.propTypes = propTypes;\n\nexport default Accordion;\n"]},"metadata":{},"sourceType":"module"}