{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/*\n * Field Level Help Tooltip for input labels\n */\n\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Tooltip from '../index';\nimport objectHelpers from '../../../utilities/object';\nvar propTypes = {\n  /*\n   * Assistive Text object from parent component such as Input, Combobox, etc.\n   */\n  assistiveText: PropTypes.shape({\n    triggerLearnMoreIcon: PropTypes.string\n  }),\n\n  /*\n   * Tooltip from external prop\n   */\n  fieldLevelHelpTooltip: PropTypes.node.isRequired\n};\nvar defaultProps = {\n  triggerClassName: 'slds-form-element__icon',\n  // This allows `position: absolute` Tooltips to align properly.\n  // If not present, tooltip will always be below the info icon // instead of above it.\n  triggerStyle: {\n    position: 'static'\n  },\n  variant: 'learnMore'\n};\n\nvar FieldLevelHelpTooltip = function FieldLevelHelpTooltip(_ref) {\n  var fieldLevelHelpTooltip = _ref.fieldLevelHelpTooltip,\n      _ref$assistiveText = _ref.assistiveText,\n      assistiveText = _ref$assistiveText === void 0 ? {} : _ref$assistiveText;\n  return fieldLevelHelpTooltip ? /*#__PURE__*/React.createElement(Tooltip, _objectSpread(_objectSpread(_objectSpread({}, defaultProps), fieldLevelHelpTooltip.props), {}, {\n    // allow backwards compatibility with Input's\n    // assistiveText.fieldLevelHelpButton\n    // `Input` used to have an `assistiveText.fieldLevelHelpButton`\n    // prop and that prop needs to override the default Tooltip\n    // \"Help\" string.\n    assistiveText: _objectSpread(_objectSpread({}, fieldLevelHelpTooltip.props.assistiveText), objectHelpers.removeUndefined(assistiveText))\n  })) : null;\n};\n\nFieldLevelHelpTooltip.propTypes = propTypes;\nFieldLevelHelpTooltip.displayName = 'FieldLevelHelpTooltip';\nexport default FieldLevelHelpTooltip;","map":{"version":3,"sources":["../../../../.tmp-es/components/tooltip/private/field-level-help-tooltip.jsx"],"names":["propTypes","assistiveText","triggerLearnMoreIcon","PropTypes","string","fieldLevelHelpTooltip","isRequired","defaultProps","triggerClassName","triggerStyle","position","variant","FieldLevelHelpTooltip","objectHelpers"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;;;AACA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;AAEA,OAAA,OAAA,MAAA,UAAA;AACA,OAAA,aAAA,MAAA,2BAAA;AAEA,IAAMA,SAAS,GAAG;AACjB;AACD;AACA;AACCC,EAAAA,aAAa,EAAE,SAAS,CAAT,KAAA,CAAgB;AAC9BC,IAAAA,oBAAoB,EAAEC,SAAS,CAACC;AADF,GAAhB,CAJE;;AAOjB;AACD;AACA;AACCC,EAAAA,qBAAqB,EAAEF,SAAS,CAATA,IAAAA,CAAeG;AAVrB,CAAlB;AAaA,IAAMC,YAAY,GAAG;AACpBC,EAAAA,gBAAgB,EADI,yBAAA;AAEpB;AACA;AACAC,EAAAA,YAAY,EAAE;AAAEC,IAAAA,QAAQ,EAAE;AAAZ,GAJM;AAKpBC,EAAAA,OAAO,EAAE;AALW,CAArB;;AAQA,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAA,IAAA,EAAA;AAAA,MAAGP,qBAAH,GAAA,IAAA,CAAA,qBAAA;AAAA,MAAA,kBAAA,GAAA,IAAA,CAAA,aAAA;AAAA,MAA0BJ,aAA1B,GAAA,kBAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,kBAAA;AAAA,SAC7BI,qBAAqB,GAAA,aACpB,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA,aAAA,CAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,YAAA,CAAA,EAKKA,qBAAqB,CAL1B,KAAA,CAAA,EAAA,EAAA,EAAA;AAME;AACA;AACA;AACA;AACA;AACAJ,IAAAA,aAAa,EAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EACTI,qBAAqB,CAArBA,KAAAA,CADS,aAAA,CAAA,EAETQ,aAAa,CAAbA,eAAAA,CAFS,aAETA,CAFS;AAXf,GAAA,CAAA,CADoB,GADQ,IAAA;AAA9B,CAAA;;AAqBAD,qBAAqB,CAArBA,SAAAA,GAAAA,SAAAA;AACAA,qBAAqB,CAArBA,WAAAA,GAAAA,uBAAAA;AAEA,eAAA,qBAAA","sourcesContent":["/*\n * Field Level Help Tooltip for input labels\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Tooltip from '../index';\nimport objectHelpers from '../../../utilities/object';\n\nconst propTypes = {\n\t/*\n\t * Assistive Text object from parent component such as Input, Combobox, etc.\n\t */\n\tassistiveText: PropTypes.shape({\n\t\ttriggerLearnMoreIcon: PropTypes.string,\n\t}),\n\t/*\n\t * Tooltip from external prop\n\t */\n\tfieldLevelHelpTooltip: PropTypes.node.isRequired,\n};\n\nconst defaultProps = {\n\ttriggerClassName: 'slds-form-element__icon',\n\t// This allows `position: absolute` Tooltips to align properly.\n\t// If not present, tooltip will always be below the info icon // instead of above it.\n\ttriggerStyle: { position: 'static' },\n\tvariant: 'learnMore',\n};\n\nconst FieldLevelHelpTooltip = ({ fieldLevelHelpTooltip, assistiveText = {} }) =>\n\tfieldLevelHelpTooltip ? (\n\t\t<Tooltip\n\t\t\t{...{\n\t\t\t\t// internal default props\n\t\t\t\t...defaultProps,\n\t\t\t\t// props from external developer\n\t\t\t\t...fieldLevelHelpTooltip.props,\n\t\t\t\t// allow backwards compatibility with Input's\n\t\t\t\t// assistiveText.fieldLevelHelpButton\n\t\t\t\t// `Input` used to have an `assistiveText.fieldLevelHelpButton`\n\t\t\t\t// prop and that prop needs to override the default Tooltip\n\t\t\t\t// \"Help\" string.\n\t\t\t\tassistiveText: {\n\t\t\t\t\t...fieldLevelHelpTooltip.props.assistiveText,\n\t\t\t\t\t...objectHelpers.removeUndefined(assistiveText),\n\t\t\t\t},\n\t\t\t}}\n\t\t/>\n\t) : null;\n\nFieldLevelHelpTooltip.propTypes = propTypes;\nFieldLevelHelpTooltip.displayName = 'FieldLevelHelpTooltip';\n\nexport default FieldLevelHelpTooltip;\n"]},"metadata":{},"sourceType":"module"}