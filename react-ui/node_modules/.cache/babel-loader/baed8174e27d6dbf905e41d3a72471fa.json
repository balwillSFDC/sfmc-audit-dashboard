{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n// # Expandable Section Component\n// Implements the [Expandable Section design pattern](https://www.lightningdesignsystem.com/components/expandable-section/) in React.\n\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport shortid from 'shortid';\nimport Button from '../button'; // ### Event Helpers\n// import KEYS from '../../utilities/key-code';\n// import EventUtil from '../../utilities/event';\n\nimport { EXPANDABLE_SECTION } from '../../utilities/constants';\nvar propTypes = {\n  /**\n   * **Assistive text for accessibility.**\n   * * `toggleSection`: Label for the icon that expands / collapses the section\n   */\n  assistiveText: PropTypes.shape({\n    toggleSection: PropTypes.string\n  }),\n\n  /**\n   * Contents of the section\n   */\n  children: PropTypes.node,\n\n  /**\n   * Class names to be added to the `slds-section` classed node\n   */\n  className: PropTypes.oneOfType([PropTypes.array, PropTypes.object, PropTypes.string]),\n\n  /**\n   * Unique identifier for the expandable section. The id is automatically generated if not provided\n   */\n  id: PropTypes.string,\n\n  /**\n   * Specifies whether the section is expanded or collapsed. If not provided, component will use its own state to manage this itself\n   */\n  isOpen: PropTypes.bool,\n\n  /**\n   * Specifies whether the section can be expanded or collapsed. Defaults to `false`\n   */\n  nonCollapsible: PropTypes.bool,\n\n  /**\n   * Callback for when the section is expanded or collapsed. Passes event object and data object with `isOpen` bool.\n   */\n  onToggleOpen: PropTypes.func,\n\n  /**\n   * The title for the section\n   */\n  title: PropTypes.string.isRequired\n};\nvar defaultProps = {\n  assistiveText: {\n    toggleSection: 'Toggle visibility of section'\n  },\n  nonCollapsible: false\n};\n/**\n * Toggle visibility of section content with the Expandable Section\n */\n\nvar ExpandableSection = /*#__PURE__*/function (_React$Component) {\n  _inherits(ExpandableSection, _React$Component);\n\n  var _super = _createSuper(ExpandableSection);\n\n  function ExpandableSection(props) {\n    var _this;\n\n    _classCallCheck(this, ExpandableSection);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"getId\", function () {\n      return _this.props.id || _this.generatedId;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"toggleOpen\", function (event) {\n      if (_this.props.onToggleOpen) {\n        _this.props.onToggleOpen(event, {\n          isOpen: _this.props.isOpen\n        });\n      } else {\n        _this.setState(function (prevState) {\n          return {\n            isOpen: !prevState.isOpen\n          };\n        });\n      }\n    });\n\n    _this.generatedId = shortid.generate();\n    _this.state = {\n      isOpen: true\n    };\n    return _this;\n  }\n\n  _createClass(ExpandableSection, [{\n    key: \"render\",\n    value: function render() {\n      var contentId = \"\".concat(this.getId(), \"-expanded-section-content\");\n      var isOpen = this.props.isOpen !== undefined ? this.props.isOpen : this.state.isOpen;\n      var buttonAriaProps = {\n        'aria-controls': contentId,\n        'aria-expanded': !!isOpen\n      };\n      var titleNode = /*#__PURE__*/React.createElement(\"span\", {\n        className: classNames('slds-truncate', {\n          'slds-p-horizontal_small': !!this.props.nonCollapsible\n        }),\n        title: this.props.title\n      }, this.props.title);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: classNames('slds-section', {\n          'slds-is-open': isOpen\n        }, this.props.className)\n      }, /*#__PURE__*/React.createElement(\"h3\", {\n        className: classNames('slds-section__title', {\n          'slds-theme_shade': !!this.props.nonCollapsible\n        })\n      }, !this.props.nonCollapsible ? /*#__PURE__*/React.createElement(Button, _extends({\n        assistiveText: {\n          icon: this.props.assistiveText.toggleSection\n        },\n        iconCategory: \"utility\",\n        iconClassName: \"slds-section__title-action-icon slds-button__icon_left\",\n        iconName: \"switch\",\n        onClick: this.toggleOpen,\n        className: \"slds-section__title-action\",\n        variant: \"base\"\n      }, buttonAriaProps), titleNode) : titleNode), /*#__PURE__*/React.createElement(\"div\", {\n        \"aria-hidden\": !isOpen,\n        className: \"slds-section__content\",\n        id: contentId\n      }, this.props.children));\n    }\n  }]);\n\n  return ExpandableSection;\n}(React.Component);\n\nExpandableSection.displayName = EXPANDABLE_SECTION;\nExpandableSection.propTypes = propTypes;\nExpandableSection.defaultProps = defaultProps;\nexport default ExpandableSection;","map":{"version":3,"sources":["../../../.tmp-es/components/expandable-section/index.jsx"],"names":["propTypes","assistiveText","toggleSection","PropTypes","string","children","className","id","isOpen","nonCollapsible","onToggleOpen","title","isRequired","defaultProps","ExpandableSection","React","Component","shortid","prevState","contentId","buttonAriaProps","titleNode","classNames","icon"],"mappings":"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","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// # Expandable Section Component\n\n// Implements the [Expandable Section design pattern](https://www.lightningdesignsystem.com/components/expandable-section/) in React.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport classNames from 'classnames';\nimport shortid from 'shortid';\n\nimport Button from '../button';\n\n// ### Event Helpers\n// import KEYS from '../../utilities/key-code';\n// import EventUtil from '../../utilities/event';\n\nimport { EXPANDABLE_SECTION } from '../../utilities/constants';\n\nconst propTypes = {\n\t/**\n\t * **Assistive text for accessibility.**\n\t * * `toggleSection`: Label for the icon that expands / collapses the section\n\t */\n\tassistiveText: PropTypes.shape({\n\t\ttoggleSection: PropTypes.string,\n\t}),\n\t/**\n\t * Contents of the section\n\t */\n\tchildren: PropTypes.node,\n\t/**\n\t * Class names to be added to the `slds-section` classed node\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * Unique identifier for the expandable section. The id is automatically generated if not provided\n\t */\n\tid: PropTypes.string,\n\t/**\n\t * Specifies whether the section is expanded or collapsed. If not provided, component will use its own state to manage this itself\n\t */\n\tisOpen: PropTypes.bool,\n\t/**\n\t * Specifies whether the section can be expanded or collapsed. Defaults to `false`\n\t */\n\tnonCollapsible: PropTypes.bool,\n\t/**\n\t * Callback for when the section is expanded or collapsed. Passes event object and data object with `isOpen` bool.\n\t */\n\tonToggleOpen: PropTypes.func,\n\t/**\n\t * The title for the section\n\t */\n\ttitle: PropTypes.string.isRequired,\n};\n\nconst defaultProps = {\n\tassistiveText: {\n\t\ttoggleSection: 'Toggle visibility of section',\n\t},\n\tnonCollapsible: false,\n};\n\n/**\n * Toggle visibility of section content with the Expandable Section\n */\nclass ExpandableSection extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.generatedId = shortid.generate();\n\t\tthis.state = {\n\t\t\tisOpen: true,\n\t\t};\n\t}\n\n\tgetId = () => this.props.id || this.generatedId;\n\n\ttoggleOpen = (event) => {\n\t\tif (this.props.onToggleOpen) {\n\t\t\tthis.props.onToggleOpen(event, {\n\t\t\t\tisOpen: this.props.isOpen,\n\t\t\t});\n\t\t} else {\n\t\t\tthis.setState((prevState) => ({\n\t\t\t\tisOpen: !prevState.isOpen,\n\t\t\t}));\n\t\t}\n\t};\n\n\trender() {\n\t\tconst contentId = `${this.getId()}-expanded-section-content`;\n\t\tconst isOpen =\n\t\t\tthis.props.isOpen !== undefined ? this.props.isOpen : this.state.isOpen;\n\t\tconst buttonAriaProps = {\n\t\t\t'aria-controls': contentId,\n\t\t\t'aria-expanded': !!isOpen,\n\t\t};\n\t\tconst titleNode = (\n\t\t\t<span\n\t\t\t\tclassName={classNames('slds-truncate', {\n\t\t\t\t\t'slds-p-horizontal_small': !!this.props.nonCollapsible,\n\t\t\t\t})}\n\t\t\t\ttitle={this.props.title}\n\t\t\t>\n\t\t\t\t{this.props.title}\n\t\t\t</span>\n\t\t);\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\tclassName={classNames(\n\t\t\t\t\t'slds-section',\n\t\t\t\t\t{\n\t\t\t\t\t\t'slds-is-open': isOpen,\n\t\t\t\t\t},\n\t\t\t\t\tthis.props.className\n\t\t\t\t)}\n\t\t\t>\n\t\t\t\t<h3\n\t\t\t\t\tclassName={classNames('slds-section__title', {\n\t\t\t\t\t\t'slds-theme_shade': !!this.props.nonCollapsible,\n\t\t\t\t\t})}\n\t\t\t\t>\n\t\t\t\t\t{!this.props.nonCollapsible ? (\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tassistiveText={{\n\t\t\t\t\t\t\t\ticon: this.props.assistiveText.toggleSection,\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\ticonCategory=\"utility\"\n\t\t\t\t\t\t\ticonClassName=\"slds-section__title-action-icon slds-button__icon_left\"\n\t\t\t\t\t\t\ticonName=\"switch\"\n\t\t\t\t\t\t\tonClick={this.toggleOpen}\n\t\t\t\t\t\t\tclassName=\"slds-section__title-action\"\n\t\t\t\t\t\t\tvariant=\"base\"\n\t\t\t\t\t\t\t{...buttonAriaProps}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{titleNode}\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t) : (\n\t\t\t\t\t\ttitleNode\n\t\t\t\t\t)}\n\t\t\t\t</h3>\n\t\t\t\t<div\n\t\t\t\t\taria-hidden={!isOpen}\n\t\t\t\t\tclassName=\"slds-section__content\"\n\t\t\t\t\tid={contentId}\n\t\t\t\t>\n\t\t\t\t\t{this.props.children}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nExpandableSection.displayName = EXPANDABLE_SECTION;\nExpandableSection.propTypes = propTypes;\nExpandableSection.defaultProps = defaultProps;\n\nexport default ExpandableSection;\n"]},"metadata":{},"sourceType":"module"}