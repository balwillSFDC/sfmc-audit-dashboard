{"ast":null,"code":"/* eslint-disable react/jsx-curly-brace-presence */\n\n/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nvar propTypes = {\n  /*\n   * Assistive Text to use instead of a visible label\n   */\n  assistiveText: PropTypes.object,\n\n  /**\n   * Class names to be added to the label\n   */\n  className: PropTypes.oneOfType([PropTypes.array, PropTypes.object, PropTypes.string]),\n\n  /*\n   * Id of the input associated with this label\n   */\n  htmlFor: PropTypes.string,\n\n  /*\n   * Input Label\n   */\n  label: PropTypes.string,\n\n  /*\n   * Applies label styling for a required form element\n   */\n  required: PropTypes.bool,\n\n  /**\n   * Changes markup of label.\n   */\n  variant: PropTypes.oneOf(['base', 'static'])\n};\nvar defaultProps = {\n  variant: 'base'\n};\n/*\n * Form label. This returns null if there is no label text (hidden or shown)\n */\n\nvar Label = function Label(props) {\n  var labelText = props.label || props.assistiveText && props.assistiveText.label; // One of these is required to pass accessibility tests\n\n  var subRenders = {\n    base: /*#__PURE__*/React.createElement(\"label\", {\n      className: classNames('slds-form-element__label', {\n        'slds-assistive-text': props.assistiveText && !props.label\n      }, props.className),\n      htmlFor: props.htmlFor\n    }, props.required && /*#__PURE__*/React.createElement(\"abbr\", {\n      className: \"slds-required\",\n      title: \"required\"\n    }, '*'), labelText),\n    static: /*#__PURE__*/React.createElement(\"span\", {\n      className: classNames('slds-form-element__label', props.className)\n    }, labelText)\n  };\n  return labelText ? subRenders[props.variant] : null;\n};\n\nLabel.displayName = 'Label';\nLabel.propTypes = propTypes;\nLabel.defaultProps = defaultProps;\nexport default Label;","map":{"version":3,"sources":["../../../../.tmp-es/components/utilities/label/index.jsx"],"names":["propTypes","assistiveText","PropTypes","className","htmlFor","label","required","variant","defaultProps","Label","labelText","props","subRenders","base","classNames","static"],"mappings":"AAAA;;AACA;;AACA;AAEA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,OAAA,UAAA,MAAA,YAAA;AAEA,IAAMA,SAAS,GAAG;AACjB;AACD;AACA;AACCC,EAAAA,aAAa,EAAEC,SAAS,CAJP,MAAA;;AAKjB;AACD;AACA;AACCC,EAAAA,SAAS,EAAED,SAAS,CAATA,SAAAA,CAAoB,CAC9BA,SAAS,CADqB,KAAA,EAE9BA,SAAS,CAFqB,MAAA,EAG9BA,SAAS,CAXO,MAQc,CAApBA,CARM;;AAajB;AACD;AACA;AACCE,EAAAA,OAAO,EAAEF,SAAS,CAhBD,MAAA;;AAiBjB;AACD;AACA;AACCG,EAAAA,KAAK,EAAEH,SAAS,CApBC,MAAA;;AAqBjB;AACD;AACA;AACCI,EAAAA,QAAQ,EAAEJ,SAAS,CAxBF,IAAA;;AAyBjB;AACD;AACA;AACCK,EAAAA,OAAO,EAAEL,SAAS,CAATA,KAAAA,CAAgB,CAAA,MAAA,EAAhBA,QAAgB,CAAhBA;AA5BQ,CAAlB;AA+BA,IAAMM,YAAY,GAAG;AACpBD,EAAAA,OAAO,EAAE;AADW,CAArB;AAIA;AACA;AACA;;AACA,IAAME,KAAK,GAAG,SAARA,KAAQ,CAAA,KAAA,EAAW;AACxB,MAAMC,SAAS,GACdC,KAAK,CAALA,KAAAA,IAAgBA,KAAK,CAALA,aAAAA,IAAuBA,KAAK,CAALA,aAAAA,CAFhB,KACxB,CADwB,CAE4C;;AAEpE,MAAMC,UAAU,GAAG;AAClBC,IAAAA,IAAI,EAAA,aACH,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA;AACC,MAAA,SAAS,EAAEC,UAAU,CAAA,0BAAA,EAEpB;AACC,+BAAuBH,KAAK,CAALA,aAAAA,IAAuB,CAACA,KAAK,CAACN;AADtD,OAFoB,EAKpBM,KAAK,CANP,SACsB,CADtB;AAQC,MAAA,OAAO,EAAEA,KAAK,CAACP;AARhB,KAAA,EAUEO,KAAK,CAALA,QAAAA,IAAAA,aACA,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,MAAA,SAAS,EAAf,eAAA;AAAgC,MAAA,KAAK,EAAC;AAAtC,KAAA,EAXF,GAWE,CAXF,EAFiB,SAEjB,CAFiB;AAoBlBI,IAAAA,MAAM,EAAA,aACL,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,MAAA,SAAS,EAAED,UAAU,CAAA,0BAAA,EAA6BH,KAAK,CAAlC,SAAA;AAA3B,KAAA,EAAA,SAAA;AArBiB,GAAnB;AA2BA,SAAOD,SAAS,GAAGE,UAAU,CAACD,KAAK,CAAnB,OAAa,CAAb,GAAhB,IAAA;AA/BD,CAAA;;AAkCAF,KAAK,CAALA,WAAAA,GAAAA,OAAAA;AACAA,KAAK,CAALA,SAAAA,GAAAA,SAAAA;AACAA,KAAK,CAALA,YAAAA,GAAAA,YAAAA;AAEA,eAAA,KAAA","sourcesContent":["/* eslint-disable react/jsx-curly-brace-presence */\n/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nconst propTypes = {\n\t/*\n\t * Assistive Text to use instead of a visible label\n\t */\n\tassistiveText: PropTypes.object,\n\t/**\n\t * Class names to be added to the label\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/*\n\t * Id of the input associated with this label\n\t */\n\thtmlFor: PropTypes.string,\n\t/*\n\t * Input Label\n\t */\n\tlabel: PropTypes.string,\n\t/*\n\t * Applies label styling for a required form element\n\t */\n\trequired: PropTypes.bool,\n\t/**\n\t * Changes markup of label.\n\t */\n\tvariant: PropTypes.oneOf(['base', 'static']),\n};\n\nconst defaultProps = {\n\tvariant: 'base',\n};\n\n/*\n * Form label. This returns null if there is no label text (hidden or shown)\n */\nconst Label = (props) => {\n\tconst labelText =\n\t\tprops.label || (props.assistiveText && props.assistiveText.label); // One of these is required to pass accessibility tests\n\n\tconst subRenders = {\n\t\tbase: (\n\t\t\t<label\n\t\t\t\tclassName={classNames(\n\t\t\t\t\t'slds-form-element__label',\n\t\t\t\t\t{\n\t\t\t\t\t\t'slds-assistive-text': props.assistiveText && !props.label,\n\t\t\t\t\t},\n\t\t\t\t\tprops.className\n\t\t\t\t)}\n\t\t\t\thtmlFor={props.htmlFor}\n\t\t\t>\n\t\t\t\t{props.required && (\n\t\t\t\t\t<abbr className=\"slds-required\" title=\"required\">\n\t\t\t\t\t\t{'*'}\n\t\t\t\t\t</abbr>\n\t\t\t\t)}\n\t\t\t\t{labelText}\n\t\t\t</label>\n\t\t),\n\t\tstatic: (\n\t\t\t<span className={classNames('slds-form-element__label', props.className)}>\n\t\t\t\t{labelText}\n\t\t\t</span>\n\t\t),\n\t};\n\n\treturn labelText ? subRenders[props.variant] : null;\n};\n\nLabel.displayName = 'Label';\nLabel.propTypes = propTypes;\nLabel.defaultProps = defaultProps;\n\nexport default Label;\n"]},"metadata":{},"sourceType":"module"}