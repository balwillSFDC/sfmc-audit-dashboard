{"ast":null,"code":"var React = require('react');\n\nvar RegExpPropType = require('./regExpPropType');\n\nvar escapeStringRegexp = require('escape-string-regexp');\n\nvar blacklist = require('blacklist');\n\nvar createReactClass = require('create-react-class');\n\nvar PropTypes = require('prop-types');\n\nfunction removeDiacritics(str, blacklist) {\n  if (!String.prototype.normalize) {\n    // Fall back to original string\n    return str;\n  }\n\n  if (!blacklist) {\n    // No blacklist, just remove all\n    return str.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n  } else {\n    var blacklistChars = blacklist.split(''); // Remove all diacritics that are not a part of a blacklisted character\n    // First char cannot be a diacritic\n\n    return str.normalize('NFD').replace(/.[\\u0300-\\u036f]+/g, function (m) {\n      return blacklistChars.indexOf(m.normalize()) > -1 ? m.normalize() : m[0];\n    });\n  }\n}\n\nvar Highlighter = createReactClass({\n  displayName: 'Highlighter',\n  count: 0,\n  propTypes: {\n    search: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.bool, RegExpPropType]).isRequired,\n    caseSensitive: PropTypes.bool,\n    ignoreDiacritics: PropTypes.bool,\n    diacriticsBlacklist: PropTypes.string,\n    matchElement: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n    matchClass: PropTypes.string,\n    matchStyle: PropTypes.object\n  },\n  render: function () {\n    var props = blacklist(this.props, 'search', 'caseSensitive', 'ignoreDiacritics', 'diacriticsBlacklist', 'matchElement', 'matchClass', 'matchStyle');\n    return React.createElement('span', props, this.renderElement(this.props.children));\n  },\n\n  /**\n   * A wrapper to the highlight method to determine when the highlighting\n   * process should occur.\n   *\n   * @param  {string} subject\n   *   The body of text that will be searched for highlighted words.\n   *\n   * @return {Array}\n   *   An array of ReactElements\n   */\n  renderElement: function (subject) {\n    if (this.isScalar() && this.hasSearch()) {\n      var search = this.getSearch();\n      return this.highlightChildren(subject, search);\n    }\n\n    return this.props.children;\n  },\n\n  /**\n   * Determine if props are valid types for processing.\n   *\n   * @return {Boolean}\n   */\n  isScalar: function () {\n    return /string|number|boolean/.test(typeof this.props.children);\n  },\n\n  /**\n   * Determine if required search prop is defined and valid.\n   *\n   * @return {Boolean}\n   */\n  hasSearch: function () {\n    return typeof this.props.search !== 'undefined' && this.props.search;\n  },\n\n  /**\n   * Get the search prop, but always in the form of a regular expression. Use\n   * this as a proxy to this.props.search for consistency.\n   *\n   * @return {RegExp}\n   */\n  getSearch: function () {\n    if (this.props.search instanceof RegExp) {\n      return this.props.search;\n    }\n\n    var flags = '';\n\n    if (!this.props.caseSensitive) {\n      flags += 'i';\n    }\n\n    var search = this.props.search;\n\n    if (typeof this.props.search === 'string') {\n      search = escapeStringRegexp(search);\n    }\n\n    if (this.props.ignoreDiacritics) {\n      search = removeDiacritics(search, this.props.diacriticsBlacklist);\n    }\n\n    return new RegExp(search, flags);\n  },\n\n  /**\n   * Get the indexes of the first and last characters of the matched string.\n   *\n   * @param  {string} subject\n   *   The string to search against.\n   *\n   * @param  {RegExp} search\n   *   The regex search query.\n   *\n   * @return {Object}\n   *   An object consisting of \"first\" and \"last\" properties representing the\n   *   indexes of the first and last characters of a matching string.\n   */\n  getMatchBoundaries: function (subject, search) {\n    var matches = search.exec(subject);\n\n    if (matches) {\n      return {\n        first: matches.index,\n        last: matches.index + matches[0].length\n      };\n    }\n  },\n\n  /**\n   * Determines which strings of text should be highlighted or not.\n   *\n   * @param  {string} subject\n   *   The body of text that will be searched for highlighted words.\n   * @param  {string} search\n   *   The search used to search for highlighted words.\n   *\n   * @return {Array}\n   *   An array of ReactElements\n   */\n  highlightChildren: function (subject, search) {\n    var children = [];\n    var remaining = subject;\n\n    while (remaining) {\n      var remainingCleaned = this.props.ignoreDiacritics ? removeDiacritics(remaining, this.props.diacriticsBlacklist) : remaining;\n\n      if (!search.test(remainingCleaned)) {\n        children.push(this.renderPlain(remaining));\n        return children;\n      }\n\n      var boundaries = this.getMatchBoundaries(remainingCleaned, search);\n\n      if (boundaries.first === 0 && boundaries.last === 0) {\n        // Regex zero-width match\n        return children;\n      } // Capture the string that leads up to a match...\n\n\n      var nonMatch = remaining.slice(0, boundaries.first);\n\n      if (nonMatch) {\n        children.push(this.renderPlain(nonMatch));\n      } // Now, capture the matching string...\n\n\n      var match = remaining.slice(boundaries.first, boundaries.last);\n\n      if (match) {\n        children.push(this.renderHighlight(match));\n      } // And if there's anything left over, recursively run this method again.\n\n\n      remaining = remaining.slice(boundaries.last);\n    }\n\n    return children;\n  },\n\n  /**\n   * Responsible for rending a non-highlighted element.\n   *\n   * @param  {string} string\n   *   A string value to wrap an element around.\n   *\n   * @return {ReactElement}\n   */\n  renderPlain: function (string) {\n    this.count++;\n    return React.createElement('span', {\n      key: this.count,\n      children: string\n    });\n  },\n\n  /**\n   * Responsible for rending a highlighted element.\n   *\n   * @param  {string} string\n   *   A string value to wrap an element around.\n   *\n   * @return {ReactElement}\n   */\n  renderHighlight: function (string) {\n    this.count++;\n    return React.createElement(this.props.matchElement, {\n      key: this.count,\n      className: this.props.matchClass,\n      style: this.props.matchStyle,\n      children: string\n    });\n  }\n});\nHighlighter.defaultProps = {\n  caseSensitive: false,\n  ignoreDiacritics: false,\n  diacriticsBlacklist: '',\n  matchElement: 'mark',\n  matchClass: 'highlight',\n  matchStyle: {}\n};\nmodule.exports = Highlighter;","map":{"version":3,"sources":["C:/Users/balwill/Documents/coding/poc-and-personal-projects/sfmc-audit-dashboard/react-ui/node_modules/react-highlighter/lib/highlighter.js"],"names":["React","require","RegExpPropType","escapeStringRegexp","blacklist","createReactClass","PropTypes","removeDiacritics","str","String","prototype","normalize","replace","blacklistChars","split","m","indexOf","Highlighter","displayName","count","propTypes","search","oneOfType","string","number","bool","isRequired","caseSensitive","ignoreDiacritics","diacriticsBlacklist","matchElement","func","matchClass","matchStyle","object","render","props","createElement","renderElement","children","subject","isScalar","hasSearch","getSearch","highlightChildren","test","RegExp","flags","getMatchBoundaries","matches","exec","first","index","last","length","remaining","remainingCleaned","push","renderPlain","boundaries","nonMatch","slice","match","renderHighlight","key","className","style","defaultProps","module","exports"],"mappings":"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","sourcesContent":["var React = require('react');\nvar RegExpPropType = require('./regExpPropType');\nvar escapeStringRegexp = require('escape-string-regexp');\nvar blacklist = require('blacklist');\nvar createReactClass = require('create-react-class');\nvar PropTypes = require('prop-types');\n\nfunction removeDiacritics(str, blacklist) {\n  if (!String.prototype.normalize) {\n    // Fall back to original string\n    return str;\n  }\n\n  if (!blacklist) {\n    // No blacklist, just remove all\n    return str.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n  }\n  else {\n    var blacklistChars = blacklist.split('');\n\n    // Remove all diacritics that are not a part of a blacklisted character\n    // First char cannot be a diacritic\n    return str.normalize('NFD').replace(/.[\\u0300-\\u036f]+/g, function(m) {\n      return blacklistChars.indexOf(m.normalize()) > -1 ? m.normalize() : m[0];\n    });\n  }\n}\n\nvar Highlighter = createReactClass({\n  displayName: 'Highlighter',\n  count: 0,\n  propTypes: {\n    search: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n      PropTypes.bool,\n      RegExpPropType\n    ]).isRequired,\n    caseSensitive: PropTypes.bool,\n    ignoreDiacritics: PropTypes.bool,\n    diacriticsBlacklist: PropTypes.string,\n    matchElement: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n    matchClass: PropTypes.string,\n    matchStyle: PropTypes.object\n  },\n\n  render: function() {\n    var props = blacklist(\n      this.props,\n      'search',\n      'caseSensitive',\n      'ignoreDiacritics',\n      'diacriticsBlacklist',\n      'matchElement',\n      'matchClass',\n      'matchStyle'\n    );\n\n    return React.createElement('span', props, this.renderElement(this.props.children));\n  },\n\n  /**\n   * A wrapper to the highlight method to determine when the highlighting\n   * process should occur.\n   *\n   * @param  {string} subject\n   *   The body of text that will be searched for highlighted words.\n   *\n   * @return {Array}\n   *   An array of ReactElements\n   */\n  renderElement: function(subject) {\n    if (this.isScalar() && this.hasSearch()) {\n      var search = this.getSearch();\n      return this.highlightChildren(subject, search);\n    }\n\n    return this.props.children;\n  },\n\n  /**\n   * Determine if props are valid types for processing.\n   *\n   * @return {Boolean}\n   */\n  isScalar: function() {\n    return (/string|number|boolean/).test(typeof this.props.children);\n  },\n\n  /**\n   * Determine if required search prop is defined and valid.\n   *\n   * @return {Boolean}\n   */\n  hasSearch: function() {\n    return (typeof this.props.search !== 'undefined') && this.props.search;\n  },\n\n  /**\n   * Get the search prop, but always in the form of a regular expression. Use\n   * this as a proxy to this.props.search for consistency.\n   *\n   * @return {RegExp}\n   */\n  getSearch: function() {\n    if (this.props.search instanceof RegExp) {\n      return this.props.search;\n    }\n\n    var flags = '';\n    if (!this.props.caseSensitive) {\n      flags +='i';\n    }\n\n    var search = this.props.search;\n    if (typeof this.props.search === 'string') {\n      search = escapeStringRegexp(search);\n    }\n\n    if (this.props.ignoreDiacritics) {\n      search = removeDiacritics(search, this.props.diacriticsBlacklist);\n    }\n\n    return new RegExp(search, flags);\n  },\n\n  /**\n   * Get the indexes of the first and last characters of the matched string.\n   *\n   * @param  {string} subject\n   *   The string to search against.\n   *\n   * @param  {RegExp} search\n   *   The regex search query.\n   *\n   * @return {Object}\n   *   An object consisting of \"first\" and \"last\" properties representing the\n   *   indexes of the first and last characters of a matching string.\n   */\n  getMatchBoundaries: function(subject, search) {\n    var matches = search.exec(subject);\n    if (matches) {\n      return {\n        first: matches.index,\n        last: matches.index + matches[0].length\n      };\n    }\n  },\n\n  /**\n   * Determines which strings of text should be highlighted or not.\n   *\n   * @param  {string} subject\n   *   The body of text that will be searched for highlighted words.\n   * @param  {string} search\n   *   The search used to search for highlighted words.\n   *\n   * @return {Array}\n   *   An array of ReactElements\n   */\n  highlightChildren: function(subject, search) {\n    var children = [];\n    var remaining = subject;\n\n    while (remaining) {\n      var remainingCleaned = (this.props.ignoreDiacritics\n        ? removeDiacritics(remaining, this.props.diacriticsBlacklist)\n        : remaining\n      );\n\n      if (!search.test(remainingCleaned)) {\n        children.push(this.renderPlain(remaining));\n        return children;\n      }\n\n      var boundaries = this.getMatchBoundaries(remainingCleaned, search);\n\n      if (boundaries.first === 0 && boundaries.last === 0) {\n        // Regex zero-width match\n        return children;\n      }\n\n      // Capture the string that leads up to a match...\n      var nonMatch = remaining.slice(0, boundaries.first);\n      if (nonMatch) {\n        children.push(this.renderPlain(nonMatch));\n      }\n\n      // Now, capture the matching string...\n      var match = remaining.slice(boundaries.first, boundaries.last);\n      if (match) {\n        children.push(this.renderHighlight(match));\n      }\n\n      // And if there's anything left over, recursively run this method again.\n      remaining = remaining.slice(boundaries.last);\n\n    }\n\n    return children;\n  },\n\n  /**\n   * Responsible for rending a non-highlighted element.\n   *\n   * @param  {string} string\n   *   A string value to wrap an element around.\n   *\n   * @return {ReactElement}\n   */\n  renderPlain: function(string) {\n    this.count++;\n    return React.createElement('span', { key: this.count, children: string });\n  },\n\n  /**\n   * Responsible for rending a highlighted element.\n   *\n   * @param  {string} string\n   *   A string value to wrap an element around.\n   *\n   * @return {ReactElement}\n   */\n  renderHighlight: function(string) {\n    this.count++;\n    return React.createElement(this.props.matchElement, {\n      key: this.count,\n      className: this.props.matchClass,\n      style: this.props.matchStyle,\n      children: string\n    });\n  }\n});\n\nHighlighter.defaultProps = {\n  caseSensitive: false,\n  ignoreDiacritics: false,\n  diacriticsBlacklist: '',\n  matchElement: 'mark',\n  matchClass: 'highlight',\n  matchStyle: {}\n};\n\nmodule.exports = Highlighter;\n"]},"metadata":{},"sourceType":"script"}