{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n// Implements the [Expression Group design pattern](https://lightningdesignsystem.com/components/expression/) in React.\n\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport assign from 'lodash.assign'; // ### shortid\n// [npmjs.com/package/shortid](https://www.npmjs.com/package/shortid)\n// shortid is a short, non-sequential, url-friendly, unique id generator\n\nimport shortid from 'shortid';\nimport { EXPRESSION_GROUP } from '../../utilities/constants';\nimport Combobox from '../combobox';\nimport Button from '../button';\nimport Input from '../input';\nvar propTypes = {\n  /**\n   *  **Assistive text for accessibility.**\n   * * `label`: For users of assistive technology, assistive text for the expression group's label.\n   * * `addCondition`: For users of assistive technology, assistive text for the Add Condition button's icon.\n   * * `addGroup`: For users of assistive technology, assistive text for the Add Group button's icon.\n   */\n  assistiveText: PropTypes.shape({\n    label: PropTypes.string,\n    addCondition: PropTypes.string,\n    addGroup: PropTypes.string\n  }),\n\n  /**\n   * HTML id for ExpressionGroup component.\n   */\n  id: PropTypes.string,\n\n  /**\n   * `ExpressionGroup` children, accepts `ExpressionCondition`. (Also accepts sub-`ExpressionGroup` if `isRoot`)\n   */\n  children: PropTypes.node,\n\n  /**\n   * CSS classes to be added to the element with class `.slds-expression__group`. Uses `classNames` [API](https://github.com/JedWatson/classnames).\n   */\n  className: PropTypes.oneOfType([PropTypes.array, PropTypes.object, PropTypes.string]),\n\n  /**\n   * Callbacks for various expression group events such as trigger change, add condition etc\n   */\n  events: PropTypes.shape({\n    onChangeTrigger: PropTypes.func,\n    onChangeCustomLogicValue: PropTypes.func,\n    onAddCondition: PropTypes.func,\n    onAddGroup: PropTypes.func\n  }),\n\n  /**\n   * If set to true, the component will focus on the first focusable input upon mounting. This is useful for accessibility when adding new groups.\n   */\n  focusOnMount: PropTypes.bool,\n\n  /**\n   * **Text labels for internationalization**\n   * This object is merged with the default props object on every render.\n   * * `addCondition`: Label for the Add Condition Button. Defaults to \"Add Condition\"\n   * * `addGroup`: Label for the Add Group Button. Defaults to \"Add Group\"\n   * * `customLogic`: Label for the text box for inputting `customLogicValue`, if the `triggerType` is `custom`. Defaults to \"Custom Logic\"\n   * * `label`: Label for the expression group, to indicate condition connectors based on the parent's trigger-type chosen. Defaults to \"\"\n   * * `takeAction`: Label for the `triggerType` selector. Defaults to \"Take Action When\"\n   * * `triggerAll`: Label for the `all` value within the trigger selector\n   * * `triggerAlways`: Label for the `always` value within the trigger selector\n   * * `triggerAny`: Label for the `any` value within the trigger selector\n   * * `triggerCustom`: Label for the `custom` value within the trigger selector\n   * * `triggerFormula`: Label for the `formula` value within the trigger selector\n   */\n  labels: PropTypes.shape({\n    addCondition: PropTypes.string,\n    addGroup: PropTypes.string,\n    customLogic: PropTypes.string,\n    label: PropTypes.string,\n    takeAction: PropTypes.string,\n    triggerAll: PropTypes.string,\n    triggerAlways: PropTypes.string,\n    triggerAny: PropTypes.string,\n    triggerCustom: PropTypes.string,\n    triggerFormula: PropTypes.string\n  }),\n\n  /**\n   * Whether the group is at root level\n   */\n  isRoot: PropTypes.bool,\n\n  /**\n   * Trigger type for the Group\n   */\n  triggerType: PropTypes.oneOf(['all', 'any', 'custom', 'always', 'formula']),\n\n  /**\n   * Sets the input for the custom logic value input box, shown if the `triggerType` is set to `custom`.\n   */\n  customLogicValue: PropTypes.string\n};\nvar defaultProps = {\n  triggerType: 'all',\n  customLogicValue: '',\n  labels: {\n    label: '',\n    takeAction: 'Take Action When',\n    customLogic: 'Custom Logic',\n    addCondition: 'Add Condition',\n    addGroup: 'Add Group',\n    triggerAll: 'All Conditions Are Met',\n    triggerAny: 'Any Condition Is Met',\n    triggerCustom: 'Custom Logic Is Met',\n    triggerAlways: 'Always (No Criteria)',\n    triggerFormula: 'Formula Evaluates To True'\n  }\n};\n/**\n * Expression Group Component\n */\n\nvar ExpressionGroup = /*#__PURE__*/function (_React$Component) {\n  _inherits(ExpressionGroup, _React$Component);\n\n  var _super = _createSuper(ExpressionGroup);\n\n  _createClass(ExpressionGroup, null, [{\n    key: \"triggerChange\",\n\n    /**\n     *  Return triggerType selected, processing the triggerType objects generated\n     */\n    value: function triggerChange(event, data) {\n      var selection = data.selection[0].id;\n      var trigger = '';\n\n      if (selection === '1') {\n        trigger = 'all';\n      } else if (selection === '2') {\n        trigger = 'any';\n      } else if (selection === '3') {\n        trigger = 'custom';\n      } else if (selection === '4') {\n        trigger = 'always';\n      } else if (selection === '5') {\n        trigger = 'formula';\n      }\n\n      return trigger;\n    }\n  }]);\n\n  function ExpressionGroup(props) {\n    var _this;\n\n    _classCallCheck(this, ExpressionGroup);\n\n    _this = _super.call(this, props);\n    _this.generatedId = shortid.generate();\n    return _this;\n  }\n\n  _createClass(ExpressionGroup, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.focusOnMount && this.rootNode) {\n        var input = this.rootNode.querySelector('input');\n\n        if (input) {\n          input.focus();\n        }\n      }\n    }\n    /**\n     * Get the Expression Group's HTML id. Generate a new one if no ID present.\n     */\n\n  }, {\n    key: \"getId\",\n    value: function getId() {\n      return this.props.id || this.generatedId;\n    }\n    /**\n     * Generate and return trigger type objects, with labels either sent as props or using default props.\n     */\n\n  }, {\n    key: \"getTriggers\",\n    value: function getTriggers() {\n      var labels = assign({}, defaultProps.labels, this.props.labels);\n      return [{\n        id: '1',\n        label: labels.triggerAll\n      }, {\n        id: '2',\n        label: labels.triggerAny\n      }, {\n        id: '3',\n        label: labels.triggerCustom\n      }, {\n        id: '4',\n        label: labels.triggerAlways\n      }, {\n        id: '5',\n        label: labels.triggerFormula\n      }];\n    }\n    /**\n     *  Returns object of trigger from trigger passed as prop\n     */\n\n  }, {\n    key: \"getTriggerSelection\",\n    value: function getTriggerSelection() {\n      var selection = this.props.triggerType;\n      var Triggers = this.getTriggers();\n      var t = [];\n\n      if (selection === 'all') {\n        // eslint-disable-next-line fp/no-mutating-methods\n        t.push(Triggers[0]);\n      } else if (selection === 'any') {\n        // eslint-disable-next-line fp/no-mutating-methods\n        t.push(Triggers[1]);\n      } else if (selection === 'custom') {\n        // eslint-disable-next-line fp/no-mutating-methods\n        t.push(Triggers[2]);\n      } else if (selection === 'always') {\n        // eslint-disable-next-line fp/no-mutating-methods\n        t.push(Triggers[3]);\n      } else if (selection === 'formula') {\n        // eslint-disable-next-line fp/no-mutating-methods\n        t.push(Triggers[4]);\n      }\n\n      return t;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var assistiveText = assign({}, defaultProps.assistiveText, this.props.assistiveText);\n      var labels = assign({}, defaultProps.labels, this.props.labels);\n      var triggerCombobox = /*#__PURE__*/React.createElement(Combobox, {\n        events: {\n          onSelect: function onSelect(event, data) {\n            return _this2.props.events.onChangeTrigger(event, {\n              triggerType: ExpressionGroup.triggerChange(event, data)\n            });\n          }\n        },\n        id: \"\".concat(this.getId(), \"-take-action-trigger\"),\n        multiple: false,\n        options: this.getTriggers(),\n        variant: \"readonly\",\n        labels: {\n          label: labels.takeAction\n        },\n        selection: this.getTriggerSelection()\n      });\n      var buttons = this.props.triggerType !== 'always' && this.props.triggerType !== 'formula' ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"slds-expression__buttons\"\n      }, /*#__PURE__*/React.createElement(Button, {\n        iconCategory: \"utility\",\n        iconName: \"add\",\n        iconPosition: \"left\",\n        id: \"\".concat(this.getId(), \"-add-condition-button\"),\n        label: labels.addCondition,\n        assistiveText: {\n          icon: assistiveText.addCondition\n        },\n        onClick: this.props.events.onAddCondition\n      }), this.props.isRoot ? /*#__PURE__*/React.createElement(Button, {\n        iconCategory: \"utility\",\n        iconName: \"add\",\n        iconPosition: \"left\",\n        id: \"\".concat(this.getId(), \"-add-group-button\"),\n        label: labels.addGroup,\n        assistiveText: {\n          icon: assistiveText.addGroup\n        },\n        onClick: this.props.events.onAddGroup\n      }) : null) : null;\n      var body = null;\n\n      if (this.props.triggerType !== 'always') {\n        if (this.props.isRoot && this.props.triggerType === 'formula') {\n          body = this.props.children;\n        } else {\n          body = /*#__PURE__*/React.createElement(React.Fragment, null, this.props.triggerType === 'custom' ? /*#__PURE__*/React.createElement(Input, {\n            label: labels.customLogic,\n            className: \"slds-expression__custom-logic\",\n            id: \"\".concat(this.getId(), \"-custom-logic-input\"),\n            value: this.props.customLogicValue,\n            variant: \"base\",\n            onChange: this.props.events.onChangeCustomLogicValue\n          }) : null, /*#__PURE__*/React.createElement(\"ul\", null, this.props.children));\n        }\n      }\n\n      if (this.props.isRoot) {\n        if (this.props.triggerType === 'formula') {\n          return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n            className: \"slds-expression__options\"\n          }, triggerCombobox), body);\n        }\n\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: classNames(this.props.className),\n          id: this.getId()\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"slds-expression__options\"\n        }, triggerCombobox), body, buttons);\n      }\n\n      return /*#__PURE__*/React.createElement(\"li\", {\n        className: classNames('slds-expression__group', this.props.className),\n        id: this.getId(),\n        ref: function ref(rootNode) {\n          _this2.rootNode = rootNode;\n        }\n      }, /*#__PURE__*/React.createElement(\"fieldset\", null, /*#__PURE__*/React.createElement(\"legend\", {\n        className: \"slds-expression__legend slds-expression__legend_group\"\n      }, /*#__PURE__*/React.createElement(\"span\", null, labels.label), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"slds-assistive-text\"\n      }, assistiveText.label)), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"slds-expression__options\"\n      }, triggerCombobox), body, buttons));\n    }\n  }]);\n\n  return ExpressionGroup;\n}(React.Component);\n\nExpressionGroup.displayName = EXPRESSION_GROUP;\nExpressionGroup.propTypes = propTypes;\nExpressionGroup.defaultProps = defaultProps;\nexport default ExpressionGroup;","map":{"version":3,"sources":["../../../.tmp-es/components/expression/group.jsx"],"names":["propTypes","assistiveText","label","PropTypes","addCondition","addGroup","string","id","children","className","events","onChangeTrigger","onChangeCustomLogicValue","onAddCondition","onAddGroup","func","focusOnMount","labels","customLogic","takeAction","triggerAll","triggerAlways","triggerAny","triggerCustom","triggerFormula","isRoot","triggerType","customLogicValue","defaultProps","ExpressionGroup","React","Component","event","data","selection","trigger","shortid","input","assign","Triggers","t","triggerCombobox","onSelect","buttons","icon","body","classNames"],"mappings":"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","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// Implements the [Expression Group design pattern](https://lightningdesignsystem.com/components/expression/) in React.\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport assign from 'lodash.assign';\n\n// ### shortid\n// [npmjs.com/package/shortid](https://www.npmjs.com/package/shortid)\n// shortid is a short, non-sequential, url-friendly, unique id generator\nimport shortid from 'shortid';\n\nimport { EXPRESSION_GROUP } from '../../utilities/constants';\n\nimport Combobox from '../combobox';\nimport Button from '../button';\nimport Input from '../input';\n\nconst propTypes = {\n\t/**\n\t *  **Assistive text for accessibility.**\n\t * * `label`: For users of assistive technology, assistive text for the expression group's label.\n\t * * `addCondition`: For users of assistive technology, assistive text for the Add Condition button's icon.\n\t * * `addGroup`: For users of assistive technology, assistive text for the Add Group button's icon.\n\t */\n\tassistiveText: PropTypes.shape({\n\t\tlabel: PropTypes.string,\n\t\taddCondition: PropTypes.string,\n\t\taddGroup: PropTypes.string,\n\t}),\n\t/**\n\t * HTML id for ExpressionGroup component.\n\t */\n\tid: PropTypes.string,\n\t/**\n\t * `ExpressionGroup` children, accepts `ExpressionCondition`. (Also accepts sub-`ExpressionGroup` if `isRoot`)\n\t */\n\tchildren: PropTypes.node,\n\t/**\n\t * CSS classes to be added to the element with class `.slds-expression__group`. Uses `classNames` [API](https://github.com/JedWatson/classnames).\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * Callbacks for various expression group events such as trigger change, add condition etc\n\t */\n\tevents: PropTypes.shape({\n\t\tonChangeTrigger: PropTypes.func,\n\t\tonChangeCustomLogicValue: PropTypes.func,\n\t\tonAddCondition: PropTypes.func,\n\t\tonAddGroup: PropTypes.func,\n\t}),\n\t/**\n\t * If set to true, the component will focus on the first focusable input upon mounting. This is useful for accessibility when adding new groups.\n\t */\n\tfocusOnMount: PropTypes.bool,\n\t/**\n\t * **Text labels for internationalization**\n\t * This object is merged with the default props object on every render.\n\t * * `addCondition`: Label for the Add Condition Button. Defaults to \"Add Condition\"\n\t * * `addGroup`: Label for the Add Group Button. Defaults to \"Add Group\"\n\t * * `customLogic`: Label for the text box for inputting `customLogicValue`, if the `triggerType` is `custom`. Defaults to \"Custom Logic\"\n\t * * `label`: Label for the expression group, to indicate condition connectors based on the parent's trigger-type chosen. Defaults to \"\"\n\t * * `takeAction`: Label for the `triggerType` selector. Defaults to \"Take Action When\"\n\t * * `triggerAll`: Label for the `all` value within the trigger selector\n\t * * `triggerAlways`: Label for the `always` value within the trigger selector\n\t * * `triggerAny`: Label for the `any` value within the trigger selector\n\t * * `triggerCustom`: Label for the `custom` value within the trigger selector\n\t * * `triggerFormula`: Label for the `formula` value within the trigger selector\n\t */\n\tlabels: PropTypes.shape({\n\t\taddCondition: PropTypes.string,\n\t\taddGroup: PropTypes.string,\n\t\tcustomLogic: PropTypes.string,\n\t\tlabel: PropTypes.string,\n\t\ttakeAction: PropTypes.string,\n\t\ttriggerAll: PropTypes.string,\n\t\ttriggerAlways: PropTypes.string,\n\t\ttriggerAny: PropTypes.string,\n\t\ttriggerCustom: PropTypes.string,\n\t\ttriggerFormula: PropTypes.string,\n\t}),\n\t/**\n\t * Whether the group is at root level\n\t */\n\tisRoot: PropTypes.bool,\n\t/**\n\t * Trigger type for the Group\n\t */\n\ttriggerType: PropTypes.oneOf(['all', 'any', 'custom', 'always', 'formula']),\n\t/**\n\t * Sets the input for the custom logic value input box, shown if the `triggerType` is set to `custom`.\n\t */\n\tcustomLogicValue: PropTypes.string,\n};\n\nconst defaultProps = {\n\ttriggerType: 'all',\n\tcustomLogicValue: '',\n\tlabels: {\n\t\tlabel: '',\n\t\ttakeAction: 'Take Action When',\n\t\tcustomLogic: 'Custom Logic',\n\t\taddCondition: 'Add Condition',\n\t\taddGroup: 'Add Group',\n\t\ttriggerAll: 'All Conditions Are Met',\n\t\ttriggerAny: 'Any Condition Is Met',\n\t\ttriggerCustom: 'Custom Logic Is Met',\n\t\ttriggerAlways: 'Always (No Criteria)',\n\t\ttriggerFormula: 'Formula Evaluates To True',\n\t},\n};\n\n/**\n * Expression Group Component\n */\nclass ExpressionGroup extends React.Component {\n\t/**\n\t *  Return triggerType selected, processing the triggerType objects generated\n\t */\n\tstatic triggerChange(event, data) {\n\t\tconst selection = data.selection[0].id;\n\t\tlet trigger = '';\n\t\tif (selection === '1') {\n\t\t\ttrigger = 'all';\n\t\t} else if (selection === '2') {\n\t\t\ttrigger = 'any';\n\t\t} else if (selection === '3') {\n\t\t\ttrigger = 'custom';\n\t\t} else if (selection === '4') {\n\t\t\ttrigger = 'always';\n\t\t} else if (selection === '5') {\n\t\t\ttrigger = 'formula';\n\t\t}\n\t\treturn trigger;\n\t}\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.generatedId = shortid.generate();\n\t}\n\n\tcomponentDidMount() {\n\t\tif (this.props.focusOnMount && this.rootNode) {\n\t\t\tconst input = this.rootNode.querySelector('input');\n\t\t\tif (input) {\n\t\t\t\tinput.focus();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get the Expression Group's HTML id. Generate a new one if no ID present.\n\t */\n\tgetId() {\n\t\treturn this.props.id || this.generatedId;\n\t}\n\n\t/**\n\t * Generate and return trigger type objects, with labels either sent as props or using default props.\n\t */\n\tgetTriggers() {\n\t\tconst labels = assign({}, defaultProps.labels, this.props.labels);\n\t\treturn [\n\t\t\t{ id: '1', label: labels.triggerAll },\n\t\t\t{ id: '2', label: labels.triggerAny },\n\t\t\t{ id: '3', label: labels.triggerCustom },\n\t\t\t{ id: '4', label: labels.triggerAlways },\n\t\t\t{ id: '5', label: labels.triggerFormula },\n\t\t];\n\t}\n\n\t/**\n\t *  Returns object of trigger from trigger passed as prop\n\t */\n\tgetTriggerSelection() {\n\t\tconst selection = this.props.triggerType;\n\t\tconst Triggers = this.getTriggers();\n\t\tconst t = [];\n\t\tif (selection === 'all') {\n\t\t\t// eslint-disable-next-line fp/no-mutating-methods\n\t\t\tt.push(Triggers[0]);\n\t\t} else if (selection === 'any') {\n\t\t\t// eslint-disable-next-line fp/no-mutating-methods\n\t\t\tt.push(Triggers[1]);\n\t\t} else if (selection === 'custom') {\n\t\t\t// eslint-disable-next-line fp/no-mutating-methods\n\t\t\tt.push(Triggers[2]);\n\t\t} else if (selection === 'always') {\n\t\t\t// eslint-disable-next-line fp/no-mutating-methods\n\t\t\tt.push(Triggers[3]);\n\t\t} else if (selection === 'formula') {\n\t\t\t// eslint-disable-next-line fp/no-mutating-methods\n\t\t\tt.push(Triggers[4]);\n\t\t}\n\t\treturn t;\n\t}\n\n\trender() {\n\t\tconst assistiveText = assign(\n\t\t\t{},\n\t\t\tdefaultProps.assistiveText,\n\t\t\tthis.props.assistiveText\n\t\t);\n\t\tconst labels = assign({}, defaultProps.labels, this.props.labels);\n\n\t\tconst triggerCombobox = (\n\t\t\t<Combobox\n\t\t\t\tevents={{\n\t\t\t\t\tonSelect: (event, data) =>\n\t\t\t\t\t\tthis.props.events.onChangeTrigger(event, {\n\t\t\t\t\t\t\ttriggerType: ExpressionGroup.triggerChange(event, data),\n\t\t\t\t\t\t}),\n\t\t\t\t}}\n\t\t\t\tid={`${this.getId()}-take-action-trigger`}\n\t\t\t\tmultiple={false}\n\t\t\t\toptions={this.getTriggers()}\n\t\t\t\tvariant=\"readonly\"\n\t\t\t\tlabels={{ label: labels.takeAction }}\n\t\t\t\tselection={this.getTriggerSelection()}\n\t\t\t/>\n\t\t);\n\n\t\tconst buttons =\n\t\t\tthis.props.triggerType !== 'always' &&\n\t\t\tthis.props.triggerType !== 'formula' ? (\n\t\t\t\t<div className=\"slds-expression__buttons\">\n\t\t\t\t\t<Button\n\t\t\t\t\t\ticonCategory=\"utility\"\n\t\t\t\t\t\ticonName=\"add\"\n\t\t\t\t\t\ticonPosition=\"left\"\n\t\t\t\t\t\tid={`${this.getId()}-add-condition-button`}\n\t\t\t\t\t\tlabel={labels.addCondition}\n\t\t\t\t\t\tassistiveText={{ icon: assistiveText.addCondition }}\n\t\t\t\t\t\tonClick={this.props.events.onAddCondition}\n\t\t\t\t\t/>\n\t\t\t\t\t{this.props.isRoot ? (\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\ticonCategory=\"utility\"\n\t\t\t\t\t\t\ticonName=\"add\"\n\t\t\t\t\t\t\ticonPosition=\"left\"\n\t\t\t\t\t\t\tid={`${this.getId()}-add-group-button`}\n\t\t\t\t\t\t\tlabel={labels.addGroup}\n\t\t\t\t\t\t\tassistiveText={{ icon: assistiveText.addGroup }}\n\t\t\t\t\t\t\tonClick={this.props.events.onAddGroup}\n\t\t\t\t\t\t/>\n\t\t\t\t\t) : null}\n\t\t\t\t</div>\n\t\t\t) : null;\n\n\t\tlet body = null;\n\n\t\tif (this.props.triggerType !== 'always') {\n\t\t\tif (this.props.isRoot && this.props.triggerType === 'formula') {\n\t\t\t\tbody = this.props.children;\n\t\t\t} else {\n\t\t\t\tbody = (\n\t\t\t\t\t<React.Fragment>\n\t\t\t\t\t\t{this.props.triggerType === 'custom' ? (\n\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\tlabel={labels.customLogic}\n\t\t\t\t\t\t\t\tclassName=\"slds-expression__custom-logic\"\n\t\t\t\t\t\t\t\tid={`${this.getId()}-custom-logic-input`}\n\t\t\t\t\t\t\t\tvalue={this.props.customLogicValue}\n\t\t\t\t\t\t\t\tvariant=\"base\"\n\t\t\t\t\t\t\t\tonChange={this.props.events.onChangeCustomLogicValue}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t<ul>{this.props.children}</ul>\n\t\t\t\t\t</React.Fragment>\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (this.props.isRoot) {\n\t\t\tif (this.props.triggerType === 'formula') {\n\t\t\t\treturn (\n\t\t\t\t\t<React.Fragment>\n\t\t\t\t\t\t<div className=\"slds-expression__options\">{triggerCombobox}</div>\n\t\t\t\t\t\t{body}\n\t\t\t\t\t</React.Fragment>\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn (\n\t\t\t\t<div className={classNames(this.props.className)} id={this.getId()}>\n\t\t\t\t\t<div className=\"slds-expression__options\">{triggerCombobox}</div>\n\t\t\t\t\t{body}\n\t\t\t\t\t{buttons}\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\n\t\treturn (\n\t\t\t<li\n\t\t\t\tclassName={classNames('slds-expression__group', this.props.className)}\n\t\t\t\tid={this.getId()}\n\t\t\t\tref={(rootNode) => {\n\t\t\t\t\tthis.rootNode = rootNode;\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<fieldset>\n\t\t\t\t\t<legend className=\"slds-expression__legend slds-expression__legend_group\">\n\t\t\t\t\t\t<span>{labels.label}</span>\n\t\t\t\t\t\t<span className=\"slds-assistive-text\">{assistiveText.label}</span>\n\t\t\t\t\t</legend>\n\t\t\t\t\t<div className=\"slds-expression__options\">{triggerCombobox}</div>\n\t\t\t\t\t{body}\n\t\t\t\t\t{buttons}\n\t\t\t\t</fieldset>\n\t\t\t</li>\n\t\t);\n\t}\n}\n\nExpressionGroup.displayName = EXPRESSION_GROUP;\nExpressionGroup.propTypes = propTypes;\nExpressionGroup.defaultProps = defaultProps;\n\nexport default ExpressionGroup;\n"]},"metadata":{},"sourceType":"module"}