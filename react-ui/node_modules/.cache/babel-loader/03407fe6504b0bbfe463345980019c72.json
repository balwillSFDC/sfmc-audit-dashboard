{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n\nimport React from 'react';\nimport PropTypes from 'prop-types'; // ### classNames\n// [github.com/JedWatson/classnames](https://github.com/JedWatson/classnames)\n// This project uses `classnames`, 'a simple javascript utility for conditionally\n// joining classNames together.'\n\nimport classNames from 'classnames'; // Child component\n\nimport Tooltip from '../../tooltip';\nimport { PROGRESS_INDICATOR_STEP } from '../../../utilities/constants';\nimport ButtonIcon from '../../icon/button-icon'; // ### Display Name\n\nvar displayName = PROGRESS_INDICATOR_STEP; // ### Prop Types\n\nvar propTypes = {\n  /**\n   * **Assistive text for accessibility**\n   * This object is merged with the default props object on every render.\n   * * `completedStep`: Label for a completed step. The default is `Completed Step`\n   * * `disabledStep`: Label for disabled step. The default is `Disabled Step`\n   * * `errorStep`: Label for a step with an error. The default is `Error Step`\n   * * `percentage`: Label for Progress Bar. The default is `Progress: [this.props.value]%`. You will need to calculate the percentage yourself if changing this string.\n   * * `step`: Label for a step. It will be typically followed by the number of the step such as \"Step 1\".\n   */\n  assistiveText: PropTypes.shape({\n    completedStep: PropTypes.string,\n    disabledStep: PropTypes.string,\n    percentage: PropTypes.string,\n    step: PropTypes.string\n  }),\n\n  /**\n   * Id for Steps, ranging in [0, steps.length).\n   */\n  id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * Index of step. Used for id's if no step ID exists\n   */\n  index: PropTypes.number,\n\n  /**\n   * Determines if the step has been completed\n   */\n  isCompleted: PropTypes.bool,\n\n  /**\n   * Determines if the step has been disabled\n   */\n  isDisabled: PropTypes.bool,\n\n  /**\n   * Determines if the step contains an error\n   */\n  isError: PropTypes.bool,\n\n  /**\n   * Determines if the step is currently selected (active)\n   */\n  isSelected: PropTypes.bool,\n\n  /**\n   * Label of tooltip attached to the step if applicable.\n   */\n  label: PropTypes.node,\n\n  /**\n   * Triggered when click on individual steps. By default, it receives an event and returns all info passed to that step.\n   * users are able to re-define it by passing a function as a prop\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * Triggered when focus on individual steps. By default, it receives an event and returns all info passed to that step.\n   * users are able to re-define it by passing a function as a prop\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * Step object. This is passed into event callbacks.\n   */\n  step: PropTypes.object,\n\n  /**\n   * Determines if the tooltip attached to step is always open.\n   * This is mainly for dev test purpose.\n   * Usually the tooltip should only show when hover.\n   */\n  tooltipIsOpen: PropTypes.bool,\n\n  /**\n   * Please select one of the following:\n   * * `absolute` - (default if `variant` is `modal`) The dialog will use `position: absolute` and style attributes to position itself. This allows inverted placement or flipping of the dialog.\n   * * `overflowBoundaryElement` - (default if `variant` is `base`) The dialog will overflow scrolling parents. Use on elements that are aligned to the left or right of their target and don't care about the target being within a scrolling parent. Typically this is a popover or tooltip. Dropdown menus can usually open up and down if no room exists. In order to achieve this a portal element will be created and attached to `body`. This element will render into that detached render tree.\n   * * `relative` - No styling or portals will be used. Menus will be positioned relative to their triggers. This is a great choice for HTML snapshot testing.\n   */\n  tooltipPosition: PropTypes.oneOf(['absolute', 'overflowBoundaryElement', 'relative'])\n};\n/**\n * Step renders a button icon and its tooltip if applied.\n * The button is applied with different css classes under different conditions.\n * Button icons have 4 types of status: completed (success), active (in progress), error (warning) and uncompleted (not approached)\n */\n\nvar Step = /*#__PURE__*/function (_React$Component) {\n  _inherits(Step, _React$Component);\n\n  var _super = _createSuper(Step);\n\n  function Step() {\n    _classCallCheck(this, Step);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Step, [{\n    key: \"buttonIcon\",\n\n    /**\n     * buttonIcon represents the button icon used for each step.\n     * the button is applied with different css classes under different conditions.\n     */\n    value: function buttonIcon(renderIcon, status, props) {\n      var data = {\n        isSelected: props.isSelected,\n        isError: props.isError,\n        isCompleted: props.isCompleted,\n        isDisabled: props.isDisabled,\n        step: props.step\n      };\n      var icon = renderIcon ? /*#__PURE__*/React.createElement(ButtonIcon, {\n        category: \"utility\",\n        name: this.props.isError ? 'error' : 'success'\n      }) : null;\n\n      var handleClick = function handleClick(event) {\n        return props.onClick(event, data);\n      };\n\n      var handleFocus = function handleFocus(event) {\n        return props.onFocus(event, data);\n      };\n\n      var stepButton = props.isDisabled ? /*#__PURE__*/React.createElement(\"a\", {\n        className: classNames('slds-button', {\n          'slds-button_icon': renderIcon\n        }, 'slds-progress__marker', {\n          'slds-progress__marker_icon': renderIcon\n        }, 'slds-is-disabled'),\n        \"aria-disabled\": true,\n        \"aria-describedby\": \"progress-indicator-tooltip-\".concat(this.props.step.id || this.props.index),\n        style: {\n          cursor: 'not-allowed'\n        },\n        tabIndex: 0,\n        role: \"button\"\n      }, icon, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"slds-assistive-text\"\n      }, this.props.step.assistiveText || /*#__PURE__*/React.createElement(React.Fragment, null, \"\".concat(props.assistiveText.step, \" \").concat(props.index + 1, \": \"), props.step.label, \"- \".concat(status)))) : /*#__PURE__*/React.createElement(\"button\", {\n        className: classNames('slds-button', {\n          'slds-button_icon': renderIcon\n        }, 'slds-progress__marker', {\n          'slds-progress__marker_icon': renderIcon\n        }),\n        onClick: handleClick,\n        onFocus: handleFocus,\n        \"aria-describedby\": \"progress-indicator-tooltip-\".concat(this.props.step.id || this.props.index),\n        \"aria-current\": this.props.isSelected ? 'step' : null,\n        type: \"button\"\n      }, icon, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"slds-assistive-text\"\n      }, this.props.step.assistiveText || /*#__PURE__*/React.createElement(React.Fragment, null, \"\".concat(props.assistiveText.step, \" \").concat(props.index + 1, \": \"), props.step.label, status ? \" - \".concat(status) : '')));\n      return stepButton;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var renderIcon = this.props.isCompleted || this.props.isError;\n      var status = '';\n\n      if (this.props.isError) {\n        status = this.props.assistiveText.errorStep;\n      } else if (this.props.isCompleted) {\n        status = this.props.assistiveText.completedStep;\n      } else if (this.props.isDisabled) {\n        status = this.props.assistiveText.disabledStep;\n      }\n\n      var tooltipProps = {\n        align: 'top',\n        id: \"progress-indicator-tooltip-\".concat(this.props.step.id || this.props.index),\n        content: this.props.step.label,\n        theme: 'info',\n        position: this.props.tooltipPosition,\n        triggerStyle: {\n          display: !renderIcon ? 'flex' : ''\n        }\n      }; // This is mainly for dev test purpose.\n      // `isOpen` is only set to true if tooltip is specified to be open\n      // Do not set isOpen to false or undefined otherwise, because that will\n      // disable any interaction with tooltips\n\n      if (this.props.tooltipIsOpen) {\n        tooltipProps.isOpen = true;\n      }\n\n      return /*#__PURE__*/React.createElement(\"li\", {\n        className: classNames('slds-progress__item', {\n          'slds-is-completed': this.props.isCompleted,\n          'slds-is-active': this.props.isSelected && !this.props.isError,\n          'slds-has-error': this.props.isError\n        })\n      }, /*#__PURE__*/React.createElement(Tooltip, tooltipProps, this.buttonIcon(renderIcon, status, this.props)));\n    }\n  }]);\n\n  return Step;\n}(React.Component);\n\nStep.propTypes = propTypes;\nStep.displayName = displayName;\nexport default Step; // export is replaced with `ReactDOM.render(<Example />, mountNode);` at runtime","map":{"version":3,"sources":["../../../../.tmp-es/components/progress-indicator/private/step.jsx"],"names":["displayName","propTypes","assistiveText","completedStep","PropTypes","disabledStep","percentage","step","string","id","index","isCompleted","isDisabled","isError","isSelected","label","onClick","onFocus","tooltipIsOpen","tooltipPosition","Step","React","Component","renderIcon","status","props","data","icon","handleClick","handleFocus","stepButton","classNames","cursor","tooltipProps","align","content","theme","position","triggerStyle","display"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;AACA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA,C,CAEA;AACA;AACA;AACA;;AACA,OAAA,UAAA,MAAA,YAAA,C,CAEA;;AACA,OAAA,OAAA,MAAA,eAAA;AACA,SAAA,uBAAA,QAAA,8BAAA;AACA,OAAA,UAAA,MAAA,wBAAA,C,CAEA;;AACA,IAAMA,WAAW,GAAjB,uBAAA,C,CAEA;;AACA,IAAMC,SAAS,GAAG;AACjB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACCC,EAAAA,aAAa,EAAE,SAAS,CAAT,KAAA,CAAgB;AAC9BC,IAAAA,aAAa,EAAEC,SAAS,CADM,MAAA;AAE9BC,IAAAA,YAAY,EAAED,SAAS,CAFO,MAAA;AAG9BE,IAAAA,UAAU,EAAEF,SAAS,CAHS,MAAA;AAI9BG,IAAAA,IAAI,EAAEH,SAAS,CAACI;AAJc,GAAhB,CAVE;;AAgBjB;AACD;AACA;AACCC,EAAAA,EAAE,EAAEL,SAAS,CAATA,SAAAA,CAAoB,CAACA,SAAS,CAAV,MAAA,EAAmBA,SAAS,CAnBnC,MAmBO,CAApBA,CAnBa;;AAoBjB;AACD;AACA;AACCM,EAAAA,KAAK,EAAEN,SAAS,CAvBC,MAAA;;AAwBjB;AACD;AACA;AAECO,EAAAA,WAAW,EAAEP,SAAS,CA5BL,IAAA;;AA6BjB;AACD;AACA;AACCQ,EAAAA,UAAU,EAAER,SAAS,CAhCJ,IAAA;;AAiCjB;AACD;AACA;AACCS,EAAAA,OAAO,EAAET,SAAS,CApCD,IAAA;;AAqCjB;AACD;AACA;AACCU,EAAAA,UAAU,EAAEV,SAAS,CAxCJ,IAAA;;AAyCjB;AACD;AACA;AACCW,EAAAA,KAAK,EAAEX,SAAS,CA5CC,IAAA;;AA6CjB;AACD;AACA;AACA;AACCY,EAAAA,OAAO,EAAEZ,SAAS,CAjDD,IAAA;;AAkDjB;AACD;AACA;AACA;AACCa,EAAAA,OAAO,EAAEb,SAAS,CAtDD,IAAA;;AAuDjB;AACD;AACA;AACCG,EAAAA,IAAI,EAAEH,SAAS,CA1DE,MAAA;;AA2DjB;AACD;AACA;AACA;AACA;AACCc,EAAAA,aAAa,EAAEd,SAAS,CAhEP,IAAA;;AAiEjB;AACD;AACA;AACA;AACA;AACA;AACCe,EAAAA,eAAe,EAAEf,SAAS,CAATA,KAAAA,CAAgB,CAAA,UAAA,EAAA,yBAAA,EAAhBA,UAAgB,CAAhBA;AAvEA,CAAlB;AA8EA;AACA;AACA;AACA;AACA;;IACMgB,I;;;;;;;;;;;;;;AACL;AACD;AACA;AACA;+BACYG,U,EAAYC,M,EAAQC,K,EAAO;AACrC,UAAMC,IAAI,GAAG;AACZZ,QAAAA,UAAU,EAAEW,KAAK,CADL,UAAA;AAEZZ,QAAAA,OAAO,EAAEY,KAAK,CAFF,OAAA;AAGZd,QAAAA,WAAW,EAAEc,KAAK,CAHN,WAAA;AAIZb,QAAAA,UAAU,EAAEa,KAAK,CAJL,UAAA;AAKZlB,QAAAA,IAAI,EAAEkB,KAAK,CAAClB;AALA,OAAb;AAQA,UAAMoB,IAAI,GAAGJ,UAAU,GAAA,aACtB,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA;AACC,QAAA,QAAQ,EADT,SAAA;AAEC,QAAA,IAAI,EAAE,KAAA,KAAA,CAAA,OAAA,GAAA,OAAA,GAA+B;AAFtC,OAAA,CADsB,GAAvB,IAAA;;AAOA,UAAMK,WAAW,GAAG,SAAdA,WAAc,CAAA,KAAA,EAAA;AAAA,eAAWH,KAAK,CAALA,OAAAA,CAAAA,KAAAA,EAAX,IAAWA,CAAX;AAApB,OAAA;;AACA,UAAMI,WAAW,GAAG,SAAdA,WAAc,CAAA,KAAA,EAAA;AAAA,eAAWJ,KAAK,CAALA,OAAAA,CAAAA,KAAAA,EAAX,IAAWA,CAAX;AAApB,OAAA;;AAEA,UAAMK,UAAU,GAAGL,KAAK,CAALA,UAAAA,GAAAA,aAClB,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA;AACC,QAAA,SAAS,EAAEM,UAAU,CAAA,aAAA,EAEpB;AAAE,8BAAoBR;AAAtB,SAFoB,EAAA,uBAAA,EAIpB;AAAE,wCAA8BA;AAAhC,SAJoB,EADtB,kBACsB,CADtB;AAQC,yBARD,IAAA;AASC,4BAAA,8BAAA,MAAA,CACC,KAAA,KAAA,CAAA,IAAA,CAAA,EAAA,IAAsB,KAAA,KAAA,CAVxB,KASC,CATD;AAYC,QAAA,KAAK,EAAE;AAAES,UAAAA,MAAM,EAAE;AAAV,SAZR;AAaC,QAAA,QAAQ,EAbT,CAAA;AAcC,QAAA,IAAI,EAAC;AAdN,OAAA,EAAA,IAAA,EAAA,aAiBC,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,QAAA,SAAS,EAAC;AAAhB,OAAA,EACE,KAAA,KAAA,CAAA,IAAA,CAAA,aAAA,IAAA,aACA,KAAA,CAAA,aAAA,CAAC,KAAD,CAAA,QAAA,EAAA,IAAA,EAAA,GAAA,MAAA,CACKP,KAAK,CAALA,aAAAA,CADL,IAAA,EAAA,GAAA,EAAA,MAAA,CACiCA,KAAK,CAALA,KAAAA,GADjC,CAAA,EAAA,IAAA,CAAA,EAEEA,KAAK,CAALA,IAAAA,CAFF,KAAA,EAAA,KAAA,MAAA,CApBeA,MAoBf,CAAA,CAFF,CAjBD,CADkBA,GAAAA,aA6BlB,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA;AACC,QAAA,SAAS,EAAEM,UAAU,CAAA,aAAA,EAEpB;AAAE,8BAAoBR;AAAtB,SAFoB,EAAA,uBAAA,EAIpB;AAAE,wCAA8BA;AAAhC,SAJoB,CADtB;AAOC,QAAA,OAAO,EAPR,WAAA;AAQC,QAAA,OAAO,EARR,WAAA;AASC,4BAAA,8BAAA,MAAA,CACC,KAAA,KAAA,CAAA,IAAA,CAAA,EAAA,IAAsB,KAAA,KAAA,CAVxB,KASC,CATD;AAYC,wBAAc,KAAA,KAAA,CAAA,UAAA,GAAA,MAAA,GAZf,IAAA;AAaC,QAAA,IAAI,EAAC;AAbN,OAAA,EAAA,IAAA,EAAA,aAgBC,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,QAAA,SAAS,EAAC;AAAhB,OAAA,EACE,KAAA,KAAA,CAAA,IAAA,CAAA,aAAA,IAAA,aACA,KAAA,CAAA,aAAA,CAAC,KAAD,CAAA,QAAA,EAAA,IAAA,EAAA,GAAA,MAAA,CACKE,KAAK,CAALA,aAAAA,CADL,IAAA,EAAA,GAAA,EAAA,MAAA,CACiCA,KAAK,CAALA,KAAAA,GADjC,CAAA,EAAA,IAAA,CAAA,EAEEA,KAAK,CAALA,IAAAA,CAFF,KAAA,EAGED,MAAM,GAAA,MAAA,MAAA,CAAA,MAAA,CAAA,GAlDZ,EA+CI,CAFF,CAhBD,CA7BD;AAyDA,aAAA,UAAA;AACA;;;6BAEQ;AACR,UAAMD,UAAU,GAAG,KAAA,KAAA,CAAA,WAAA,IAA0B,KAAA,KAAA,CAA7C,OAAA;AACA,UAAIC,MAAM,GAAV,EAAA;;AACA,UAAI,KAAA,KAAA,CAAJ,OAAA,EAAwB;AACvBA,QAAAA,MAAM,GAAG,KAAA,KAAA,CAAA,aAAA,CAATA,SAAAA;AADD,OAAA,MAEO,IAAI,KAAA,KAAA,CAAJ,WAAA,EAA4B;AAClCA,QAAAA,MAAM,GAAG,KAAA,KAAA,CAAA,aAAA,CAATA,aAAAA;AADM,OAAA,MAEA,IAAI,KAAA,KAAA,CAAJ,UAAA,EAA2B;AACjCA,QAAAA,MAAM,GAAG,KAAA,KAAA,CAAA,aAAA,CAATA,YAAAA;AACA;;AAED,UAAMS,YAAY,GAAG;AACpBC,QAAAA,KAAK,EADe,KAAA;AAEpBzB,QAAAA,EAAE,EAAA,8BAAA,MAAA,CACD,KAAA,KAAA,CAAA,IAAA,CAAA,EAAA,IAAsB,KAAA,KAAA,CAHH,KAElB,CAFkB;AAKpB0B,QAAAA,OAAO,EAAE,KAAA,KAAA,CAAA,IAAA,CALW,KAAA;AAMpBC,QAAAA,KAAK,EANe,MAAA;AAOpBC,QAAAA,QAAQ,EAAE,KAAA,KAAA,CAPU,eAAA;AAQpBC,QAAAA,YAAY,EAAE;AAAEC,UAAAA,OAAO,EAAE,CAAA,UAAA,GAAA,MAAA,GAAuB;AAAlC;AARM,OAArB,CAXQ,CAsBR;AACA;AACA;AACA;;AACA,UAAI,KAAA,KAAA,CAAJ,aAAA,EAA8B;AAC7BN,QAAAA,YAAY,CAAZA,MAAAA,GAAAA,IAAAA;AACA;;AAED,aAAA,aACC,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AACC,QAAA,SAAS,EAAEF,UAAU,CAAA,qBAAA,EAAwB;AAC5C,+BAAqB,KAAA,KAAA,CADuB,WAAA;AAE5C,4BAAkB,KAAA,KAAA,CAAA,UAAA,IAAyB,CAAC,KAAA,KAAA,CAFA,OAAA;AAG5C,4BAAkB,KAAA,KAAA,CAAWlB;AAHe,SAAxB;AADtB,OAAA,EAAA,aAOC,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA,YAAA,EACE,KAAA,UAAA,CAAA,UAAA,EAAA,MAAA,EAAoC,KATxC,KASI,CADF,CAPD,CADD;AAaA;;;;EA/HiBQ,KAAK,CAACC,S;;AAkIzBF,IAAI,CAAJA,SAAAA,GAAAA,SAAAA;AACAA,IAAI,CAAJA,WAAAA,GAAAA,WAAAA;AAEA,eAAA,IAAA,C,CAAqB","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n// ### classNames\n// [github.com/JedWatson/classnames](https://github.com/JedWatson/classnames)\n// This project uses `classnames`, 'a simple javascript utility for conditionally\n// joining classNames together.'\nimport classNames from 'classnames';\n\n// Child component\nimport Tooltip from '../../tooltip';\nimport { PROGRESS_INDICATOR_STEP } from '../../../utilities/constants';\nimport ButtonIcon from '../../icon/button-icon';\n\n// ### Display Name\nconst displayName = PROGRESS_INDICATOR_STEP;\n\n// ### Prop Types\nconst propTypes = {\n\t/**\n\t * **Assistive text for accessibility**\n\t * This object is merged with the default props object on every render.\n\t * * `completedStep`: Label for a completed step. The default is `Completed Step`\n\t * * `disabledStep`: Label for disabled step. The default is `Disabled Step`\n\t * * `errorStep`: Label for a step with an error. The default is `Error Step`\n\t * * `percentage`: Label for Progress Bar. The default is `Progress: [this.props.value]%`. You will need to calculate the percentage yourself if changing this string.\n\t * * `step`: Label for a step. It will be typically followed by the number of the step such as \"Step 1\".\n\t */\n\tassistiveText: PropTypes.shape({\n\t\tcompletedStep: PropTypes.string,\n\t\tdisabledStep: PropTypes.string,\n\t\tpercentage: PropTypes.string,\n\t\tstep: PropTypes.string,\n\t}),\n\t/**\n\t * Id for Steps, ranging in [0, steps.length).\n\t */\n\tid: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\t/**\n\t * Index of step. Used for id's if no step ID exists\n\t */\n\tindex: PropTypes.number,\n\t/**\n\t * Determines if the step has been completed\n\t */\n\n\tisCompleted: PropTypes.bool,\n\t/**\n\t * Determines if the step has been disabled\n\t */\n\tisDisabled: PropTypes.bool,\n\t/**\n\t * Determines if the step contains an error\n\t */\n\tisError: PropTypes.bool,\n\t/**\n\t * Determines if the step is currently selected (active)\n\t */\n\tisSelected: PropTypes.bool,\n\t/**\n\t * Label of tooltip attached to the step if applicable.\n\t */\n\tlabel: PropTypes.node,\n\t/**\n\t * Triggered when click on individual steps. By default, it receives an event and returns all info passed to that step.\n\t * users are able to re-define it by passing a function as a prop\n\t */\n\tonClick: PropTypes.func,\n\t/**\n\t * Triggered when focus on individual steps. By default, it receives an event and returns all info passed to that step.\n\t * users are able to re-define it by passing a function as a prop\n\t */\n\tonFocus: PropTypes.func,\n\t/**\n\t * Step object. This is passed into event callbacks.\n\t */\n\tstep: PropTypes.object,\n\t/**\n\t * Determines if the tooltip attached to step is always open.\n\t * This is mainly for dev test purpose.\n\t * Usually the tooltip should only show when hover.\n\t */\n\ttooltipIsOpen: PropTypes.bool,\n\t/**\n\t * Please select one of the following:\n\t * * `absolute` - (default if `variant` is `modal`) The dialog will use `position: absolute` and style attributes to position itself. This allows inverted placement or flipping of the dialog.\n\t * * `overflowBoundaryElement` - (default if `variant` is `base`) The dialog will overflow scrolling parents. Use on elements that are aligned to the left or right of their target and don't care about the target being within a scrolling parent. Typically this is a popover or tooltip. Dropdown menus can usually open up and down if no room exists. In order to achieve this a portal element will be created and attached to `body`. This element will render into that detached render tree.\n\t * * `relative` - No styling or portals will be used. Menus will be positioned relative to their triggers. This is a great choice for HTML snapshot testing.\n\t */\n\ttooltipPosition: PropTypes.oneOf([\n\t\t'absolute',\n\t\t'overflowBoundaryElement',\n\t\t'relative',\n\t]),\n};\n\n/**\n * Step renders a button icon and its tooltip if applied.\n * The button is applied with different css classes under different conditions.\n * Button icons have 4 types of status: completed (success), active (in progress), error (warning) and uncompleted (not approached)\n */\nclass Step extends React.Component {\n\t/**\n\t * buttonIcon represents the button icon used for each step.\n\t * the button is applied with different css classes under different conditions.\n\t */\n\tbuttonIcon(renderIcon, status, props) {\n\t\tconst data = {\n\t\t\tisSelected: props.isSelected,\n\t\t\tisError: props.isError,\n\t\t\tisCompleted: props.isCompleted,\n\t\t\tisDisabled: props.isDisabled,\n\t\t\tstep: props.step,\n\t\t};\n\n\t\tconst icon = renderIcon ? (\n\t\t\t<ButtonIcon\n\t\t\t\tcategory=\"utility\"\n\t\t\t\tname={this.props.isError ? 'error' : 'success'}\n\t\t\t/>\n\t\t) : null;\n\n\t\tconst handleClick = (event) => props.onClick(event, data);\n\t\tconst handleFocus = (event) => props.onFocus(event, data);\n\n\t\tconst stepButton = props.isDisabled ? (\n\t\t\t<a\n\t\t\t\tclassName={classNames(\n\t\t\t\t\t'slds-button',\n\t\t\t\t\t{ 'slds-button_icon': renderIcon },\n\t\t\t\t\t'slds-progress__marker',\n\t\t\t\t\t{ 'slds-progress__marker_icon': renderIcon },\n\t\t\t\t\t'slds-is-disabled'\n\t\t\t\t)}\n\t\t\t\taria-disabled\n\t\t\t\taria-describedby={`progress-indicator-tooltip-${\n\t\t\t\t\tthis.props.step.id || this.props.index\n\t\t\t\t}`}\n\t\t\t\tstyle={{ cursor: 'not-allowed' }}\n\t\t\t\ttabIndex={0}\n\t\t\t\trole=\"button\"\n\t\t\t>\n\t\t\t\t{icon}\n\t\t\t\t<span className=\"slds-assistive-text\">\n\t\t\t\t\t{this.props.step.assistiveText || (\n\t\t\t\t\t\t<React.Fragment>\n\t\t\t\t\t\t\t{`${props.assistiveText.step} ${props.index + 1}: `}\n\t\t\t\t\t\t\t{props.step.label}\n\t\t\t\t\t\t\t{`- ${status}`}\n\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t)}\n\t\t\t\t</span>\n\t\t\t</a>\n\t\t) : (\n\t\t\t<button\n\t\t\t\tclassName={classNames(\n\t\t\t\t\t'slds-button',\n\t\t\t\t\t{ 'slds-button_icon': renderIcon },\n\t\t\t\t\t'slds-progress__marker',\n\t\t\t\t\t{ 'slds-progress__marker_icon': renderIcon }\n\t\t\t\t)}\n\t\t\t\tonClick={handleClick}\n\t\t\t\tonFocus={handleFocus}\n\t\t\t\taria-describedby={`progress-indicator-tooltip-${\n\t\t\t\t\tthis.props.step.id || this.props.index\n\t\t\t\t}`}\n\t\t\t\taria-current={this.props.isSelected ? 'step' : null}\n\t\t\t\ttype=\"button\"\n\t\t\t>\n\t\t\t\t{icon}\n\t\t\t\t<span className=\"slds-assistive-text\">\n\t\t\t\t\t{this.props.step.assistiveText || (\n\t\t\t\t\t\t<React.Fragment>\n\t\t\t\t\t\t\t{`${props.assistiveText.step} ${props.index + 1}: `}\n\t\t\t\t\t\t\t{props.step.label}\n\t\t\t\t\t\t\t{status ? ` - ${status}` : ''}\n\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t)}\n\t\t\t\t</span>\n\t\t\t</button>\n\t\t);\n\n\t\treturn stepButton;\n\t}\n\n\trender() {\n\t\tconst renderIcon = this.props.isCompleted || this.props.isError;\n\t\tlet status = '';\n\t\tif (this.props.isError) {\n\t\t\tstatus = this.props.assistiveText.errorStep;\n\t\t} else if (this.props.isCompleted) {\n\t\t\tstatus = this.props.assistiveText.completedStep;\n\t\t} else if (this.props.isDisabled) {\n\t\t\tstatus = this.props.assistiveText.disabledStep;\n\t\t}\n\n\t\tconst tooltipProps = {\n\t\t\talign: 'top',\n\t\t\tid: `progress-indicator-tooltip-${\n\t\t\t\tthis.props.step.id || this.props.index\n\t\t\t}`,\n\t\t\tcontent: this.props.step.label,\n\t\t\ttheme: 'info',\n\t\t\tposition: this.props.tooltipPosition,\n\t\t\ttriggerStyle: { display: !renderIcon ? 'flex' : '' },\n\t\t};\n\n\t\t// This is mainly for dev test purpose.\n\t\t// `isOpen` is only set to true if tooltip is specified to be open\n\t\t// Do not set isOpen to false or undefined otherwise, because that will\n\t\t// disable any interaction with tooltips\n\t\tif (this.props.tooltipIsOpen) {\n\t\t\ttooltipProps.isOpen = true;\n\t\t}\n\n\t\treturn (\n\t\t\t<li\n\t\t\t\tclassName={classNames('slds-progress__item', {\n\t\t\t\t\t'slds-is-completed': this.props.isCompleted,\n\t\t\t\t\t'slds-is-active': this.props.isSelected && !this.props.isError,\n\t\t\t\t\t'slds-has-error': this.props.isError,\n\t\t\t\t})}\n\t\t\t>\n\t\t\t\t<Tooltip {...tooltipProps}>\n\t\t\t\t\t{this.buttonIcon(renderIcon, status, this.props)}\n\t\t\t\t</Tooltip>\n\t\t\t</li>\n\t\t);\n\t}\n}\n\nStep.propTypes = propTypes;\nStep.displayName = displayName;\n\nexport default Step; // export is replaced with `ReactDOM.render(<Example />, mountNode);` at runtime\n"]},"metadata":{},"sourceType":"module"}