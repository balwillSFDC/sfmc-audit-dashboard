{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n// Implements the [Welcome Mat InfoBadge design pattern](https://lightningdesignsystem.com/components/welcome-mat/) in React.\n// Based on SLDS v2.4.0\n\n\nimport React from 'react';\nimport PropTypes from 'prop-types'; // ### shortid\n// [npmjs.com/package/shortid](https://www.npmjs.com/package/shortid)\n// shortid is a short, non-sequential, url-friendly, unique id generator\n\nimport shortid from 'shortid';\nimport Icon from '../icon';\nimport { WELCOME_MAT_BADGE } from '../../utilities/constants';\nvar displayName = WELCOME_MAT_BADGE;\nvar propTypes = {\n  /**\n   *  **Assistive text for accessibility.**\n   * * `completed` : For users of assistive technology, assistive text for completed icon.\n   */\n  assistiveText: PropTypes.shape({\n    completed: PropTypes.string\n  }),\n\n  /**\n   * CSS class names to be added to the container element. `array`, `object`, or `string` are accepted.\n   */\n  className: PropTypes.oneOfType([PropTypes.array, PropTypes.object, PropTypes.string]),\n\n  /**\n   * HTML id for component.\n   */\n  id: PropTypes.string,\n\n  /**\n   * Icon for the tile\n   */\n  image: PropTypes.string,\n\n  /**\n   * Whether the trail is completed\n   */\n  isComplete: PropTypes.bool,\n\n  /**\n   * Actions to be rendered on completion of the trail\n   */\n  onCompleteRenderActions: PropTypes.func\n};\nvar defaultProps = {\n  isComplete: false,\n  variant: 'steps'\n};\n/**\n * InfoBadge component item represents a tile in a Welcome Mat\n */\n\nvar InfoBadge = /*#__PURE__*/function (_React$Component) {\n  _inherits(InfoBadge, _React$Component);\n\n  var _super = _createSuper(InfoBadge);\n\n  function InfoBadge(props) {\n    var _this;\n\n    _classCallCheck(this, InfoBadge);\n\n    _this = _super.call(this, props);\n    _this.generatedId = shortid.generate();\n    return _this;\n  }\n  /**\n   * Get the Welcome Mat Info Badge's HTML id. Generate a new one if no ID present.\n   */\n\n\n  _createClass(InfoBadge, [{\n    key: \"getId\",\n    value: function getId() {\n      return this.props.id || this.generatedId;\n    }\n  }, {\n    key: \"getCompletedText\",\n    value: function getCompletedText() {\n      return this.props.assistiveText && this.props.assistiveText.completed ? this.props.assistiveText.completed : 'Completed';\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        id: this.getId(),\n        className: this.props.className\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"slds-welcome-mat__info-badge-container\"\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        className: \"slds-welcome-mat__info-badge\",\n        src: this.props.image,\n        width: \"50\",\n        height: \"50\",\n        alt: \"\"\n      }), /*#__PURE__*/React.createElement(Icon, {\n        category: \"action\",\n        name: \"check\",\n        assistiveText: {\n          label: this.getCompletedText()\n        }\n      })), this.props.children, this.props.isComplete ? this.props.onCompleteRenderActions() : null);\n    }\n  }]);\n\n  return InfoBadge;\n}(React.Component);\n\nInfoBadge.displayName = displayName;\nInfoBadge.propTypes = propTypes;\nInfoBadge.defaultProps = defaultProps;\nexport default InfoBadge;","map":{"version":3,"sources":["../../../.tmp-es/components/welcome-mat/info-badge.jsx"],"names":["displayName","propTypes","assistiveText","completed","PropTypes","string","className","id","image","isComplete","onCompleteRenderActions","func","defaultProps","variant","InfoBadge","React","Component","shortid","label"],"mappings":"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","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// Implements the [Welcome Mat InfoBadge design pattern](https://lightningdesignsystem.com/components/welcome-mat/) in React.\n// Based on SLDS v2.4.0\nimport React from 'react';\nimport PropTypes from 'prop-types';\n// ### shortid\n// [npmjs.com/package/shortid](https://www.npmjs.com/package/shortid)\n// shortid is a short, non-sequential, url-friendly, unique id generator\nimport shortid from 'shortid';\n\nimport Icon from '../icon';\n\nimport { WELCOME_MAT_BADGE } from '../../utilities/constants';\n\nconst displayName = WELCOME_MAT_BADGE;\n\nconst propTypes = {\n\t/**\n\t *  **Assistive text for accessibility.**\n\t * * `completed` : For users of assistive technology, assistive text for completed icon.\n\t */\n\tassistiveText: PropTypes.shape({\n\t\tcompleted: PropTypes.string,\n\t}),\n\t/**\n\t * CSS class names to be added to the container element. `array`, `object`, or `string` are accepted.\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * HTML id for component.\n\t */\n\tid: PropTypes.string,\n\t/**\n\t * Icon for the tile\n\t */\n\timage: PropTypes.string,\n\t/**\n\t * Whether the trail is completed\n\t */\n\tisComplete: PropTypes.bool,\n\t/**\n\t * Actions to be rendered on completion of the trail\n\t */\n\tonCompleteRenderActions: PropTypes.func,\n};\n\nconst defaultProps = {\n\tisComplete: false,\n\tvariant: 'steps',\n};\n\n/**\n * InfoBadge component item represents a tile in a Welcome Mat\n */\nclass InfoBadge extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.generatedId = shortid.generate();\n\t}\n\n\t/**\n\t * Get the Welcome Mat Info Badge's HTML id. Generate a new one if no ID present.\n\t */\n\tgetId() {\n\t\treturn this.props.id || this.generatedId;\n\t}\n\n\tgetCompletedText() {\n\t\treturn this.props.assistiveText && this.props.assistiveText.completed\n\t\t\t? this.props.assistiveText.completed\n\t\t\t: 'Completed';\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div id={this.getId()} className={this.props.className}>\n\t\t\t\t<div className=\"slds-welcome-mat__info-badge-container\">\n\t\t\t\t\t<img\n\t\t\t\t\t\tclassName=\"slds-welcome-mat__info-badge\"\n\t\t\t\t\t\tsrc={this.props.image}\n\t\t\t\t\t\twidth=\"50\"\n\t\t\t\t\t\theight=\"50\"\n\t\t\t\t\t\talt=\"\"\n\t\t\t\t\t/>\n\t\t\t\t\t<Icon\n\t\t\t\t\t\tcategory=\"action\"\n\t\t\t\t\t\tname=\"check\"\n\t\t\t\t\t\tassistiveText={{ label: this.getCompletedText() }}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t{this.props.children}\n\t\t\t\t{this.props.isComplete ? this.props.onCompleteRenderActions() : null}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nInfoBadge.displayName = displayName;\nInfoBadge.propTypes = propTypes;\nInfoBadge.defaultProps = defaultProps;\n\nexport default InfoBadge;\n"]},"metadata":{},"sourceType":"module"}