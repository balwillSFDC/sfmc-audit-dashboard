{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n// ### React\n\n\nimport React from 'react';\nimport PropTypes from 'prop-types'; // ### classNames\n// [github.com/JedWatson/classnames](https://github.com/JedWatson/classnames)\n// A simple javascript utility for conditionally joining classNames together.\n\nimport classNames from 'classnames'; // ### isFunction\n\nimport isFunction from 'lodash.isfunction'; // ## Children\n\nimport UtilityIcon from '../../utilities/utility-icon';\nimport Button from '../../button'; // ## Constants\n\nimport { ICON_INPUT } from '../../../utilities/constants';\n/**\n * A wrapper for icons that will be rendered inside of an Input\n *\n * If the `onClick` function prop is provided, the `design-system-react/components/button` component is used.\n * If not, the icon will be an instance of `design-system-react/components/utilities/utility-icon`.\n * Checkout out the appropriate component to see what props can be passed along via the `{...props}` rest operator\n */\n\nvar InputIcon = function InputIcon(props) {\n  var category = props.category,\n      iconPosition = props.iconPosition,\n      name = props.name,\n      path = props.path,\n      onClick = props.onClick,\n      variant = props.variant,\n      rest = _objectWithoutProperties(props, [\"category\", \"iconPosition\", \"name\", \"path\", \"onClick\", \"variant\"]); // need to pass click event up on SVG\n\n\n  var variants = {\n    combobox: /*#__PURE__*/React.createElement(\"span\", {\n      className: \"slds-icon_container slds-input__icon slds-input__icon_right\"\n    }, /*#__PURE__*/React.createElement(UtilityIcon, _extends({\n      \"aria-hidden\": true,\n      category: category,\n      className: classNames('slds-icon slds-icon_x-small slds-icon-text-default'),\n      name: name,\n      path: path\n    }, rest))),\n    base: /*#__PURE__*/React.createElement(UtilityIcon, _extends({\n      \"aria-hidden\": true,\n      category: category,\n      className: classNames('slds-input__icon slds-icon-text-default', _defineProperty({}, \"slds-input__icon_\".concat(iconPosition), iconPosition)),\n      name: name,\n      path: path\n    }, rest))\n  };\n  return isFunction(onClick) ? /*#__PURE__*/React.createElement(Button, _extends({\n    className: classNames('slds-input__icon', _defineProperty({}, \"slds-input__icon_\".concat(iconPosition), iconPosition)),\n    iconCategory: category,\n    iconName: name,\n    iconPath: path,\n    onClick: onClick,\n    variant: \"icon\"\n  }, rest)) : variants[variant];\n};\n\nInputIcon.displayName = ICON_INPUT;\nInputIcon.propTypes = {\n  /**\n   * Icon category from [lightningdesignsystem.com/icons/](https://www.lightningdesignsystem.com/icons/)\n   */\n  category: PropTypes.string,\n\n  /**\n   * This is only needed if an input contains two icons, the Input component handles this prop for you.\n   */\n  iconPosition: PropTypes.oneOf(['left', 'right']),\n\n  /**\n   * Name of the icon. Visit <a href='http://www.lightningdesignsystem.com/resources/icons'>Lightning Design System Icons</a> to reference icon names.\n   */\n  name: PropTypes.string,\n\n  /**\n   * Path to the icon. This will override any global icon settings.\n   */\n  path: PropTypes.string,\n\n  /**\n   * This event fires when the icon is clicked.\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * Changes styles of the InputIcon.\n   */\n  variant: PropTypes.oneOf(['base', 'combobox'])\n};\nInputIcon.defaultProps = {\n  category: 'utility',\n  variant: 'base'\n};\nexport default InputIcon;","map":{"version":3,"sources":["../../../../.tmp-es/components/icon/input-icon/index.jsx"],"names":["InputIcon","category","iconPosition","name","path","onClick","variant","rest","props","variants","combobox","classNames","base","isFunction","PropTypes"],"mappings":"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","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// ### React\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n// ### classNames\n// [github.com/JedWatson/classnames](https://github.com/JedWatson/classnames)\n// A simple javascript utility for conditionally joining classNames together.\nimport classNames from 'classnames';\n\n// ### isFunction\nimport isFunction from 'lodash.isfunction';\n\n// ## Children\nimport UtilityIcon from '../../utilities/utility-icon';\nimport Button from '../../button';\n\n// ## Constants\nimport { ICON_INPUT } from '../../../utilities/constants';\n\n/**\n * A wrapper for icons that will be rendered inside of an Input\n *\n * If the `onClick` function prop is provided, the `design-system-react/components/button` component is used.\n * If not, the icon will be an instance of `design-system-react/components/utilities/utility-icon`.\n * Checkout out the appropriate component to see what props can be passed along via the `{...props}` rest operator\n */\nconst InputIcon = (props) => {\n\tconst {\n\t\tcategory,\n\t\ticonPosition,\n\t\tname,\n\t\tpath,\n\t\tonClick,\n\t\tvariant,\n\t\t...rest\n\t} = props;\n\n\t// need to pass click event up on SVG\n\n\tconst variants = {\n\t\tcombobox: (\n\t\t\t<span className=\"slds-icon_container slds-input__icon slds-input__icon_right\">\n\t\t\t\t<UtilityIcon\n\t\t\t\t\taria-hidden\n\t\t\t\t\tcategory={category}\n\t\t\t\t\tclassName={classNames(\n\t\t\t\t\t\t'slds-icon slds-icon_x-small slds-icon-text-default'\n\t\t\t\t\t)}\n\t\t\t\t\tname={name}\n\t\t\t\t\tpath={path}\n\t\t\t\t\t{...rest}\n\t\t\t\t/>\n\t\t\t</span>\n\t\t),\n\t\tbase: (\n\t\t\t<UtilityIcon\n\t\t\t\taria-hidden\n\t\t\t\tcategory={category}\n\t\t\t\tclassName={classNames('slds-input__icon slds-icon-text-default', {\n\t\t\t\t\t[`slds-input__icon_${iconPosition}`]: iconPosition,\n\t\t\t\t})}\n\t\t\t\tname={name}\n\t\t\t\tpath={path}\n\t\t\t\t{...rest}\n\t\t\t/>\n\t\t),\n\t};\n\n\treturn isFunction(onClick) ? (\n\t\t<Button\n\t\t\tclassName={classNames('slds-input__icon', {\n\t\t\t\t[`slds-input__icon_${iconPosition}`]: iconPosition,\n\t\t\t})}\n\t\t\ticonCategory={category}\n\t\t\ticonName={name}\n\t\t\ticonPath={path}\n\t\t\tonClick={onClick}\n\t\t\tvariant=\"icon\"\n\t\t\t{...rest}\n\t\t/>\n\t) : (\n\t\tvariants[variant]\n\t);\n};\n\nInputIcon.displayName = ICON_INPUT;\n\nInputIcon.propTypes = {\n\t/**\n\t * Icon category from [lightningdesignsystem.com/icons/](https://www.lightningdesignsystem.com/icons/)\n\t */\n\tcategory: PropTypes.string,\n\t/**\n\t * This is only needed if an input contains two icons, the Input component handles this prop for you.\n\t */\n\ticonPosition: PropTypes.oneOf(['left', 'right']),\n\t/**\n\t * Name of the icon. Visit <a href='http://www.lightningdesignsystem.com/resources/icons'>Lightning Design System Icons</a> to reference icon names.\n\t */\n\tname: PropTypes.string,\n\t/**\n\t * Path to the icon. This will override any global icon settings.\n\t */\n\tpath: PropTypes.string,\n\t/**\n\t * This event fires when the icon is clicked.\n\t */\n\tonClick: PropTypes.func,\n\t/**\n\t * Changes styles of the InputIcon.\n\t */\n\tvariant: PropTypes.oneOf(['base', 'combobox']),\n};\n\nInputIcon.defaultProps = {\n\tcategory: 'utility',\n\tvariant: 'base',\n};\n\nexport default InputIcon;\n"]},"metadata":{},"sourceType":"module"}