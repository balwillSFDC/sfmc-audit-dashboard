{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n// # App Launcher Expandable Section Component\n// ## Dependencies\n// ### React\n\n\nimport React from 'react';\nimport PropTypes from 'prop-types'; // ### classNames\n// [github.com/JedWatson/classnames](https://github.com/JedWatson/classnames)\n// A simple javascript utility for conditionally joining classNames together.\n\nimport classNames from 'classnames'; // This component's `checkProps` which issues warnings to developers about properties when in development mode (similar to React's built in development tools)\n\nimport checkProps from './check-props';\nimport componentDoc from './component.json'; // ## Children\n\nimport ExpandableSection from '../expandable-section'; // ## Constants\n\nimport { APP_LAUNCHER_EXPANDABLE_SECTION, APP_LAUNCHER_TILE } from '../../utilities/constants';\n/**\n * App Launcher Sections allow users to categorize App Tiles & Links as well as toggle their display. It is a superset of components/expandable-section with content formatting.\n * All Expandable Section props are compatible with props passed to this component.\n */\n\nvar AppLauncherExpandableSection = /*#__PURE__*/function (_React$Component) {\n  _inherits(AppLauncherExpandableSection, _React$Component);\n\n  var _super = _createSuper(AppLauncherExpandableSection); // ### Display Name\n  // Always use the canonical component name as the React display name.\n  // ### Prop Types\n\n\n  function AppLauncherExpandableSection(props) {\n    var _this;\n\n    _classCallCheck(this, AppLauncherExpandableSection);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      isOpen: true\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"toggleOpen\", function (event, data) {\n      if (_this.props.onToggleOpen) {\n        _this.props.onToggleOpen(event, data);\n      } else {\n        _this.setState(function (prevState) {\n          return {\n            isOpen: !prevState.isOpen\n          };\n        });\n      }\n    });\n\n    checkProps(APP_LAUNCHER_EXPANDABLE_SECTION, props, componentDoc);\n    return _this;\n  }\n\n  _createClass(AppLauncherExpandableSection, [{\n    key: \"render\",\n    value: function render() {\n      var expandableSectionProps = _objectSpread(_objectSpread({}, this.props), {\n        isOpen: this.props.isOpen !== undefined ? this.props.isOpen : this.state.isOpen,\n        onToggleOpen: this.toggleOpen\n      });\n\n      var ulChildrenType = 'tiles';\n      var ulContent = React.Children.map(this.props.children, function (child) {\n        var liClasses = 'slds-p-horizontal_small slds-size_1-of-1 slds-medium-size_1-of-3';\n\n        if (child && child.type && child.type.displayName !== APP_LAUNCHER_TILE || child && !child.type) {\n          ulChildrenType = 'links';\n        }\n\n        if (ulChildrenType === 'links') {\n          liClasses = 'slds-col_padded slds-p-vertical_xx-small slds-size_1-of-5';\n        }\n\n        return /*#__PURE__*/React.createElement(\"li\", {\n          className: liClasses\n        }, child);\n      });\n      return /*#__PURE__*/React.createElement(ExpandableSection, expandableSectionProps, /*#__PURE__*/React.createElement(\"ul\", {\n        className: classNames('slds-grid slds-wrap', {\n          'slds-grid_pull-padded': ulChildrenType === 'tiles'\n        })\n      }, ulContent));\n    }\n  }]);\n\n  return AppLauncherExpandableSection;\n}(React.Component);\n\n_defineProperty(AppLauncherExpandableSection, \"displayName\", APP_LAUNCHER_EXPANDABLE_SECTION);\n\n_defineProperty(AppLauncherExpandableSection, \"propTypes\", {\n  /**\n   * **Assistive text for accessibility.**\n   * * `toggleSection`: Label for the icon that expands / collapses the section\n   */\n  assistiveText: PropTypes.shape({\n    toggleSection: PropTypes.string\n  }),\n\n  /**\n   * Contents of the section\n   */\n  children: PropTypes.node,\n\n  /**\n   * Class names to be added to the `slds-section` classed node\n   */\n  className: PropTypes.oneOfType([PropTypes.array, PropTypes.object, PropTypes.string]),\n\n  /**\n   * Unique identifier for the expandable section. The id is automatically generated if not provided\n   */\n  id: PropTypes.string,\n\n  /**\n   * Specifies whether the section is expanded or collapsed. If not provided, component will use its own state to manage this itself\n   */\n  isOpen: PropTypes.bool,\n\n  /**\n   * Specifies whether the section can be expanded or collapsed. Defaults to `false`\n   */\n  nonCollapsible: PropTypes.bool,\n\n  /**\n   * Callback for when the section is expanded or collapsed. Passes event object and data object with `isOpen` bool.\n   */\n  onToggleOpen: PropTypes.func,\n\n  /**\n   * The title for the section\n   */\n  title: PropTypes.string.isRequired\n});\n\nexport default AppLauncherExpandableSection;","map":{"version":3,"sources":["../../../.tmp-es/components/app-launcher/expandable-section.jsx"],"names":["AppLauncherExpandableSection","React","Component","APP_LAUNCHER_EXPANDABLE_SECTION","assistiveText","toggleSection","PropTypes","string","children","className","id","isOpen","nonCollapsible","onToggleOpen","title","isRequired","checkProps","prevState","expandableSectionProps","toggleOpen","ulChildrenType","ulContent","liClasses","child","classNames"],"mappings":"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","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// # App Launcher Expandable Section Component\n\n// ## Dependencies\n\n// ### React\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n// ### classNames\n// [github.com/JedWatson/classnames](https://github.com/JedWatson/classnames)\n// A simple javascript utility for conditionally joining classNames together.\nimport classNames from 'classnames';\n\n// This component's `checkProps` which issues warnings to developers about properties when in development mode (similar to React's built in development tools)\nimport checkProps from './check-props';\nimport componentDoc from './component.json';\n\n// ## Children\nimport ExpandableSection from '../expandable-section';\n\n// ## Constants\nimport {\n\tAPP_LAUNCHER_EXPANDABLE_SECTION,\n\tAPP_LAUNCHER_TILE,\n} from '../../utilities/constants';\n\n/**\n * App Launcher Sections allow users to categorize App Tiles & Links as well as toggle their display. It is a superset of components/expandable-section with content formatting.\n * All Expandable Section props are compatible with props passed to this component.\n */\nclass AppLauncherExpandableSection extends React.Component {\n\t// ### Display Name\n\t// Always use the canonical component name as the React display name.\n\tstatic displayName = APP_LAUNCHER_EXPANDABLE_SECTION;\n\n\t// ### Prop Types\n\tstatic propTypes = {\n\t\t/**\n\t\t * **Assistive text for accessibility.**\n\t\t * * `toggleSection`: Label for the icon that expands / collapses the section\n\t\t */\n\t\tassistiveText: PropTypes.shape({\n\t\t\ttoggleSection: PropTypes.string,\n\t\t}),\n\t\t/**\n\t\t * Contents of the section\n\t\t */\n\t\tchildren: PropTypes.node,\n\t\t/**\n\t\t * Class names to be added to the `slds-section` classed node\n\t\t */\n\t\tclassName: PropTypes.oneOfType([\n\t\t\tPropTypes.array,\n\t\t\tPropTypes.object,\n\t\t\tPropTypes.string,\n\t\t]),\n\t\t/**\n\t\t * Unique identifier for the expandable section. The id is automatically generated if not provided\n\t\t */\n\t\tid: PropTypes.string,\n\t\t/**\n\t\t * Specifies whether the section is expanded or collapsed. If not provided, component will use its own state to manage this itself\n\t\t */\n\t\tisOpen: PropTypes.bool,\n\t\t/**\n\t\t * Specifies whether the section can be expanded or collapsed. Defaults to `false`\n\t\t */\n\t\tnonCollapsible: PropTypes.bool,\n\t\t/**\n\t\t * Callback for when the section is expanded or collapsed. Passes event object and data object with `isOpen` bool.\n\t\t */\n\t\tonToggleOpen: PropTypes.func,\n\t\t/**\n\t\t * The title for the section\n\t\t */\n\t\ttitle: PropTypes.string.isRequired,\n\t};\n\n\tstate = {\n\t\tisOpen: true,\n\t};\n\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tcheckProps(APP_LAUNCHER_EXPANDABLE_SECTION, props, componentDoc);\n\t}\n\n\ttoggleOpen = (event, data) => {\n\t\tif (this.props.onToggleOpen) {\n\t\t\tthis.props.onToggleOpen(event, data);\n\t\t} else {\n\t\t\tthis.setState((prevState) => ({\n\t\t\t\tisOpen: !prevState.isOpen,\n\t\t\t}));\n\t\t}\n\t};\n\n\trender() {\n\t\tconst expandableSectionProps = {\n\t\t\t...this.props,\n\t\t\t...{\n\t\t\t\tisOpen:\n\t\t\t\t\tthis.props.isOpen !== undefined\n\t\t\t\t\t\t? this.props.isOpen\n\t\t\t\t\t\t: this.state.isOpen,\n\t\t\t\tonToggleOpen: this.toggleOpen,\n\t\t\t},\n\t\t};\n\t\tlet ulChildrenType = 'tiles';\n\n\t\tconst ulContent = React.Children.map(this.props.children, (child) => {\n\t\t\tlet liClasses =\n\t\t\t\t'slds-p-horizontal_small slds-size_1-of-1 slds-medium-size_1-of-3';\n\n\t\t\tif (\n\t\t\t\t(child && child.type && child.type.displayName !== APP_LAUNCHER_TILE) ||\n\t\t\t\t(child && !child.type)\n\t\t\t) {\n\t\t\t\tulChildrenType = 'links';\n\t\t\t}\n\n\t\t\tif (ulChildrenType === 'links') {\n\t\t\t\tliClasses = 'slds-col_padded slds-p-vertical_xx-small slds-size_1-of-5';\n\t\t\t}\n\n\t\t\treturn <li className={liClasses}>{child}</li>;\n\t\t});\n\n\t\treturn (\n\t\t\t<ExpandableSection {...expandableSectionProps}>\n\t\t\t\t<ul\n\t\t\t\t\tclassName={classNames('slds-grid slds-wrap', {\n\t\t\t\t\t\t'slds-grid_pull-padded': ulChildrenType === 'tiles',\n\t\t\t\t\t})}\n\t\t\t\t>\n\t\t\t\t\t{ulContent}\n\t\t\t\t</ul>\n\t\t\t</ExpandableSection>\n\t\t);\n\t}\n}\n\nexport default AppLauncherExpandableSection;\n"]},"metadata":{},"sourceType":"module"}