{"ast":null,"code":"/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\nimport EventUtil from './event';\n/*\n * Helper function that has callbacks passed into it with the key\n * being the keycode of the event. This allows an object literal to\n * control key event callback mapping and avoids a long conditional\n * if statement and uses an enumeration pattern instead.\n */\n\nvar mapKeyEventCallbacks = function mapKeyEventCallbacks(event, _ref) {\n  var _ref$callbacks = _ref.callbacks,\n      callbacks = _ref$callbacks === void 0 ? {} : _ref$callbacks,\n      _ref$shiftCallbacks = _ref.shiftCallbacks,\n      shiftCallbacks = _ref$shiftCallbacks === void 0 ? {} : _ref$shiftCallbacks,\n      _ref$stopPropagation = _ref.stopPropagation,\n      stopPropagation = _ref$stopPropagation === void 0 ? true : _ref$stopPropagation;\n\n  if (event.shiftKey && event.keyCode && shiftCallbacks[event.keyCode]) {\n    if (stopPropagation) {\n      EventUtil.trapEvent(event);\n    }\n\n    shiftCallbacks[event.keyCode].callback(event, shiftCallbacks[event.keyCode].data);\n  } else if (event.keyCode && callbacks[event.keyCode]) {\n    if (stopPropagation) {\n      EventUtil.trapEvent(event);\n    }\n\n    callbacks[event.keyCode].callback(event, callbacks[event.keyCode].data);\n  } else if (event.keyCode && callbacks.other) {\n    // You will likely NOT want to stop propagation of all key presses!\n    if (callbacks.other.stopPropagation) {\n      EventUtil.trapEvent(event);\n    }\n\n    callbacks.other.callback(event, callbacks.other.data);\n  }\n};\n\nexport default mapKeyEventCallbacks;","map":{"version":3,"sources":["../../.tmp-es/utilities/key-callbacks.js"],"names":["mapKeyEventCallbacks","callbacks","shiftCallbacks","stopPropagation","event","EventUtil"],"mappings":"AAAA;;AACA;AACA,OAAA,SAAA,MAAA,SAAA;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMA,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAA,KAAA,EAAA,IAAA,EAGxB;AAAA,MAAA,cAAA,GAAA,IAAA,CADFC,SACE;AAAA,MADFA,SACE,GAAA,cAAA,KAAA,KAAA,CAAA,GADU,EACV,GAAA,cAAA;AAAA,MAAA,mBAAA,GAAA,IAAA,CADcC,cACd;AAAA,MADcA,cACd,GAAA,mBAAA,KAAA,KAAA,CAAA,GAD+B,EAC/B,GAAA,mBAAA;AAAA,MAAA,oBAAA,GAAA,IAAA,CADmCC,eACnC;AAAA,MADmCA,eACnC,GAAA,oBAAA,KAAA,KAAA,CAAA,GADqD,IACrD,GAAA,oBAAA;;AACJ,MAAIC,KAAK,CAALA,QAAAA,IAAkBA,KAAK,CAAvBA,OAAAA,IAAmCF,cAAc,CAACE,KAAK,CAA3D,OAAqD,CAArD,EAAsE;AACrE,QAAA,eAAA,EAAqB;AACpBC,MAAAA,SAAS,CAATA,SAAAA,CAAAA,KAAAA;AACA;;AACDH,IAAAA,cAAc,CAACE,KAAK,CAApBF,OAAc,CAAdA,CAAAA,QAAAA,CAAAA,KAAAA,EAECA,cAAc,CAACE,KAAK,CAApBF,OAAc,CAAdA,CAFDA,IAAAA;AAJD,GAAA,MAQO,IAAIE,KAAK,CAALA,OAAAA,IAAiBH,SAAS,CAACG,KAAK,CAApC,OAA8B,CAA9B,EAA+C;AACrD,QAAA,eAAA,EAAqB;AACpBC,MAAAA,SAAS,CAATA,SAAAA,CAAAA,KAAAA;AACA;;AACDJ,IAAAA,SAAS,CAACG,KAAK,CAAfH,OAAS,CAATA,CAAAA,QAAAA,CAAAA,KAAAA,EAAyCA,SAAS,CAACG,KAAK,CAAfH,OAAS,CAATA,CAAzCA,IAAAA;AAJM,GAAA,MAKA,IAAIG,KAAK,CAALA,OAAAA,IAAiBH,SAAS,CAA9B,KAAA,EAAsC;AAC5C;AACA,QAAIA,SAAS,CAATA,KAAAA,CAAJ,eAAA,EAAqC;AACpCI,MAAAA,SAAS,CAATA,SAAAA,CAAAA,KAAAA;AACA;;AACDJ,IAAAA,SAAS,CAATA,KAAAA,CAAAA,QAAAA,CAAAA,KAAAA,EAAgCA,SAAS,CAATA,KAAAA,CAAhCA,IAAAA;AACA;AAvBF,CAAA;;AA0BA,eAAA,oBAAA","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\nimport EventUtil from './event';\n\n/*\n * Helper function that has callbacks passed into it with the key\n * being the keycode of the event. This allows an object literal to\n * control key event callback mapping and avoids a long conditional\n * if statement and uses an enumeration pattern instead.\n */\nconst mapKeyEventCallbacks = (\n\tevent,\n\t{ callbacks = {}, shiftCallbacks = {}, stopPropagation = true }\n) => {\n\tif (event.shiftKey && event.keyCode && shiftCallbacks[event.keyCode]) {\n\t\tif (stopPropagation) {\n\t\t\tEventUtil.trapEvent(event);\n\t\t}\n\t\tshiftCallbacks[event.keyCode].callback(\n\t\t\tevent,\n\t\t\tshiftCallbacks[event.keyCode].data\n\t\t);\n\t} else if (event.keyCode && callbacks[event.keyCode]) {\n\t\tif (stopPropagation) {\n\t\t\tEventUtil.trapEvent(event);\n\t\t}\n\t\tcallbacks[event.keyCode].callback(event, callbacks[event.keyCode].data);\n\t} else if (event.keyCode && callbacks.other) {\n\t\t// You will likely NOT want to stop propagation of all key presses!\n\t\tif (callbacks.other.stopPropagation) {\n\t\t\tEventUtil.trapEvent(event);\n\t\t}\n\t\tcallbacks.other.callback(event, callbacks.other.data);\n\t}\n};\n\nexport default mapKeyEventCallbacks;\n"]},"metadata":{},"sourceType":"module"}