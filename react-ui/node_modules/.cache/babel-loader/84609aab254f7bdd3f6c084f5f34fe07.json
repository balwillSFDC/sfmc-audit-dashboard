{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/* eslint-disable max-lines */\n\n/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n// Implements the [Dropdown design pattern](https://www.lightningdesignsystem.com/components/menus/#flavor-dropdown) in React. Child elements that do not have the display name of the value of `MENU_DROPDOWN_TRIGGER` in `components/constants.js` will be considered custom content and rendered in the popover.\n\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport requiredIf from 'react-required-if';\nimport classNames from 'classnames'; // ### isFunction\n\nimport isFunction from 'lodash.isfunction';\nimport isEqual from 'lodash.isequal';\nimport shortid from 'shortid'; // ### Children\n\nimport Dialog from '../utilities/dialog';\nimport List from '../utilities/menu-list';\nimport ListItem from '../utilities/menu-list/item';\nimport ListItemLabel from '../utilities/menu-list/item-label'; // This is the the default Dropdown Trigger, which expects one button as a child.\n\nimport DefaultTrigger from './button-trigger'; // This component's `checkProps` which issues warnings to developers about properties\n// when in development mode (similar to React's built in development tools)\n\nimport checkProps from './check-props';\nimport componentDoc from './component.json';\nimport EventUtil from '../../utilities/event';\nimport KeyBuffer from '../../utilities/key-buffer';\nimport keyboardNavigate from '../../utilities/keyboard-navigate';\nimport KEYS from '../../utilities/key-code';\nimport { MENU_DROPDOWN, MENU_DROPDOWN_TRIGGER, LIST } from '../../utilities/constants';\nimport { IconSettingsContext } from '../icon-settings';\nvar documentDefined = typeof document !== 'undefined'; // The overlay is an optional way to allow the dropdown to close on outside\n// clicks even when those clicks are over areas that wouldn't normally fire\n// click or touch events (for example, iframes). A single overlay is shared\n// between all dropdowns in the app.\n\nvar overlay = documentDefined ? document.createElement('span') : {\n  style: {}\n};\noverlay.style.top = 0;\noverlay.style.left = 0;\noverlay.style.width = '100%';\noverlay.style.height = '100%';\noverlay.style.position = 'absolute';\nvar currentOpenDropdown;\nvar DropdownNubbinPositions = ['top left', 'top', 'top right', 'bottom left', 'bottom', 'bottom right']; // # Keyboard Navigable mixin\n\nvar noop = function noop() {};\n\nvar itemIsSelectable = function itemIsSelectable(item) {\n  return item.type !== 'header' && item.type !== 'divider' && !item.disabled;\n};\n\nvar getNavigableItems = function getNavigableItems(items) {\n  var navigableItems = [];\n  navigableItems.indexes = [];\n  navigableItems.keyBuffer = new KeyBuffer();\n\n  if (Array.isArray(items)) {\n    items.forEach(function (item, index) {\n      if (itemIsSelectable(item)) {\n        // eslint-disable-next-line fp/no-mutating-methods\n        navigableItems.push({\n          index: index,\n          text: \"\".concat(item.label).toLowerCase()\n        }); // eslint-disable-next-line fp/no-mutating-methods\n\n        navigableItems.indexes.push(index);\n      }\n    });\n  }\n\n  return navigableItems;\n};\n\nfunction getMenu(componentRef) {\n  return ReactDOM.findDOMNode(componentRef).querySelector('ul.dropdown__list'); // eslint-disable-line react/no-find-dom-node\n}\n\nfunction getMenuItem(menuItemId) {\n  var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;\n  var menuItem;\n\n  if (menuItemId) {\n    menuItem = context.getElementById(menuItemId);\n  }\n\n  return menuItem;\n}\n/*\n * Dropdowns with nubbins have a different API from other Dialogs\n *\n * Dialog receives an alignment position and whether it has a nubbin. The nubbin position is inferred from the align.\n * Dropdowns have a nubbinPosition which dictates the align, but in an inverse fashion which then gets inversed back by the Dialog.\n *\n * Since Dialog is the future API and we don't want to break backwards compatability, we currently map to the Dialog api here. Even if Dialog will map it again.\n * TODO - deprecate nubbinPosition in favor for additional `align` values and a flag to show a nubbin.\n */\n\n\nvar DropdownToDialogNubbinMapping = {\n  top: 'bottom',\n  'top left': 'bottom left',\n  'top right': 'bottom right',\n  bottom: 'top',\n  'bottom left': 'top left',\n  'bottom right': 'top right'\n};\nvar propTypes = {\n  /**\n   * Aligns the menu center, right, or left respective to the trigger. This is not intended for use with `nubbinPosition`.\n   */\n  align: PropTypes.oneOf(['center', 'left', 'right']),\n\n  /**\n   * This prop is passed onto the triggering `Button`. Text that is visually hidden but read aloud by screenreaders to tell the user what the icon means. You can omit this prop if you are using the `label` prop.\n   */\n  assistiveText: PropTypes.object,\n\n  /**\n   * CSS classes to be added to triggering button.\n   */\n  buttonClassName: PropTypes.oneOfType([PropTypes.array, PropTypes.object, PropTypes.string]),\n\n  /**\n   * If true, button/icon is white. Meant for buttons or utility icons on dark backgrounds.\n   */\n  buttonInverse: PropTypes.bool,\n\n  /**\n   * This prop is passed onto the triggering `Button`. Determines variant of the Button component that triggers dropdown.\n   */\n  buttonVariant: PropTypes.oneOf(['base', 'neutral', 'brand', 'destructive', 'icon']),\n\n  /**\n   * If true, renders checkmark icon on the selected Menu Item.\n   */\n  checkmark: PropTypes.bool,\n\n  /**\n   * If you need custom content _and_ a list, use a `<Popover>` instead.\n   */\n  children: PropTypes.node,\n\n  /**\n   * CSS classes to be added to dropdown menu.\n   */\n  className: PropTypes.oneOfType([PropTypes.array, PropTypes.object, PropTypes.string]),\n\n  /**\n   * By default, these class names will be added to the absolutely-positioned `Dialog` component.\n   */\n  containerClassName: PropTypes.oneOfType([PropTypes.array, PropTypes.object, PropTypes.string]),\n\n  /**\n   * This prop is passed onto the triggering `Button`. Prevent dropdown menu from opening. Also applies disabled styling to trigger button.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Prevents the dropdown from changing position based on the viewport/window. If set to true your dropdowns can extend outside the viewport _and_ overflow outside of a scrolling parent. If this happens, you might want to consider making the dropdowns contents scrollable to fit the menu on the screen. `hasStaticAlignment` disables this behavior and allows this component to extend beyond boundary elements. _Not tested._\n   */\n  hasStaticAlignment: PropTypes.bool,\n\n  /**\n   * This prop is passed onto the triggering `Button`. Associates an icon button with another element on the page by changes the color of the SVG. Please reference <a href=\"http://www.lightningdesignsystem.com/components/buttons/#hint\">Lightning Design System Buttons > Hint</a>.\n   */\n  hint: PropTypes.bool,\n\n  /**\n   * Delay on menu closing in milliseconds.\n   */\n  hoverCloseDelay: PropTypes.number,\n\n  /**\n   * Name of the icon category. Visit <a href=\"http://www.lightningdesignsystem.com/resources/icons\">Lightning Design System Icons</a> to reference icon categories.\n   */\n  iconCategory: requiredIf(PropTypes.oneOf(['action', 'custom', 'doctype', 'standard', 'utility']), function (props) {\n    return !!props.iconName;\n  }),\n\n  /**\n   * Name of the icon. Visit <a href=\"http://www.lightningdesignsystem.com/resources/icons\">Lightning Design System Icons</a> to reference icon names.\n   */\n  iconName: PropTypes.string,\n\n  /**\n   * If omitted, icon position is centered.\n   */\n  iconPosition: PropTypes.oneOf(['left', 'right']),\n\n  /**\n   * For icon variants, please reference <a href=\"http://www.lightningdesignsystem.com/components/buttons/#icon\">Lightning Design System Icons</a>.\n   */\n  iconVariant: PropTypes.oneOf(['bare', 'container', 'border', 'border-filled', 'small', 'more']),\n\n  /**\n   * Determines the size of the icon.\n   */\n  iconSize: PropTypes.oneOf(['x-small', 'small', 'medium', 'large']),\n\n  /**\n   * A unique ID is needed in order to support keyboard navigation, ARIA support, and connect the dropdown to the triggering button.\n   */\n  id: PropTypes.string,\n\n  /**\n   * Adds inverse class to the dropdown\n   */\n  inverse: PropTypes.bool,\n\n  /**\n   * Forces the dropdown to be open or closed. See controlled/uncontrolled callback/prop pattern for more on suggested use view [Concepts and Best Practices](https://github.com/salesforce-ux/design-system-react/blob/master/CONTRIBUTING.md#concepts-and-best-practices)\n   */\n  isOpen: PropTypes.bool,\n\n  /**\n   * This prop is passed onto the triggering `Button`. Text within the trigger button.\n   */\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n\n  /**\n   * Custom element that overrides the default Menu Item component.\n   */\n  listItemRenderer: PropTypes.func,\n\n  /**\n   * This prop is passed into the List for the menu. Pass null to make it the size of the content, or a string with an integer from here: https://www.lightningdesignsystem.com/components/menus/#flavor-dropdown-height\n   */\n  length: PropTypes.oneOf([null, '5', '7', '10', 5, 7, 10]),\n\n  /**\n   * Please select one of the following:\n   * * `absolute` - (default) The dialog will use `position: absolute` and style attributes to position itself. This allows inverted placement or flipping of the dialog.\n   * * `overflowBoundaryElement` - The dialog will overflow scrolling parents. Use on elements that are aligned to the left or right of their target and don't care about the target being within a scrolling parent. Typically this is a popover or tooltip. Dropdown menus can usually open up and down if no room exists. In order to achieve this a portal element will be created and attached to `body`. This element will render into that detached render tree.\n   * * `relative` - No styling or portals will be used. Menus will be positioned relative to their triggers. This is a great choice for HTML snapshot testing.\n   */\n  menuPosition: PropTypes.oneOf(['absolute', 'overflowBoundaryElement', 'relative']),\n\n  /**\n   * Style applied to menu element (that is the `.slds-dropdown` element)\n   */\n  menuStyle: PropTypes.object,\n\n  /**\n   * Positions dropdown menu with a nubbin--that is the arrow notch. The placement options correspond to the placement of the nubbin. This is implemeted with CSS classes and is best used with a `Button` with \"icon container\" styling (`iconVariant=\"container\"`). Use with `isInline` prop, since positioning is determined by CSS via absolute-relative positioning, and using an absolutely positioned menu will not position the menu correctly without manual offsets.\n   */\n  nubbinPosition: PropTypes.oneOf(['top left', 'top', 'top right', 'bottom left', 'bottom', 'bottom right']),\n\n  /**\n   * Is only called when `openOn` is set to `hover` and when the triggering button loses focus.\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * This prop is passed onto the triggering `Button`. Triggered when the trigger button is clicked.\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * Is only called when `openOn` is set to `hover` and when the triggering button gains focus.\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * Determines if mouse hover or click opens or closes the dropdown menu. The default of `click` opens the menu on click, touch, or keyboard navigation and is highly recommended to comply with accessibility standards. The other options are `hover` which opens when the mouse enters the focusable area, and `hybrid` which causes the menu to open on clicking of the trigger, but closes the menu when the mouse leaves the menu and trigger area. If you are planning on using `hover` or `hybrid`, please pause a moment and reconsider.\n   */\n  openOn: PropTypes.oneOf(['hover', 'click', 'hybrid']),\n\n  /**\n   * Called when a key pressed.\n   */\n  onKeyDown: PropTypes.func,\n\n  /**\n   * Called when mouse clicks down on the trigger button.\n   */\n  onMouseDown: PropTypes.func,\n\n  /**\n   * Called when mouse hovers over the trigger button. This is only called if `this.props.openOn` is set to `hover`.\n   */\n  onMouseEnter: PropTypes.func,\n\n  /**\n   * Called when mouse hover leaves the trigger button. This is only called if `this.props.openOn` is set to `hover`.\n   */\n  onMouseLeave: PropTypes.func,\n\n  /**\n   * Triggered when an item in the menu is clicked.\n   */\n  onSelect: PropTypes.func,\n\n  /**\n   * Triggered when the dropdown is opened.\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Triggered when the dropdown is closed.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * An array of menu item objects. `className` and `id` object keys are applied to the `li` DOM node. `divider` key can have a value of `top` or `bottom`. `rightIcon` and `leftIcon` are not actually `Icon` components, but prop objects that get passed to an `Icon` component. The `href` key will be added to the `a` and its default click event will be prevented. Here is a sample:\n   * ```\n   * [{\n   *   className: 'custom-li-class',\n   *     divider: 'bottom',\n   *     label: 'A Header',\n   *     type: 'header'\n   *  }, {\n   *     href: 'http://sfdc.co/',\n   *     id: 'custom-li-id',\n   *     label: 'Has a value',\n   *   leftIcon: {\n   *    name: 'settings',\n   *    category: 'utility'\n   *   },\n   *   rightIcon: {\n   *    name: 'settings',\n   *    category: 'utility'\n   *   },\n   *     type: 'item',\n   *     value: 'B0'\n   *  }, {\n   *   tooltipContent: 'Displays a tooltip when hovered over with this content. The `tooltipMenuItem` prop must be set for this to work.',\n   *   type: 'divider'\n   * }]\n   * ```\n   */\n  options: PropTypes.array,\n\n  /**\n   * An object of CSS styles that are applied to the triggering button.\n   */\n  style: PropTypes.object,\n\n  /**\n   * Write <code>\"-1\"</code> if you don't want the user to tab to the button.\n   */\n  tabIndex: PropTypes.string,\n\n  /**\n   * If `true`, adds a transparent overlay when the menu is open to handle outside clicks. Allows clicks on iframes to be captured, but also forces a double-click to interact with other elements. If a function is passed, custom overlay logic may be defined by the app.\n   */\n  overlay: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n\n  /**\n   * Current selected menu item.\n   */\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.array]),\n\n  /**\n   * This prop is passed onto the triggering `Button`. It creates a tooltip with the content of the `node` provided.\n   */\n  tooltip: PropTypes.node,\n\n  /**\n   * Accepts a `Tooltip` component to be used as the template for menu item tooltips that appear via the `tooltipContent` options object attribute. Must be present for `tooltipContent` to work\n   */\n  tooltipMenuItem: PropTypes.node,\n\n  /**\n   * CSS classes to be added to wrapping trigger `div` around the button.\n   */\n  triggerClassName: PropTypes.oneOfType([PropTypes.array, PropTypes.object, PropTypes.string]),\n\n  /**\n   * Whether this dropdown supports multi select.\n   */\n  multiple: PropTypes.bool,\n\n  /**\n   *  To adjust the width of the menu dropdown\n   */\n  width: PropTypes.oneOf(['xx-small', 'x-small', 'small', 'medium', 'bottom', 'large'])\n};\nvar defaultProps = {\n  align: 'left',\n  hoverCloseDelay: 300,\n  length: '5',\n  menuPosition: 'absolute',\n  openOn: 'click',\n  width: 'medium',\n  inverse: false\n};\n/**\n * The MenuDropdown component is a variant of the Lightning Design System Menu component. This component\n * may require a polyfill such as [classList](https://github.com/yola/classlist-polyfill) due to\n * [react-onclickoutside](https://github.com/Pomax/react-onclickoutside) if Internet Explorer 11\n * support is needed.\n *\n * This component is wrapped in a [higher order component to listen for clicks outside itself](https://github.com/kentor/react-click-outside) and thus requires use of `ReactDOM`.\n */\n\nvar MenuDropdown = /*#__PURE__*/function (_React$Component) {\n  _inherits(MenuDropdown, _React$Component);\n\n  var _super = _createSuper(MenuDropdown);\n\n  function MenuDropdown(props) {\n    var _this;\n\n    _classCallCheck(this, MenuDropdown);\n\n    _this = _super.call(this, props); // `checkProps` issues warnings to developers about properties (similar to React's built in development tools)\n\n    _defineProperty(_assertThisInitialized(_this), \"getId\", function () {\n      return _this.props.id || _this.generatedId;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getIsOpen\", function () {\n      return !!(typeof _this.props.isOpen === 'boolean' ? _this.props.isOpen : _this.state.isOpen);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getIndexByValue\", function (value, options) {\n      var foundIndex = -1;\n\n      if (options && options.length) {\n        options.some(function (element, index) {\n          if (element && element.value === value) {\n            foundIndex = index;\n            return true;\n          }\n\n          return false;\n        });\n      }\n\n      return foundIndex;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getValueByIndex\", function (index) {\n      return _this.props.options[index];\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getListItemRenderer\", function () {\n      return _this.props.listItemRenderer ? _this.props.listItemRenderer : ListItemLabel;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getListItemId\", function (index) {\n      var menuItemId;\n\n      if (index !== undefined) {\n        var menuId = isFunction(_this.getId) ? _this.getId() : _this.props.id;\n        menuItemId = \"\".concat(menuId, \"-item-\").concat(index);\n      }\n\n      return menuItemId;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setFocus\", function () {\n      if (!_this.isHover && !_this.isUnmounting && _this.trigger) {\n        ReactDOM.findDOMNode(_this.trigger).focus(); // eslint-disable-line react/no-find-dom-node\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getMenu\", function () {\n      return ReactDOM.findDOMNode(_this.list);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getMenuItem\", function (index) {\n      if (index !== undefined && _this.listItems) {\n        return ReactDOM.findDOMNode(_this.listItems[index]); // eslint-disable-line react/no-find-dom-node\n      }\n\n      return undefined;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getCurrentSelectedIndices\", function (nextProps) {\n      if (_this.props.multiple === true) {\n        var values = [];\n        var currentIndices = [];\n\n        if (!Array.isArray(nextProps.value)) {\n          // eslint-disable-next-line fp/no-mutating-methods\n          values.push(nextProps.value);\n        } else {\n          values = nextProps.value;\n        }\n\n        values = values.filter(function (value) {\n          return _this.getIndexByValue(value, nextProps.options) !== -1;\n        });\n        currentIndices = values.map(function (value) {\n          return _this.getIndexByValue(value, nextProps.options);\n        });\n        return {\n          selectedIndices: currentIndices\n        };\n      }\n\n      return {\n        selectedIndex: _this.getIndexByValue(nextProps.value, nextProps.options)\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"saveRefToTrigger\", function (trigger) {\n      _this.trigger = trigger;\n\n      if (!_this.state.triggerRendered) {\n        _this.setState({\n          triggerRendered: true\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"saveRefToTriggerContainer\", function (triggerContainer) {\n      _this.triggerContainer = triggerContainer;\n      if (!_this.trigger) _this.trigger = triggerContainer;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"saveRefToList\", function (list) {\n      _this.list = list;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"saveRefToListItem\", function (listItem, index) {\n      if (!_this.listItems) {\n        _this.listItems = {};\n      }\n\n      _this.listItems[index] = listItem;\n\n      if (index === _this.state.focusedIndex) {\n        _this.handleKeyboardFocus(_this.state.focusedIndex);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleClose\", function () {\n      var isOpen = _this.getIsOpen();\n\n      if (isOpen) {\n        if (currentOpenDropdown === _assertThisInitialized(_this)) {\n          currentOpenDropdown = undefined;\n        }\n\n        _this.setState({\n          isOpen: false\n        });\n\n        _this.isHover = false;\n\n        if (_this.props.onClose) {\n          _this.props.onClose();\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleOpen\", function () {\n      var isOpen = _this.getIsOpen();\n\n      if (!isOpen) {\n        if (currentOpenDropdown && isFunction(currentOpenDropdown.handleClose)) {\n          currentOpenDropdown.handleClose();\n        }\n\n        currentOpenDropdown = _assertThisInitialized(_this);\n\n        _this.setState({\n          isOpen: true\n        });\n\n        if (_this.props.onOpen) {\n          _this.props.onOpen();\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleMouseEnter\", function (event) {\n      var isOpen = _this.getIsOpen();\n\n      _this.isHover = true;\n\n      if (!isOpen && _this.props.openOn === 'hover') {\n        _this.handleOpenForHover();\n      } else {\n        // we want this clear when openOn is hover or hybrid\n        clearTimeout(_this.isClosing);\n      }\n\n      if (_this.props.onMouseEnter) {\n        _this.props.onMouseEnter(event);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleMouseLeave\", function (event) {\n      var isOpen = _this.getIsOpen();\n\n      if (isOpen) {\n        _this.isClosing = setTimeout(function () {\n          _this.handleCloseForHover();\n        }, _this.props.hoverCloseDelay);\n      }\n\n      if (_this.props.onMouseLeave) {\n        _this.props.onMouseLeave(event);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleCloseForHover\", function () {\n      var isOpen = _this.getIsOpen();\n\n      if (isOpen) {\n        _this.handleClose();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleOpenForHover\", function () {\n      var isOpen = _this.getIsOpen();\n\n      if (!isOpen) {\n        _this.handleOpen();\n\n        _this.setFocus();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleClick\", function (event) {\n      var isOpen = _this.getIsOpen();\n\n      if (!isOpen) {\n        _this.handleOpen();\n\n        _this.setFocus();\n      } else {\n        _this.handleClose();\n      }\n\n      if (_this.props.onClick) {\n        _this.props.onClick(event);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleFocus\", function (event) {\n      if (_this.props.onFocus) {\n        _this.props.onFocus(event);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleClickCustomContent\", function () {\n      _this.setFocus();\n\n      _this.handleClose();\n\n      if (_this.props.onSelect) {\n        _this.props.onSelect();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSelect\", function (index) {\n      if (!_this.props.multiple) {\n        _this.setState({\n          selectedIndex: index\n        });\n\n        _this.handleClose();\n\n        _this.setFocus();\n      } else if (_this.props.multiple && _this.state.selectedIndices.indexOf(index) === -1) {\n        // eslint-disable-next-line react/no-access-state-in-setstate\n        var currentIndices = _this.state.selectedIndices.concat(index);\n\n        _this.setState({\n          selectedIndices: currentIndices\n        });\n      } else if (_this.props.multiple) {\n        var deselectIndex = _this.state.selectedIndices.indexOf(index); // eslint-disable-next-line react/no-access-state-in-setstate\n\n\n        var currentSelected = _this.state.selectedIndices; // eslint-disable-next-line fp/no-mutating-methods\n\n        currentSelected.splice(deselectIndex, 1);\n\n        _this.setState({\n          selectedIndices: currentSelected\n        });\n      }\n\n      if (_this.props.onSelect) {\n        var option = _this.getValueByIndex(index);\n\n        _this.props.onSelect(option, {\n          option: option,\n          optionIndex: index\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleKeyDown\", function (event) {\n      if (event.keyCode) {\n        if (event.keyCode === KEYS.ENTER || event.keyCode === KEYS.SPACE || event.keyCode === KEYS.DOWN || event.keyCode === KEYS.UP) {\n          EventUtil.trap(event);\n        }\n\n        if (event.keyCode !== KEYS.TAB) {\n          var isOpen = _this.getIsOpen();\n\n          _this.handleKeyboardNavigate({\n            event: event,\n            isOpen: isOpen,\n            key: event.key,\n            keyCode: event.keyCode,\n            onSelect: _this.handleSelect,\n            target: event.target,\n            toggleOpen: _this.toggleOpen\n          });\n        } else {\n          _this.handleCancel();\n        }\n\n        if (_this.props.onKeyDown) {\n          _this.props.onKeyDown(event);\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleCancel\", function () {\n      _this.setFocus();\n\n      _this.handleClose();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleClickOutside\", function () {\n      _this.handleClose();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleKeyboardNavigate\", function (_ref) {\n      var event = _ref.event,\n          _ref$isOpen = _ref.isOpen,\n          isOpen = _ref$isOpen === void 0 ? true : _ref$isOpen,\n          keyCode = _ref.keyCode,\n          _ref$onFocus = _ref.onFocus,\n          onFocus = _ref$onFocus === void 0 ? _this.handleKeyboardFocus : _ref$onFocus,\n          onSelect = _ref.onSelect,\n          target = _ref.target,\n          _ref$toggleOpen = _ref.toggleOpen,\n          toggleOpen = _ref$toggleOpen === void 0 ? noop : _ref$toggleOpen;\n      keyboardNavigate({\n        componentContext: _assertThisInitialized(_this),\n        currentFocusedIndex: _this.state.focusedIndex,\n        event: event,\n        isOpen: isOpen,\n        keyCode: keyCode,\n        navigableItems: _this.navigableItems,\n        onFocus: onFocus,\n        onSelect: onSelect,\n        target: target,\n        toggleOpen: toggleOpen\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleKeyboardFocus\", function (focusedIndex) {\n      if (_this.state.focusedIndex !== focusedIndex) {\n        _this.setState({\n          focusedIndex: focusedIndex\n        });\n      }\n\n      var menu = isFunction(_this.getMenu) ? _this.getMenu() : getMenu(_assertThisInitialized(_this));\n      var menuItem = isFunction(_this.getMenuItem) ? _this.getMenuItem(focusedIndex, menu) : getMenuItem(_this.getListItemId(focusedIndex));\n\n      if (menuItem) {\n        _this.focusMenuItem(menuItem);\n\n        _this.scrollToMenuItem(menu, menuItem);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"focusMenuItem\", function (menuItem) {\n      menuItem.getElementsByTagName('a')[0].focus();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"scrollToMenuItem\", function (menu, menuItem) {\n      if (menu && menuItem) {\n        var menuHeight = menu.offsetHeight;\n        var menuTop = menu.scrollTop;\n        var menuItemTop = menuItem.offsetTop - menu.offsetTop;\n\n        if (menuItemTop < menuTop) {\n          // eslint-disable-next-line no-param-reassign\n          menu.scrollTop = menuItemTop;\n        } else {\n          var menuBottom = menuTop + menuHeight + menu.offsetTop;\n          var menuItemBottom = menuItemTop + menuItem.offsetHeight + menu.offsetTop;\n\n          if (menuItemBottom > menuBottom) {\n            // eslint-disable-next-line no-param-reassign\n            menu.scrollTop = menuItemBottom - menuHeight - menu.offsetTop;\n          }\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"toggleOpen\", function () {\n      var isOpen = _this.getIsOpen();\n\n      _this.setFocus();\n\n      if (isOpen) {\n        _this.handleClose();\n      } else {\n        _this.handleOpen();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderDefaultMenuContent\", function (customListProps) {\n      return /*#__PURE__*/React.createElement(List, _extends({\n        key: \"\".concat(_this.getId(), \"-dropdown-list\"),\n        checkmark: _this.props.checkmark,\n        getListItemId: _this.getListItemId,\n        itemRefs: _this.saveRefToListItem,\n        itemRenderer: _this.getListItemRenderer(),\n        onCancel: _this.handleCancel,\n        onSelect: _this.handleSelect,\n        options: _this.props.options,\n        ref: _this.saveRefToList,\n        selectedIndex: !_this.props.multiple ? _this.state.selectedIndex : undefined,\n        selectedIndices: _this.props.multiple ? _this.state.selectedIndices : undefined,\n        tooltipMenuItem: _this.props.tooltipMenuItem,\n        triggerId: _this.getId(),\n        length: _this.props.length\n      }, customListProps));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderMenuContent\", function (customContent) {\n      /**\n       * Custom content for dropdown was a hack done in the past. If there's more than a listbox within a dropdown, then it should be a popover as explained for the `children` prop.\n       *\n       * This code block shows how things are done in the past:\n       * ```\n       * <Dropdown>\n       *   <Trigger>\n       *   <Button iconCategory=\"utility\" iconName=\"settings\" />\n       *   </Trigger>\n       *   <div>Look ma! This is Custom Content.</div>\n       *   <List options={[myArray]}/>\n       * </Dropdown>\n       * ```\n       */\n      var customContentWithListPropInjection = []; // Dropdown can take a Trigger component as a child and then return it as the parent DOM element.\n\n      React.Children.forEach(customContent, function (child) {\n        if (child && child.type.displayName === LIST) {\n          // eslint-disable-next-line fp/no-mutating-methods\n          customContentWithListPropInjection.push(_this.renderDefaultMenuContent(child.props));\n        } else if (child) {\n          var clonedCustomContent = /*#__PURE__*/React.cloneElement(child, {\n            onClick: _this.handleClickCustomContent,\n            key: shortid.generate()\n          }); // eslint-disable-next-line fp/no-mutating-methods\n\n          customContentWithListPropInjection.push(clonedCustomContent);\n        }\n      });\n\n      if (customContentWithListPropInjection.length === 0) {\n        customContentWithListPropInjection = null;\n      }\n\n      return customContentWithListPropInjection || _this.renderDefaultMenuContent();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderDialog\", function (customContent, isOpen, outsideClickIgnoreClass) {\n      var align = 'bottom';\n      var hasNubbin = false;\n      var positionClassName = '';\n\n      if (_this.props.nubbinPosition) {\n        hasNubbin = true;\n        align = DropdownToDialogNubbinMapping[_this.props.nubbinPosition];\n      } else if (_this.props.align) {\n        align = _this.props.align === 'center' ? 'bottom' : \"bottom \".concat(_this.props.align);\n      }\n\n      var positions = DropdownToDialogNubbinMapping[align].split(' ');\n      positionClassName = classNames(positions.map(function (position) {\n        return \"slds-dropdown_\".concat(position);\n      })); // FOR BACKWARDS COMPATIBILITY\n\n      var menuPosition = _this.props.isInline ? 'relative' : _this.props.menuPosition; // eslint-disable-line react/prop-types\n\n      var menuStylesBase = {};\n\n      if (_this.props.align === 'center' && !hasNubbin) {\n        menuStylesBase.transform = 'none';\n      }\n\n      return isOpen ? /*#__PURE__*/React.createElement(Dialog, {\n        align: align,\n        className: classNames(_this.props.containerClassName),\n        closeOnTabKey: true,\n        contentsClassName: classNames('slds-dropdown', \"slds-dropdown_\".concat(_this.props.width), 'slds-text-align_left', 'ignore-react-onclickoutside', _this.props.className, positionClassName, {\n          'slds-dropdown_inverse': _this.props.inverse\n        }),\n        context: _this.context,\n        hasNubbin: hasNubbin,\n        hasStaticAlignment: _this.props.hasStaticAlignment,\n        inheritWidthOf: _this.props.inheritTargetWidth ? 'target' : 'none',\n        offset: _this.props.offset,\n        onClose: _this.handleClose,\n        onKeyDown: _this.handleKeyDown,\n        outsideClickIgnoreClass: outsideClickIgnoreClass,\n        position: menuPosition,\n        style: _objectSpread(_objectSpread({}, menuStylesBase), _this.props.menuStyle),\n        onRequestTargetElement: function onRequestTargetElement() {\n          return _this.trigger;\n        }\n      }, _this.renderMenuContent(customContent)) : null;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderOverlay\", function (isOpen) {\n      if (isFunction(overlay) && documentDefined) {\n        overlay(isOpen, overlay);\n      } else if (_this.props.overlay && isOpen && !_this.overlay && documentDefined) {\n        _this.overlay = overlay;\n        document.querySelector('body').appendChild(_this.overlay);\n      } else if (!isOpen && _this.overlay && _this.overlay.parentNode) {\n        _this.overlay.parentNode.removeChild(_this.overlay);\n\n        _this.overlay = undefined;\n      }\n    });\n\n    checkProps(MENU_DROPDOWN, props, componentDoc);\n    _this.generatedId = shortid.generate();\n\n    var currentSelectedIndices = _this.getCurrentSelectedIndices(props);\n\n    _this.state = _objectSpread({\n      focusedIndex: -1,\n      selectedIndex: -1,\n      selectedIndices: []\n    }, currentSelectedIndices);\n    _this.navigableItems = getNavigableItems(props.options);\n    return _this;\n  }\n\n  _createClass(MenuDropdown, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.value !== this.props.value) {\n        var nextState = this.getCurrentSelectedIndices(this.props); // eslint-disable-next-line react/no-did-update-set-state\n\n        this.setState(nextState);\n      }\n\n      if (prevProps.isOpen !== this.props.isOpen) {\n        this.setFocus();\n      }\n\n      if (!isEqual(prevProps.options, this.props.options)) {\n        this.navigableItems = getNavigableItems(this.props.options);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (currentOpenDropdown === this) {\n        currentOpenDropdown = undefined;\n      }\n\n      this.isUnmounting = true;\n      this.renderOverlay(false);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // Dropdowns are used by other components. The default trigger is a button, but some other components use `li` elements. The following allows `MenuDropdown` to be extended by providing a child component with the displayName of `DropdownTrigger`.\n      var CurrentTrigger = DefaultTrigger;\n      var CustomTriggerChildProps = {}; // Child elements that do not have the display name of the value of `MENU_DROPDOWN_TRIGGER` in `components/constants.js` will be considered custom content and rendered in the popover.\n\n      var customContent = []; // Dropdown can take a Trigger component as a child and then return it as the parent DOM element.\n\n      React.Children.forEach(this.props.children, function (child) {\n        if (child && child.type.displayName === MENU_DROPDOWN_TRIGGER) {\n          // `CustomTriggerChildProps` is not used by the default button Trigger, but by other triggers\n          CustomTriggerChildProps = child.props;\n          CurrentTrigger = child.type;\n        } else if (child) {\n          // eslint-disable-next-line fp/no-mutating-methods\n          customContent.push(child);\n        }\n      });\n\n      if (customContent.length === 0) {\n        customContent = null;\n      }\n\n      var outsideClickIgnoreClass = \"ignore-click-\".concat(this.getId());\n      var isOpen = !this.props.disabled && this.getIsOpen() && !!this.trigger;\n      this.renderOverlay(isOpen);\n      /* Below are three sections of props:\n       - The first are the props that may be given by the dropdown component. These may get deprecated in the future.\n       - The next set of props (`CustomTriggerChildProps`) are props that can be overwritten by the end developer.\n       - The final set are props that should not be overwritten, since they are ones that tie the trigger to the dropdown menu.\n      */\n\n      return /*#__PURE__*/React.createElement(CurrentTrigger, _extends({\n        \"aria-haspopup\": true,\n        assistiveText: this.props.assistiveText,\n        className: classNames(outsideClickIgnoreClass, this.props.buttonClassName),\n        disabled: this.props.disabled,\n        hint: this.props.hint,\n        iconCategory: this.props.iconCategory,\n        iconName: this.props.iconName,\n        iconPosition: this.props.iconPosition,\n        iconSize: this.props.iconSize,\n        iconVariant: this.props.iconVariant,\n        id: this.getId(),\n        inverse: this.props.buttonInverse,\n        isOpen: isOpen,\n        label: this.props.label,\n        menu: this.renderDialog(customContent, isOpen, outsideClickIgnoreClass),\n        onBlur: this.props.onBlur,\n        onClick: this.props.openOn === 'click' || this.props.openOn === 'hybrid' ? this.handleClick : this.props.onClick,\n        onFocus: this.props.openOn === 'hover' ? this.handleFocus : null,\n        onKeyDown: this.handleKeyDown,\n        onMouseDown: this.props.onMouseDown,\n        onMouseEnter: this.props.openOn === 'hover' || this.props.openOn === 'hybrid' ? this.handleMouseEnter : null,\n        onMouseLeave: this.props.openOn === 'hover' || this.props.openOn === 'hybrid' ? this.handleMouseLeave : null,\n        openOn: this.props.openOn,\n        ref: this.saveRefToTriggerContainer,\n        style: this.props.style,\n        tabIndex: this.props.tabIndex || (isOpen ? '-1' : '0'),\n        tooltip: this.props.tooltip,\n        triggerClassName: this.props.triggerClassName,\n        triggerRef: this.saveRefToTrigger,\n        variant: this.props.buttonVariant\n      }, CustomTriggerChildProps));\n    }\n  }]);\n\n  return MenuDropdown;\n}(React.Component);\n\n_defineProperty(MenuDropdown, \"displayName\", MENU_DROPDOWN);\n\nMenuDropdown.contextType = IconSettingsContext;\nMenuDropdown.propTypes = propTypes;\nMenuDropdown.defaultProps = defaultProps;\nexport default MenuDropdown;\nexport { ListItem, ListItemLabel, DropdownNubbinPositions };","map":{"version":3,"sources":["../../../.tmp-es/components/menu-dropdown/menu-dropdown.jsx"],"names":["documentDefined","overlay","document","style","DropdownNubbinPositions","noop","itemIsSelectable","item","getNavigableItems","navigableItems","Array","items","index","text","ReactDOM","context","menuItem","DropdownToDialogNubbinMapping","top","bottom","propTypes","align","PropTypes","assistiveText","buttonClassName","buttonInverse","buttonVariant","checkmark","children","className","containerClassName","disabled","hasStaticAlignment","hint","hoverCloseDelay","iconCategory","requiredIf","props","iconName","iconPosition","iconVariant","iconSize","id","inverse","isOpen","label","listItemRenderer","length","menuPosition","menuStyle","nubbinPosition","onBlur","onClick","onFocus","openOn","onKeyDown","onMouseDown","onMouseEnter","onMouseLeave","onSelect","onOpen","onClose","options","tabIndex","value","tooltip","tooltipMenuItem","triggerClassName","multiple","width","defaultProps","MenuDropdown","React","Component","MENU_DROPDOWN","checkProps","shortid","currentSelectedIndices","focusedIndex","selectedIndex","selectedIndices","prevProps","nextState","isEqual","currentOpenDropdown","foundIndex","element","menuId","isFunction","menuItemId","values","currentIndices","nextProps","triggerRendered","clearTimeout","setTimeout","deselectIndex","currentSelected","option","optionIndex","event","KEYS","EventUtil","key","keyCode","target","toggleOpen","handleKeyboardFocus","keyboardNavigate","componentContext","currentFocusedIndex","menu","getMenu","getMenuItem","menuHeight","menuTop","menuItemTop","menuBottom","menuItemBottom","customContentWithListPropInjection","child","clonedCustomContent","hasNubbin","positionClassName","positions","classNames","menuStylesBase","CurrentTrigger","CustomTriggerChildProps","customContent","outsideClickIgnoreClass"],"mappings":"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","sourcesContent":["/* eslint-disable max-lines */\n/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// Implements the [Dropdown design pattern](https://www.lightningdesignsystem.com/components/menus/#flavor-dropdown) in React. Child elements that do not have the display name of the value of `MENU_DROPDOWN_TRIGGER` in `components/constants.js` will be considered custom content and rendered in the popover.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport requiredIf from 'react-required-if';\n\nimport classNames from 'classnames';\n\n// ### isFunction\nimport isFunction from 'lodash.isfunction';\nimport isEqual from 'lodash.isequal';\n\nimport shortid from 'shortid';\n\n// ### Children\nimport Dialog from '../utilities/dialog';\nimport List from '../utilities/menu-list';\nimport ListItem from '../utilities/menu-list/item';\nimport ListItemLabel from '../utilities/menu-list/item-label';\n\n// This is the the default Dropdown Trigger, which expects one button as a child.\nimport DefaultTrigger from './button-trigger';\n\n// This component's `checkProps` which issues warnings to developers about properties\n// when in development mode (similar to React's built in development tools)\nimport checkProps from './check-props';\nimport componentDoc from './component.json';\n\nimport EventUtil from '../../utilities/event';\nimport KeyBuffer from '../../utilities/key-buffer';\nimport keyboardNavigate from '../../utilities/keyboard-navigate';\nimport KEYS from '../../utilities/key-code';\nimport {\n\tMENU_DROPDOWN,\n\tMENU_DROPDOWN_TRIGGER,\n\tLIST,\n} from '../../utilities/constants';\nimport { IconSettingsContext } from '../icon-settings';\n\nconst documentDefined = typeof document !== 'undefined';\n\n// The overlay is an optional way to allow the dropdown to close on outside\n// clicks even when those clicks are over areas that wouldn't normally fire\n// click or touch events (for example, iframes). A single overlay is shared\n// between all dropdowns in the app.\nconst overlay = documentDefined\n\t? document.createElement('span')\n\t: { style: {} };\noverlay.style.top = 0;\noverlay.style.left = 0;\noverlay.style.width = '100%';\noverlay.style.height = '100%';\noverlay.style.position = 'absolute';\n\nlet currentOpenDropdown;\n\nconst DropdownNubbinPositions = [\n\t'top left',\n\t'top',\n\t'top right',\n\t'bottom left',\n\t'bottom',\n\t'bottom right',\n];\n\n// # Keyboard Navigable mixin\n\nconst noop = () => {};\n\nconst itemIsSelectable = (item) =>\n\titem.type !== 'header' && item.type !== 'divider' && !item.disabled;\n\nconst getNavigableItems = (items) => {\n\tconst navigableItems = [];\n\tnavigableItems.indexes = [];\n\tnavigableItems.keyBuffer = new KeyBuffer();\n\n\tif (Array.isArray(items)) {\n\t\titems.forEach((item, index) => {\n\t\t\tif (itemIsSelectable(item)) {\n\t\t\t\t// eslint-disable-next-line fp/no-mutating-methods\n\t\t\t\tnavigableItems.push({\n\t\t\t\t\tindex,\n\t\t\t\t\ttext: `${item.label}`.toLowerCase(),\n\t\t\t\t});\n\n\t\t\t\t// eslint-disable-next-line fp/no-mutating-methods\n\t\t\t\tnavigableItems.indexes.push(index);\n\t\t\t}\n\t\t});\n\t}\n\n\treturn navigableItems;\n};\n\nfunction getMenu(componentRef) {\n\treturn ReactDOM.findDOMNode(componentRef).querySelector('ul.dropdown__list'); // eslint-disable-line react/no-find-dom-node\n}\n\nfunction getMenuItem(menuItemId, context = document) {\n\tlet menuItem;\n\n\tif (menuItemId) {\n\t\tmenuItem = context.getElementById(menuItemId);\n\t}\n\n\treturn menuItem;\n}\n\n/*\n * Dropdowns with nubbins have a different API from other Dialogs\n *\n * Dialog receives an alignment position and whether it has a nubbin. The nubbin position is inferred from the align.\n * Dropdowns have a nubbinPosition which dictates the align, but in an inverse fashion which then gets inversed back by the Dialog.\n *\n * Since Dialog is the future API and we don't want to break backwards compatability, we currently map to the Dialog api here. Even if Dialog will map it again.\n * TODO - deprecate nubbinPosition in favor for additional `align` values and a flag to show a nubbin.\n */\nconst DropdownToDialogNubbinMapping = {\n\ttop: 'bottom',\n\t'top left': 'bottom left',\n\t'top right': 'bottom right',\n\n\tbottom: 'top',\n\t'bottom left': 'top left',\n\t'bottom right': 'top right',\n};\n\nconst propTypes = {\n\t/**\n\t * Aligns the menu center, right, or left respective to the trigger. This is not intended for use with `nubbinPosition`.\n\t */\n\talign: PropTypes.oneOf(['center', 'left', 'right']),\n\t/**\n\t * This prop is passed onto the triggering `Button`. Text that is visually hidden but read aloud by screenreaders to tell the user what the icon means. You can omit this prop if you are using the `label` prop.\n\t */\n\tassistiveText: PropTypes.object,\n\t/**\n\t * CSS classes to be added to triggering button.\n\t */\n\tbuttonClassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * If true, button/icon is white. Meant for buttons or utility icons on dark backgrounds.\n\t */\n\tbuttonInverse: PropTypes.bool,\n\t/**\n\t * This prop is passed onto the triggering `Button`. Determines variant of the Button component that triggers dropdown.\n\t */\n\tbuttonVariant: PropTypes.oneOf([\n\t\t'base',\n\t\t'neutral',\n\t\t'brand',\n\t\t'destructive',\n\t\t'icon',\n\t]),\n\t/**\n\t * If true, renders checkmark icon on the selected Menu Item.\n\t */\n\tcheckmark: PropTypes.bool,\n\t/**\n\t * If you need custom content _and_ a list, use a `<Popover>` instead.\n\t */\n\tchildren: PropTypes.node,\n\t/**\n\t * CSS classes to be added to dropdown menu.\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * By default, these class names will be added to the absolutely-positioned `Dialog` component.\n\t */\n\tcontainerClassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * This prop is passed onto the triggering `Button`. Prevent dropdown menu from opening. Also applies disabled styling to trigger button.\n\t */\n\tdisabled: PropTypes.bool,\n\t/**\n\t * Prevents the dropdown from changing position based on the viewport/window. If set to true your dropdowns can extend outside the viewport _and_ overflow outside of a scrolling parent. If this happens, you might want to consider making the dropdowns contents scrollable to fit the menu on the screen. `hasStaticAlignment` disables this behavior and allows this component to extend beyond boundary elements. _Not tested._\n\t */\n\thasStaticAlignment: PropTypes.bool,\n\t/**\n\t * This prop is passed onto the triggering `Button`. Associates an icon button with another element on the page by changes the color of the SVG. Please reference <a href=\"http://www.lightningdesignsystem.com/components/buttons/#hint\">Lightning Design System Buttons > Hint</a>.\n\t */\n\thint: PropTypes.bool,\n\t/**\n\t * Delay on menu closing in milliseconds.\n\t */\n\thoverCloseDelay: PropTypes.number,\n\t/**\n\t * Name of the icon category. Visit <a href=\"http://www.lightningdesignsystem.com/resources/icons\">Lightning Design System Icons</a> to reference icon categories.\n\t */\n\ticonCategory: requiredIf(\n\t\tPropTypes.oneOf(['action', 'custom', 'doctype', 'standard', 'utility']),\n\t\t(props) => !!props.iconName\n\t),\n\t/**\n\t * Name of the icon. Visit <a href=\"http://www.lightningdesignsystem.com/resources/icons\">Lightning Design System Icons</a> to reference icon names.\n\t */\n\ticonName: PropTypes.string,\n\t/**\n\t * If omitted, icon position is centered.\n\t */\n\ticonPosition: PropTypes.oneOf(['left', 'right']),\n\t/**\n\t * For icon variants, please reference <a href=\"http://www.lightningdesignsystem.com/components/buttons/#icon\">Lightning Design System Icons</a>.\n\t */\n\ticonVariant: PropTypes.oneOf([\n\t\t'bare',\n\t\t'container',\n\t\t'border',\n\t\t'border-filled',\n\t\t'small',\n\t\t'more',\n\t]),\n\t/**\n\t * Determines the size of the icon.\n\t */\n\ticonSize: PropTypes.oneOf(['x-small', 'small', 'medium', 'large']),\n\t/**\n\t * A unique ID is needed in order to support keyboard navigation, ARIA support, and connect the dropdown to the triggering button.\n\t */\n\tid: PropTypes.string,\n\t/**\n\t * Adds inverse class to the dropdown\n\t */\n\tinverse: PropTypes.bool,\n\t/**\n\t * Forces the dropdown to be open or closed. See controlled/uncontrolled callback/prop pattern for more on suggested use view [Concepts and Best Practices](https://github.com/salesforce-ux/design-system-react/blob/master/CONTRIBUTING.md#concepts-and-best-practices)\n\t */\n\tisOpen: PropTypes.bool,\n\t/**\n\t * This prop is passed onto the triggering `Button`. Text within the trigger button.\n\t */\n\tlabel: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n\t/**\n\t * Custom element that overrides the default Menu Item component.\n\t */\n\tlistItemRenderer: PropTypes.func,\n\t/**\n\t * This prop is passed into the List for the menu. Pass null to make it the size of the content, or a string with an integer from here: https://www.lightningdesignsystem.com/components/menus/#flavor-dropdown-height\n\t */\n\tlength: PropTypes.oneOf([null, '5', '7', '10', 5, 7, 10]),\n\t/**\n\t * Please select one of the following:\n\t * * `absolute` - (default) The dialog will use `position: absolute` and style attributes to position itself. This allows inverted placement or flipping of the dialog.\n\t * * `overflowBoundaryElement` - The dialog will overflow scrolling parents. Use on elements that are aligned to the left or right of their target and don't care about the target being within a scrolling parent. Typically this is a popover or tooltip. Dropdown menus can usually open up and down if no room exists. In order to achieve this a portal element will be created and attached to `body`. This element will render into that detached render tree.\n\t * * `relative` - No styling or portals will be used. Menus will be positioned relative to their triggers. This is a great choice for HTML snapshot testing.\n\t */\n\tmenuPosition: PropTypes.oneOf([\n\t\t'absolute',\n\t\t'overflowBoundaryElement',\n\t\t'relative',\n\t]),\n\t/**\n\t * Style applied to menu element (that is the `.slds-dropdown` element)\n\t */\n\tmenuStyle: PropTypes.object,\n\t/**\n\t * Positions dropdown menu with a nubbin--that is the arrow notch. The placement options correspond to the placement of the nubbin. This is implemeted with CSS classes and is best used with a `Button` with \"icon container\" styling (`iconVariant=\"container\"`). Use with `isInline` prop, since positioning is determined by CSS via absolute-relative positioning, and using an absolutely positioned menu will not position the menu correctly without manual offsets.\n\t */\n\tnubbinPosition: PropTypes.oneOf([\n\t\t'top left',\n\t\t'top',\n\t\t'top right',\n\t\t'bottom left',\n\t\t'bottom',\n\t\t'bottom right',\n\t]),\n\t/**\n\t * Is only called when `openOn` is set to `hover` and when the triggering button loses focus.\n\t */\n\tonBlur: PropTypes.func,\n\t/**\n\t * This prop is passed onto the triggering `Button`. Triggered when the trigger button is clicked.\n\t */\n\tonClick: PropTypes.func,\n\t/**\n\t * Is only called when `openOn` is set to `hover` and when the triggering button gains focus.\n\t */\n\tonFocus: PropTypes.func,\n\t/**\n\t * Determines if mouse hover or click opens or closes the dropdown menu. The default of `click` opens the menu on click, touch, or keyboard navigation and is highly recommended to comply with accessibility standards. The other options are `hover` which opens when the mouse enters the focusable area, and `hybrid` which causes the menu to open on clicking of the trigger, but closes the menu when the mouse leaves the menu and trigger area. If you are planning on using `hover` or `hybrid`, please pause a moment and reconsider.\n\t */\n\topenOn: PropTypes.oneOf(['hover', 'click', 'hybrid']),\n\t/**\n\t * Called when a key pressed.\n\t */\n\tonKeyDown: PropTypes.func,\n\t/**\n\t * Called when mouse clicks down on the trigger button.\n\t */\n\tonMouseDown: PropTypes.func,\n\t/**\n\t * Called when mouse hovers over the trigger button. This is only called if `this.props.openOn` is set to `hover`.\n\t */\n\tonMouseEnter: PropTypes.func,\n\t/**\n\t * Called when mouse hover leaves the trigger button. This is only called if `this.props.openOn` is set to `hover`.\n\t */\n\tonMouseLeave: PropTypes.func,\n\t/**\n\t * Triggered when an item in the menu is clicked.\n\t */\n\tonSelect: PropTypes.func,\n\t/**\n\t * Triggered when the dropdown is opened.\n\t */\n\tonOpen: PropTypes.func,\n\t/**\n\t * Triggered when the dropdown is closed.\n\t */\n\tonClose: PropTypes.func,\n\t/**\n\t * An array of menu item objects. `className` and `id` object keys are applied to the `li` DOM node. `divider` key can have a value of `top` or `bottom`. `rightIcon` and `leftIcon` are not actually `Icon` components, but prop objects that get passed to an `Icon` component. The `href` key will be added to the `a` and its default click event will be prevented. Here is a sample:\n\t * ```\n\t * [{\n\t *   className: 'custom-li-class',\n\t *     divider: 'bottom',\n\t *     label: 'A Header',\n\t *     type: 'header'\n\t *  }, {\n\t *     href: 'http://sfdc.co/',\n\t *     id: 'custom-li-id',\n\t *     label: 'Has a value',\n\t *   leftIcon: {\n\t *    name: 'settings',\n\t *    category: 'utility'\n\t *   },\n\t *   rightIcon: {\n\t *    name: 'settings',\n\t *    category: 'utility'\n\t *   },\n\t *     type: 'item',\n\t *     value: 'B0'\n\t *  }, {\n\t *   tooltipContent: 'Displays a tooltip when hovered over with this content. The `tooltipMenuItem` prop must be set for this to work.',\n\t *   type: 'divider'\n\t * }]\n\t * ```\n\t */\n\toptions: PropTypes.array,\n\t/**\n\t * An object of CSS styles that are applied to the triggering button.\n\t */\n\tstyle: PropTypes.object,\n\t/**\n\t * Write <code>\"-1\"</code> if you don't want the user to tab to the button.\n\t */\n\ttabIndex: PropTypes.string,\n\t/**\n\t * If `true`, adds a transparent overlay when the menu is open to handle outside clicks. Allows clicks on iframes to be captured, but also forces a double-click to interact with other elements. If a function is passed, custom overlay logic may be defined by the app.\n\t */\n\toverlay: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n\t/**\n\t * Current selected menu item.\n\t */\n\tvalue: PropTypes.oneOfType([\n\t\tPropTypes.number,\n\t\tPropTypes.string,\n\t\tPropTypes.array,\n\t]),\n\t/**\n\t * This prop is passed onto the triggering `Button`. It creates a tooltip with the content of the `node` provided.\n\t */\n\ttooltip: PropTypes.node,\n\t/**\n\t * Accepts a `Tooltip` component to be used as the template for menu item tooltips that appear via the `tooltipContent` options object attribute. Must be present for `tooltipContent` to work\n\t */\n\ttooltipMenuItem: PropTypes.node,\n\t/**\n\t * CSS classes to be added to wrapping trigger `div` around the button.\n\t */\n\ttriggerClassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * Whether this dropdown supports multi select.\n\t */\n\tmultiple: PropTypes.bool,\n\t/**\n\t *  To adjust the width of the menu dropdown\n\t */\n\twidth: PropTypes.oneOf([\n\t\t'xx-small',\n\t\t'x-small',\n\t\t'small',\n\t\t'medium',\n\t\t'bottom',\n\t\t'large',\n\t]),\n};\n\nconst defaultProps = {\n\talign: 'left',\n\thoverCloseDelay: 300,\n\tlength: '5',\n\tmenuPosition: 'absolute',\n\topenOn: 'click',\n\twidth: 'medium',\n\tinverse: false,\n};\n\n/**\n * The MenuDropdown component is a variant of the Lightning Design System Menu component. This component\n * may require a polyfill such as [classList](https://github.com/yola/classlist-polyfill) due to\n * [react-onclickoutside](https://github.com/Pomax/react-onclickoutside) if Internet Explorer 11\n * support is needed.\n *\n * This component is wrapped in a [higher order component to listen for clicks outside itself](https://github.com/kentor/react-click-outside) and thus requires use of `ReactDOM`.\n */\nclass MenuDropdown extends React.Component {\n\tstatic displayName = MENU_DROPDOWN;\n\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\t// `checkProps` issues warnings to developers about properties (similar to React's built in development tools)\n\t\tcheckProps(MENU_DROPDOWN, props, componentDoc);\n\n\t\tthis.generatedId = shortid.generate();\n\n\t\tconst currentSelectedIndices = this.getCurrentSelectedIndices(props);\n\n\t\tthis.state = {\n\t\t\tfocusedIndex: -1,\n\t\t\tselectedIndex: -1,\n\t\t\tselectedIndices: [],\n\t\t\t...currentSelectedIndices,\n\t\t};\n\n\t\tthis.navigableItems = getNavigableItems(props.options);\n\t}\n\n\tcomponentDidUpdate(prevProps) {\n\t\tif (prevProps.value !== this.props.value) {\n\t\t\tconst nextState = this.getCurrentSelectedIndices(this.props);\n\t\t\t// eslint-disable-next-line react/no-did-update-set-state\n\t\t\tthis.setState(nextState);\n\t\t}\n\n\t\tif (prevProps.isOpen !== this.props.isOpen) {\n\t\t\tthis.setFocus();\n\t\t}\n\n\t\tif (!isEqual(prevProps.options, this.props.options)) {\n\t\t\tthis.navigableItems = getNavigableItems(this.props.options);\n\t\t}\n\t}\n\n\tcomponentWillUnmount() {\n\t\tif (currentOpenDropdown === this) {\n\t\t\tcurrentOpenDropdown = undefined;\n\t\t}\n\t\tthis.isUnmounting = true;\n\t\tthis.renderOverlay(false);\n\t}\n\n\tgetId = () => this.props.id || this.generatedId;\n\n\tgetIsOpen = () =>\n\t\t!!(typeof this.props.isOpen === 'boolean'\n\t\t\t? this.props.isOpen\n\t\t\t: this.state.isOpen);\n\n\tgetIndexByValue = (value, options) => {\n\t\tlet foundIndex = -1;\n\n\t\tif (options && options.length) {\n\t\t\toptions.some((element, index) => {\n\t\t\t\tif (element && element.value === value) {\n\t\t\t\t\tfoundIndex = index;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t});\n\t\t}\n\n\t\treturn foundIndex;\n\t};\n\n\tgetValueByIndex = (index) => this.props.options[index];\n\n\tgetListItemRenderer = () =>\n\t\tthis.props.listItemRenderer ? this.props.listItemRenderer : ListItemLabel;\n\n\tgetListItemId = (index) => {\n\t\tlet menuItemId;\n\n\t\tif (index !== undefined) {\n\t\t\tconst menuId = isFunction(this.getId) ? this.getId() : this.props.id;\n\t\t\tmenuItemId = `${menuId}-item-${index}`;\n\t\t}\n\n\t\treturn menuItemId;\n\t};\n\n\tsetFocus = () => {\n\t\tif (!this.isHover && !this.isUnmounting && this.trigger) {\n\t\t\tReactDOM.findDOMNode(this.trigger).focus(); // eslint-disable-line react/no-find-dom-node\n\t\t}\n\t};\n\n\tgetMenu = () => ReactDOM.findDOMNode(this.list); // eslint-disable-line react/no-find-dom-node\n\n\tgetMenuItem = (index) => {\n\t\tif (index !== undefined && this.listItems) {\n\t\t\treturn ReactDOM.findDOMNode(this.listItems[index]); // eslint-disable-line react/no-find-dom-node\n\t\t}\n\n\t\treturn undefined;\n\t};\n\n\tgetCurrentSelectedIndices = (nextProps) => {\n\t\tif (this.props.multiple === true) {\n\t\t\tlet values = [];\n\t\t\tlet currentIndices = [];\n\t\t\tif (!Array.isArray(nextProps.value)) {\n\t\t\t\t// eslint-disable-next-line fp/no-mutating-methods\n\t\t\t\tvalues.push(nextProps.value);\n\t\t\t} else {\n\t\t\t\tvalues = nextProps.value;\n\t\t\t}\n\t\t\tvalues = values.filter(\n\t\t\t\t(value) => this.getIndexByValue(value, nextProps.options) !== -1\n\t\t\t);\n\t\t\tcurrentIndices = values.map((value) =>\n\t\t\t\tthis.getIndexByValue(value, nextProps.options)\n\t\t\t);\n\n\t\t\treturn {\n\t\t\t\tselectedIndices: currentIndices,\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\tselectedIndex: this.getIndexByValue(nextProps.value, nextProps.options),\n\t\t};\n\t};\n\n\t// Trigger opens, closes, and recieves focus on close\n\tsaveRefToTrigger = (trigger) => {\n\t\tthis.trigger = trigger;\n\n\t\tif (!this.state.triggerRendered) {\n\t\t\tthis.setState({ triggerRendered: true });\n\t\t}\n\t};\n\n\t// TriggerContainer is the wrapping outer DOM element which may differ from the actual trigger which is most likely a `button`.\n\tsaveRefToTriggerContainer = (triggerContainer) => {\n\t\tthis.triggerContainer = triggerContainer;\n\t\tif (!this.trigger) this.trigger = triggerContainer;\n\t};\n\n\tsaveRefToList = (list) => {\n\t\tthis.list = list;\n\t};\n\n\tsaveRefToListItem = (listItem, index) => {\n\t\tif (!this.listItems) {\n\t\t\tthis.listItems = {};\n\t\t}\n\n\t\tthis.listItems[index] = listItem;\n\n\t\tif (index === this.state.focusedIndex) {\n\t\t\tthis.handleKeyboardFocus(this.state.focusedIndex);\n\t\t}\n\t};\n\n\thandleClose = () => {\n\t\tconst isOpen = this.getIsOpen();\n\n\t\tif (isOpen) {\n\t\t\tif (currentOpenDropdown === this) {\n\t\t\t\tcurrentOpenDropdown = undefined;\n\t\t\t}\n\n\t\t\tthis.setState({\n\t\t\t\tisOpen: false,\n\t\t\t});\n\n\t\t\tthis.isHover = false;\n\n\t\t\tif (this.props.onClose) {\n\t\t\t\tthis.props.onClose();\n\t\t\t}\n\t\t}\n\t};\n\n\thandleOpen = () => {\n\t\tconst isOpen = this.getIsOpen();\n\n\t\tif (!isOpen) {\n\t\t\tif (currentOpenDropdown && isFunction(currentOpenDropdown.handleClose)) {\n\t\t\t\tcurrentOpenDropdown.handleClose();\n\t\t\t}\n\n\t\t\tcurrentOpenDropdown = this;\n\n\t\t\tthis.setState({\n\t\t\t\tisOpen: true,\n\t\t\t});\n\n\t\t\tif (this.props.onOpen) {\n\t\t\t\tthis.props.onOpen();\n\t\t\t}\n\t\t}\n\t};\n\n\thandleMouseEnter = (event) => {\n\t\tconst isOpen = this.getIsOpen();\n\n\t\tthis.isHover = true;\n\n\t\tif (!isOpen && this.props.openOn === 'hover') {\n\t\t\tthis.handleOpenForHover();\n\t\t} else {\n\t\t\t// we want this clear when openOn is hover or hybrid\n\t\t\tclearTimeout(this.isClosing);\n\t\t}\n\n\t\tif (this.props.onMouseEnter) {\n\t\t\tthis.props.onMouseEnter(event);\n\t\t}\n\t};\n\n\thandleMouseLeave = (event) => {\n\t\tconst isOpen = this.getIsOpen();\n\n\t\tif (isOpen) {\n\t\t\tthis.isClosing = setTimeout(() => {\n\t\t\t\tthis.handleCloseForHover();\n\t\t\t}, this.props.hoverCloseDelay);\n\t\t}\n\n\t\tif (this.props.onMouseLeave) {\n\t\t\tthis.props.onMouseLeave(event);\n\t\t}\n\t};\n\n\t// Special handlers for openOn === hover\n\t// calling onClick inside onMouseEnter/Leave used to cause double clicking the trigger on hover which caused closing and reopening of the dropdown\n\thandleCloseForHover = () => {\n\t\tconst isOpen = this.getIsOpen();\n\t\tif (isOpen) {\n\t\t\tthis.handleClose();\n\t\t}\n\t};\n\n\thandleOpenForHover = () => {\n\t\tconst isOpen = this.getIsOpen();\n\n\t\tif (!isOpen) {\n\t\t\tthis.handleOpen();\n\t\t\tthis.setFocus();\n\t\t}\n\t};\n\n\thandleClick = (event) => {\n\t\tconst isOpen = this.getIsOpen();\n\n\t\tif (!isOpen) {\n\t\t\tthis.handleOpen();\n\t\t\tthis.setFocus();\n\t\t} else {\n\t\t\tthis.handleClose();\n\t\t}\n\n\t\tif (this.props.onClick) {\n\t\t\tthis.props.onClick(event);\n\t\t}\n\t};\n\n\thandleFocus = (event) => {\n\t\tif (this.props.onFocus) {\n\t\t\tthis.props.onFocus(event);\n\t\t}\n\t};\n\n\thandleClickCustomContent = () => {\n\t\tthis.setFocus();\n\t\tthis.handleClose();\n\n\t\tif (this.props.onSelect) {\n\t\t\tthis.props.onSelect();\n\t\t}\n\t};\n\n\thandleSelect = (index) => {\n\t\tif (!this.props.multiple) {\n\t\t\tthis.setState({ selectedIndex: index });\n\t\t\tthis.handleClose();\n\t\t\tthis.setFocus();\n\t\t} else if (\n\t\t\tthis.props.multiple &&\n\t\t\tthis.state.selectedIndices.indexOf(index) === -1\n\t\t) {\n\t\t\t// eslint-disable-next-line react/no-access-state-in-setstate\n\t\t\tconst currentIndices = this.state.selectedIndices.concat(index);\n\t\t\tthis.setState({\n\t\t\t\tselectedIndices: currentIndices,\n\t\t\t});\n\t\t} else if (this.props.multiple) {\n\t\t\tconst deselectIndex = this.state.selectedIndices.indexOf(index);\n\t\t\t// eslint-disable-next-line react/no-access-state-in-setstate\n\t\t\tconst currentSelected = this.state.selectedIndices;\n\t\t\t// eslint-disable-next-line fp/no-mutating-methods\n\t\t\tcurrentSelected.splice(deselectIndex, 1);\n\t\t\tthis.setState({\n\t\t\t\tselectedIndices: currentSelected,\n\t\t\t});\n\t\t}\n\n\t\tif (this.props.onSelect) {\n\t\t\tconst option = this.getValueByIndex(index);\n\t\t\tthis.props.onSelect(option, { option, optionIndex: index });\n\t\t}\n\t};\n\n\thandleKeyDown = (event) => {\n\t\tif (event.keyCode) {\n\t\t\tif (\n\t\t\t\tevent.keyCode === KEYS.ENTER ||\n\t\t\t\tevent.keyCode === KEYS.SPACE ||\n\t\t\t\tevent.keyCode === KEYS.DOWN ||\n\t\t\t\tevent.keyCode === KEYS.UP\n\t\t\t) {\n\t\t\t\tEventUtil.trap(event);\n\t\t\t}\n\n\t\t\tif (event.keyCode !== KEYS.TAB) {\n\t\t\t\tconst isOpen = this.getIsOpen();\n\n\t\t\t\tthis.handleKeyboardNavigate({\n\t\t\t\t\tevent,\n\t\t\t\t\tisOpen,\n\t\t\t\t\tkey: event.key,\n\t\t\t\t\tkeyCode: event.keyCode,\n\t\t\t\t\tonSelect: this.handleSelect,\n\t\t\t\t\ttarget: event.target,\n\t\t\t\t\ttoggleOpen: this.toggleOpen,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.handleCancel();\n\t\t\t}\n\n\t\t\tif (this.props.onKeyDown) {\n\t\t\t\tthis.props.onKeyDown(event);\n\t\t\t}\n\t\t}\n\t};\n\n\thandleCancel = () => {\n\t\tthis.setFocus();\n\t\tthis.handleClose();\n\t};\n\n\thandleClickOutside = () => {\n\t\tthis.handleClose();\n\t};\n\n\t// Handling open / close toggling is optional, and a default implementation is provided for handling focus, but selection _must_ be handled\n\thandleKeyboardNavigate = ({\n\t\tevent,\n\t\tisOpen = true,\n\t\tkeyCode,\n\t\tonFocus = this.handleKeyboardFocus,\n\t\tonSelect,\n\t\ttarget,\n\t\ttoggleOpen = noop,\n\t}) => {\n\t\tkeyboardNavigate({\n\t\t\tcomponentContext: this,\n\t\t\tcurrentFocusedIndex: this.state.focusedIndex,\n\t\t\tevent,\n\t\t\tisOpen,\n\t\t\tkeyCode,\n\t\t\tnavigableItems: this.navigableItems,\n\t\t\tonFocus,\n\t\t\tonSelect,\n\t\t\ttarget,\n\t\t\ttoggleOpen,\n\t\t});\n\t};\n\n\t// This is a bit of an anti-pattern, but it has the upside of being a nice default. Component authors can always override to only set state and do their own focusing in their subcomponents.\n\thandleKeyboardFocus = (focusedIndex) => {\n\t\tif (this.state.focusedIndex !== focusedIndex) {\n\t\t\tthis.setState({ focusedIndex });\n\t\t}\n\n\t\tconst menu = isFunction(this.getMenu) ? this.getMenu() : getMenu(this);\n\n\t\tconst menuItem = isFunction(this.getMenuItem)\n\t\t\t? this.getMenuItem(focusedIndex, menu)\n\t\t\t: getMenuItem(this.getListItemId(focusedIndex));\n\n\t\tif (menuItem) {\n\t\t\tthis.focusMenuItem(menuItem);\n\t\t\tthis.scrollToMenuItem(menu, menuItem);\n\t\t}\n\t};\n\n\tfocusMenuItem = (menuItem) => {\n\t\tmenuItem.getElementsByTagName('a')[0].focus();\n\t};\n\n\tscrollToMenuItem = (menu, menuItem) => {\n\t\tif (menu && menuItem) {\n\t\t\tconst menuHeight = menu.offsetHeight;\n\n\t\t\tconst menuTop = menu.scrollTop;\n\t\t\tconst menuItemTop = menuItem.offsetTop - menu.offsetTop;\n\n\t\t\tif (menuItemTop < menuTop) {\n\t\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\t\tmenu.scrollTop = menuItemTop;\n\t\t\t} else {\n\t\t\t\tconst menuBottom = menuTop + menuHeight + menu.offsetTop;\n\t\t\t\tconst menuItemBottom =\n\t\t\t\t\tmenuItemTop + menuItem.offsetHeight + menu.offsetTop;\n\n\t\t\t\tif (menuItemBottom > menuBottom) {\n\t\t\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\t\t\tmenu.scrollTop = menuItemBottom - menuHeight - menu.offsetTop;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\ttoggleOpen = () => {\n\t\tconst isOpen = this.getIsOpen();\n\t\tthis.setFocus();\n\n\t\tif (isOpen) {\n\t\t\tthis.handleClose();\n\t\t} else {\n\t\t\tthis.handleOpen();\n\t\t}\n\t};\n\n\trenderDefaultMenuContent = (customListProps) => (\n\t\t<List\n\t\t\tkey={`${this.getId()}-dropdown-list`}\n\t\t\tcheckmark={this.props.checkmark}\n\t\t\tgetListItemId={this.getListItemId}\n\t\t\titemRefs={this.saveRefToListItem}\n\t\t\titemRenderer={this.getListItemRenderer()}\n\t\t\tonCancel={this.handleCancel}\n\t\t\tonSelect={this.handleSelect}\n\t\t\toptions={this.props.options}\n\t\t\tref={this.saveRefToList}\n\t\t\tselectedIndex={\n\t\t\t\t!this.props.multiple ? this.state.selectedIndex : undefined\n\t\t\t}\n\t\t\tselectedIndices={\n\t\t\t\tthis.props.multiple ? this.state.selectedIndices : undefined\n\t\t\t}\n\t\t\ttooltipMenuItem={this.props.tooltipMenuItem}\n\t\t\ttriggerId={this.getId()}\n\t\t\tlength={this.props.length}\n\t\t\t{...customListProps}\n\t\t/>\n\t);\n\n\trenderMenuContent = (customContent) => {\n\t\t/**\n\t\t * Custom content for dropdown was a hack done in the past. If there's more than a listbox within a dropdown, then it should be a popover as explained for the `children` prop.\n\t\t *\n\t\t * This code block shows how things are done in the past:\n\t\t * ```\n\t\t * <Dropdown>\n\t\t *   <Trigger>\n\t\t *   <Button iconCategory=\"utility\" iconName=\"settings\" />\n\t\t *   </Trigger>\n\t\t *   <div>Look ma! This is Custom Content.</div>\n\t\t *   <List options={[myArray]}/>\n\t\t * </Dropdown>\n\t\t * ```\n\t\t */\n\t\tlet customContentWithListPropInjection = [];\n\t\t// Dropdown can take a Trigger component as a child and then return it as the parent DOM element.\n\t\tReact.Children.forEach(customContent, (child) => {\n\t\t\tif (child && child.type.displayName === LIST) {\n\t\t\t\t// eslint-disable-next-line fp/no-mutating-methods\n\t\t\t\tcustomContentWithListPropInjection.push(\n\t\t\t\t\tthis.renderDefaultMenuContent(child.props)\n\t\t\t\t);\n\t\t\t} else if (child) {\n\t\t\t\tconst clonedCustomContent = React.cloneElement(child, {\n\t\t\t\t\tonClick: this.handleClickCustomContent,\n\t\t\t\t\tkey: shortid.generate(),\n\t\t\t\t});\n\t\t\t\t// eslint-disable-next-line fp/no-mutating-methods\n\t\t\t\tcustomContentWithListPropInjection.push(clonedCustomContent);\n\t\t\t}\n\t\t});\n\n\t\tif (customContentWithListPropInjection.length === 0) {\n\t\t\tcustomContentWithListPropInjection = null;\n\t\t}\n\n\t\treturn (\n\t\t\tcustomContentWithListPropInjection || this.renderDefaultMenuContent()\n\t\t);\n\t};\n\n\trenderDialog = (customContent, isOpen, outsideClickIgnoreClass) => {\n\t\tlet align = 'bottom';\n\t\tlet hasNubbin = false;\n\t\tlet positionClassName = '';\n\n\t\tif (this.props.nubbinPosition) {\n\t\t\thasNubbin = true;\n\t\t\talign = DropdownToDialogNubbinMapping[this.props.nubbinPosition];\n\t\t} else if (this.props.align) {\n\t\t\talign =\n\t\t\t\tthis.props.align === 'center' ? 'bottom' : `bottom ${this.props.align}`;\n\t\t}\n\n\t\tconst positions = DropdownToDialogNubbinMapping[align].split(' ');\n\t\tpositionClassName = classNames(\n\t\t\tpositions.map((position) => `slds-dropdown_${position}`)\n\t\t);\n\n\t\t// FOR BACKWARDS COMPATIBILITY\n\t\tconst menuPosition = this.props.isInline\n\t\t\t? 'relative'\n\t\t\t: this.props.menuPosition; // eslint-disable-line react/prop-types\n\n\t\tconst menuStylesBase = {};\n\t\tif (this.props.align === 'center' && !hasNubbin) {\n\t\t\tmenuStylesBase.transform = 'none';\n\t\t}\n\n\t\treturn isOpen ? (\n\t\t\t<Dialog\n\t\t\t\talign={align}\n\t\t\t\tclassName={classNames(this.props.containerClassName)}\n\t\t\t\tcloseOnTabKey\n\t\t\t\tcontentsClassName={classNames(\n\t\t\t\t\t'slds-dropdown',\n\t\t\t\t\t`slds-dropdown_${this.props.width}`,\n\t\t\t\t\t'slds-text-align_left',\n\t\t\t\t\t'ignore-react-onclickoutside',\n\t\t\t\t\tthis.props.className,\n\t\t\t\t\tpositionClassName,\n\t\t\t\t\t{\n\t\t\t\t\t\t'slds-dropdown_inverse': this.props.inverse,\n\t\t\t\t\t}\n\t\t\t\t)}\n\t\t\t\tcontext={this.context}\n\t\t\t\thasNubbin={hasNubbin}\n\t\t\t\thasStaticAlignment={this.props.hasStaticAlignment}\n\t\t\t\tinheritWidthOf={this.props.inheritTargetWidth ? 'target' : 'none'}\n\t\t\t\toffset={this.props.offset}\n\t\t\t\tonClose={this.handleClose}\n\t\t\t\tonKeyDown={this.handleKeyDown}\n\t\t\t\toutsideClickIgnoreClass={outsideClickIgnoreClass}\n\t\t\t\tposition={menuPosition}\n\t\t\t\tstyle={{\n\t\t\t\t\t...menuStylesBase,\n\t\t\t\t\t...this.props.menuStyle,\n\t\t\t\t}}\n\t\t\t\tonRequestTargetElement={() => this.trigger}\n\t\t\t>\n\t\t\t\t{this.renderMenuContent(customContent)}\n\t\t\t</Dialog>\n\t\t) : null;\n\t};\n\n\trenderOverlay = (isOpen) => {\n\t\tif (isFunction(overlay) && documentDefined) {\n\t\t\toverlay(isOpen, overlay);\n\t\t} else if (\n\t\t\tthis.props.overlay &&\n\t\t\tisOpen &&\n\t\t\t!this.overlay &&\n\t\t\tdocumentDefined\n\t\t) {\n\t\t\tthis.overlay = overlay;\n\t\t\tdocument.querySelector('body').appendChild(this.overlay);\n\t\t} else if (!isOpen && this.overlay && this.overlay.parentNode) {\n\t\t\tthis.overlay.parentNode.removeChild(this.overlay);\n\t\t\tthis.overlay = undefined;\n\t\t}\n\t};\n\n\trender() {\n\t\t// Dropdowns are used by other components. The default trigger is a button, but some other components use `li` elements. The following allows `MenuDropdown` to be extended by providing a child component with the displayName of `DropdownTrigger`.\n\t\tlet CurrentTrigger = DefaultTrigger;\n\n\t\tlet CustomTriggerChildProps = {};\n\n\t\t// Child elements that do not have the display name of the value of `MENU_DROPDOWN_TRIGGER` in `components/constants.js` will be considered custom content and rendered in the popover.\n\t\tlet customContent = [];\n\n\t\t// Dropdown can take a Trigger component as a child and then return it as the parent DOM element.\n\t\tReact.Children.forEach(this.props.children, (child) => {\n\t\t\tif (child && child.type.displayName === MENU_DROPDOWN_TRIGGER) {\n\t\t\t\t// `CustomTriggerChildProps` is not used by the default button Trigger, but by other triggers\n\t\t\t\tCustomTriggerChildProps = child.props;\n\t\t\t\tCurrentTrigger = child.type;\n\t\t\t} else if (child) {\n\t\t\t\t// eslint-disable-next-line fp/no-mutating-methods\n\t\t\t\tcustomContent.push(child);\n\t\t\t}\n\t\t});\n\n\t\tif (customContent.length === 0) {\n\t\t\tcustomContent = null;\n\t\t}\n\n\t\tconst outsideClickIgnoreClass = `ignore-click-${this.getId()}`;\n\t\tconst isOpen = !this.props.disabled && this.getIsOpen() && !!this.trigger;\n\n\t\tthis.renderOverlay(isOpen);\n\n\t\t/* Below are three sections of props:\n\t\t - The first are the props that may be given by the dropdown component. These may get deprecated in the future.\n\t\t - The next set of props (`CustomTriggerChildProps`) are props that can be overwritten by the end developer.\n\t\t - The final set are props that should not be overwritten, since they are ones that tie the trigger to the dropdown menu.\n\t\t*/\n\n\t\treturn (\n\t\t\t<CurrentTrigger\n\t\t\t\taria-haspopup\n\t\t\t\tassistiveText={this.props.assistiveText}\n\t\t\t\tclassName={classNames(\n\t\t\t\t\toutsideClickIgnoreClass,\n\t\t\t\t\tthis.props.buttonClassName\n\t\t\t\t)}\n\t\t\t\tdisabled={this.props.disabled}\n\t\t\t\thint={this.props.hint}\n\t\t\t\ticonCategory={this.props.iconCategory}\n\t\t\t\ticonName={this.props.iconName}\n\t\t\t\ticonPosition={this.props.iconPosition}\n\t\t\t\ticonSize={this.props.iconSize}\n\t\t\t\ticonVariant={this.props.iconVariant}\n\t\t\t\tid={this.getId()}\n\t\t\t\tinverse={this.props.buttonInverse}\n\t\t\t\tisOpen={isOpen}\n\t\t\t\tlabel={this.props.label}\n\t\t\t\tmenu={this.renderDialog(customContent, isOpen, outsideClickIgnoreClass)}\n\t\t\t\tonBlur={this.props.onBlur}\n\t\t\t\tonClick={\n\t\t\t\t\tthis.props.openOn === 'click' || this.props.openOn === 'hybrid'\n\t\t\t\t\t\t? this.handleClick\n\t\t\t\t\t\t: this.props.onClick\n\t\t\t\t}\n\t\t\t\tonFocus={this.props.openOn === 'hover' ? this.handleFocus : null}\n\t\t\t\tonKeyDown={this.handleKeyDown}\n\t\t\t\tonMouseDown={this.props.onMouseDown}\n\t\t\t\tonMouseEnter={\n\t\t\t\t\tthis.props.openOn === 'hover' || this.props.openOn === 'hybrid'\n\t\t\t\t\t\t? this.handleMouseEnter\n\t\t\t\t\t\t: null\n\t\t\t\t}\n\t\t\t\tonMouseLeave={\n\t\t\t\t\tthis.props.openOn === 'hover' || this.props.openOn === 'hybrid'\n\t\t\t\t\t\t? this.handleMouseLeave\n\t\t\t\t\t\t: null\n\t\t\t\t}\n\t\t\t\topenOn={this.props.openOn}\n\t\t\t\tref={this.saveRefToTriggerContainer}\n\t\t\t\tstyle={this.props.style}\n\t\t\t\ttabIndex={this.props.tabIndex || (isOpen ? '-1' : '0')}\n\t\t\t\ttooltip={this.props.tooltip}\n\t\t\t\ttriggerClassName={this.props.triggerClassName}\n\t\t\t\ttriggerRef={this.saveRefToTrigger}\n\t\t\t\tvariant={this.props.buttonVariant}\n\t\t\t\t{...CustomTriggerChildProps}\n\t\t\t/>\n\t\t);\n\t}\n}\n\nMenuDropdown.contextType = IconSettingsContext;\nMenuDropdown.propTypes = propTypes;\nMenuDropdown.defaultProps = defaultProps;\n\nexport default MenuDropdown;\nexport { ListItem, ListItemLabel, DropdownNubbinPositions };\n"]},"metadata":{},"sourceType":"module"}