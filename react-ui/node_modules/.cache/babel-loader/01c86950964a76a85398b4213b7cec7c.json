{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { BUILDER_HEADER_TOOLBAR, BUTTON_GROUP } from '../../utilities/constants';\nvar propTypes = {\n  /**\n   * **Assistive text for accessibility**\n   * This object is merged with the default props object on every render.\n   * * `actions`: Used for the aria-label for the actions section of the toolbar.\n   * * _Tested with snapshot testing._\n   */\n  assistiveText: PropTypes.shape({\n    actions: PropTypes.string\n  }),\n\n  /**\n   * Provide children of the type `<ButtonGroup />` to define the structure of the toolbar section.\n   * ```\n   * <BuilderHeader>\n   *   <BuilderHeaderToolbar>\n   *     <ButtonGroup />\n   *     <ButtonGroup />\n   *   </BuilderHeaderToolbar>\n   * </BuilderHeader>\n   * ```\n   */\n  children: PropTypes.node,\n\n  /**\n   * Renders the actions section of the header.\n   */\n  onRenderActions: PropTypes.func\n};\nvar defaultProps = {\n  assistiveText: {\n    actions: 'Actions'\n  }\n};\n/**\n * The toolbar section of the header.\n */\n\nvar BuilderHeaderToolbar = function BuilderHeaderToolbar(props) {\n  var assistiveText = _objectSpread(_objectSpread({}, defaultProps.assistiveText), props.assistiveText);\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"slds-builder-toolbar\",\n    role: \"toolbar\"\n  }, React.Children.map(props.children, function (child) {\n    if (child.type.displayName === BUTTON_GROUP) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"slds-builder-toolbar__item-group\",\n        \"aria-label\": child.props.label\n      }, child);\n    }\n\n    return null;\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"slds-builder-toolbar__actions\",\n    \"aria-label\": assistiveText.actions\n  }, props.onRenderActions && props.onRenderActions()));\n};\n\nBuilderHeaderToolbar.displayName = BUILDER_HEADER_TOOLBAR;\nBuilderHeaderToolbar.propTypes = propTypes;\nBuilderHeaderToolbar.defaultProps = defaultProps;\nexport default BuilderHeaderToolbar;","map":{"version":3,"sources":["../../../.tmp-es/components/builder-header/toolbar.jsx"],"names":["propTypes","assistiveText","actions","PropTypes","string","children","onRenderActions","func","defaultProps","BuilderHeaderToolbar","props","child","label"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;AAEA,SAAA,sBAAA,EAAA,YAAA,QAAA,2BAAA;AAKA,IAAMA,SAAS,GAAG;AACjB;AACD;AACA;AACA;AACA;AACA;AACCC,EAAAA,aAAa,EAAE,SAAS,CAAT,KAAA,CAAgB;AAC9BC,IAAAA,OAAO,EAAEC,SAAS,CAACC;AADW,GAAhB,CAPE;;AAUjB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACCC,EAAAA,QAAQ,EAAEF,SAAS,CArBF,IAAA;;AAsBjB;AACD;AACA;AACCG,EAAAA,eAAe,EAAEH,SAAS,CAACI;AAzBV,CAAlB;AA4BA,IAAMC,YAAY,GAAG;AACpBP,EAAAA,aAAa,EAAE;AACdC,IAAAA,OAAO,EAAE;AADK;AADK,CAArB;AAMA;AACA;AACA;;AACA,IAAMO,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAA,KAAA,EAAW;AACvC,MAAMR,aAAa,GAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EACfO,YAAY,CADG,aAAA,CAAA,EAEfE,KAAK,CAFT,aAAmB,CAAnB;;AAIA,SAAA,aACC,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAd,sBAAA;AAAsC,IAAA,IAAI,EAAC;AAA3C,GAAA,EACE,KAAK,CAAL,QAAA,CAAA,GAAA,CAAmBA,KAAK,CAAxB,QAAA,EAAmC,UAAA,KAAA,EAAW;AAC9C,QAAIC,KAAK,CAALA,IAAAA,CAAAA,WAAAA,KAAJ,YAAA,EAA6C;AAC5C,aAAA,aACC,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACC,QAAA,SAAS,EADV,kCAAA;AAEC,sBAAYA,KAAK,CAALA,KAAAA,CAAYC;AAFzB,OAAA,EADD,KACC,CADD;AAQA;;AACD,WAAA,IAAA;AAZF,GACE,CADF,EAAA,aAcC,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACC,IAAA,SAAS,EADV,+BAAA;AAEC,kBAAYX,aAAa,CAACC;AAF3B,GAAA,EAIEQ,KAAK,CAALA,eAAAA,IAAyBA,KAAK,CAnBlC,eAmB6BA,EAJ3B,CAdD,CADD;AALD,CAAA;;AA8BAD,oBAAoB,CAApBA,WAAAA,GAAAA,sBAAAA;AACAA,oBAAoB,CAApBA,SAAAA,GAAAA,SAAAA;AACAA,oBAAoB,CAApBA,YAAAA,GAAAA,YAAAA;AACA,eAAA,oBAAA","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n\tBUILDER_HEADER_TOOLBAR,\n\tBUTTON_GROUP,\n} from '../../utilities/constants';\n\nconst propTypes = {\n\t/**\n\t * **Assistive text for accessibility**\n\t * This object is merged with the default props object on every render.\n\t * * `actions`: Used for the aria-label for the actions section of the toolbar.\n\t * * _Tested with snapshot testing._\n\t */\n\tassistiveText: PropTypes.shape({\n\t\tactions: PropTypes.string,\n\t}),\n\t/**\n\t * Provide children of the type `<ButtonGroup />` to define the structure of the toolbar section.\n\t * ```\n\t * <BuilderHeader>\n\t *   <BuilderHeaderToolbar>\n\t *     <ButtonGroup />\n\t *     <ButtonGroup />\n\t *   </BuilderHeaderToolbar>\n\t * </BuilderHeader>\n\t * ```\n\t */\n\tchildren: PropTypes.node,\n\t/**\n\t * Renders the actions section of the header.\n\t */\n\tonRenderActions: PropTypes.func,\n};\n\nconst defaultProps = {\n\tassistiveText: {\n\t\tactions: 'Actions',\n\t},\n};\n\n/**\n * The toolbar section of the header.\n */\nconst BuilderHeaderToolbar = (props) => {\n\tconst assistiveText = {\n\t\t...defaultProps.assistiveText,\n\t\t...props.assistiveText,\n\t};\n\treturn (\n\t\t<div className=\"slds-builder-toolbar\" role=\"toolbar\">\n\t\t\t{React.Children.map(props.children, (child) => {\n\t\t\t\tif (child.type.displayName === BUTTON_GROUP) {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName=\"slds-builder-toolbar__item-group\"\n\t\t\t\t\t\t\taria-label={child.props.label}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{child}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t})}\n\t\t\t<div\n\t\t\t\tclassName=\"slds-builder-toolbar__actions\"\n\t\t\t\taria-label={assistiveText.actions}\n\t\t\t>\n\t\t\t\t{props.onRenderActions && props.onRenderActions()}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nBuilderHeaderToolbar.displayName = BUILDER_HEADER_TOOLBAR;\nBuilderHeaderToolbar.propTypes = propTypes;\nBuilderHeaderToolbar.defaultProps = defaultProps;\nexport default BuilderHeaderToolbar;\n"]},"metadata":{},"sourceType":"module"}