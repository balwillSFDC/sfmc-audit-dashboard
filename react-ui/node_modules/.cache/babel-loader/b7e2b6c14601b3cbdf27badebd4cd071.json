{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n// Implements the [Radio Button Group design pattern](https://lightningdesignsystem.com/components/radio-button-group/) in React.\n// Based on SLDS v2.5.0\n\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport RadioGroup from '../radio-group';\nimport { RADIO_BUTTON_GROUP } from '../../utilities/constants';\nvar propTypes = {\n  /**\n   * **Assistive text for accessibility**\n   * * `label`: This label appears in the legend.\n   */\n  assistiveText: PropTypes.shape({\n    label: PropTypes.string\n  }),\n\n  /**\n   * Children are expected to be Radio components.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * Custom CSS classes added to `slds-radio_button-group` node.\n   */\n  className: PropTypes.oneOfType([PropTypes.array, PropTypes.object, PropTypes.string]),\n\n  /**\n   * **Text labels for internationalization**\n   * This object is merged with the default props object on every render.\n   * * `error`: Message to display when any of Checkboxes are in an error state.\n   * * `label`: This label appears above the button group.\n   */\n  labels: PropTypes.shape({\n    error: PropTypes.string,\n    label: PropTypes.string\n  }),\n\n  /**\n   * This event fires when the radio selection changes.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Disable all radio inputs.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Adds an indicator that this field is required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * The name of this radio group.\n   */\n  name: PropTypes.string,\n\n  /**\n   * The ID of the error message, for linking to radio inputs with aria-describedby.\n   */\n  errorId: PropTypes.string\n};\nvar defaultProps = {\n  labels: {},\n  assistiveText: {}\n};\n/**\n * A styled select list that can have a single entry checked at any one time.\n * The RadioButtonGroup component wraps [Radio](/components/radios) components, which should be used as children.\n */\n\nvar RadioButtonGroup = function RadioButtonGroup(props) {\n  // Separate props we care about in order to pass others along passively to the dropdown component\n  var variant = props.variant,\n      rest = _objectWithoutProperties(props, [\"variant\"]);\n\n  return /*#__PURE__*/React.createElement(RadioGroup, _extends({\n    variant: \"button-group\"\n  }, rest));\n};\n\nRadioButtonGroup.displayName = RADIO_BUTTON_GROUP;\nRadioButtonGroup.propTypes = propTypes;\nRadioButtonGroup.defaultProps = defaultProps;\nexport default RadioButtonGroup;","map":{"version":3,"sources":["../../../.tmp-es/components/radio-button-group/index.jsx"],"names":["propTypes","assistiveText","label","PropTypes","string","children","className","labels","error","onChange","disabled","required","name","errorId","defaultProps","RadioButtonGroup","variant","rest","props"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;AAEA;AACA;;;AAEA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;AAEA,OAAA,UAAA,MAAA,gBAAA;AAEA,SAAA,kBAAA,QAAA,2BAAA;AAEA,IAAMA,SAAS,GAAG;AACjB;AACD;AACA;AACA;AACCC,EAAAA,aAAa,EAAE,SAAS,CAAT,KAAA,CAAgB;AAC9BC,IAAAA,KAAK,EAAEC,SAAS,CAACC;AADa,GAAhB,CALE;;AAQjB;AACD;AACA;AACCC,EAAAA,QAAQ,EAAEF,SAAS,CAATA,IAAAA,CAXO,UAAA;;AAYjB;AACD;AACA;AACCG,EAAAA,SAAS,EAAEH,SAAS,CAATA,SAAAA,CAAoB,CAC9BA,SAAS,CADqB,KAAA,EAE9BA,SAAS,CAFqB,MAAA,EAG9BA,SAAS,CAlBO,MAec,CAApBA,CAfM;;AAoBjB;AACD;AACA;AACA;AACA;AACA;AACCI,EAAAA,MAAM,EAAE,SAAS,CAAT,KAAA,CAAgB;AACvBC,IAAAA,KAAK,EAAEL,SAAS,CADO,MAAA;AAEvBD,IAAAA,KAAK,EAAEC,SAAS,CAACC;AAFM,GAAhB,CA1BS;;AA8BjB;AACD;AACA;AACCK,EAAAA,QAAQ,EAAEN,SAAS,CAjCF,IAAA;;AAkCjB;AACD;AACA;AACCO,EAAAA,QAAQ,EAAEP,SAAS,CArCF,IAAA;;AAsCjB;AACD;AACA;AACCQ,EAAAA,QAAQ,EAAER,SAAS,CAzCF,IAAA;;AA0CjB;AACD;AACA;AACCS,EAAAA,IAAI,EAAET,SAAS,CA7CE,MAAA;;AA8CjB;AACD;AACA;AACCU,EAAAA,OAAO,EAAEV,SAAS,CAACC;AAjDF,CAAlB;AAoDA,IAAMU,YAAY,GAAG;AAAEP,EAAAA,MAAM,EAAR,EAAA;AAAcN,EAAAA,aAAa,EAAE;AAA7B,CAArB;AAEA;AACA;AACA;AACA;;AACA,IAAMc,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAA,KAAA,EAAW;AACnC;AADmC,MAE3BC,OAF2B,GAENE,KAFM,CAAA,OAAA;AAAA,MAEfD,IAFe,GAAA,wBAAA,CAAA,KAAA,EAAA,CAAA,SAAA,CAAA,CAAA;;AAInC,SAAA,aAAO,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA,QAAA,CAAA;AAAY,IAAA,OAAO,EAAC;AAApB,GAAA,EAAP,IAAO,CAAA,CAAP;AAJD,CAAA;;AAOAF,gBAAgB,CAAhBA,WAAAA,GAAAA,kBAAAA;AACAA,gBAAgB,CAAhBA,SAAAA,GAAAA,SAAAA;AACAA,gBAAgB,CAAhBA,YAAAA,GAAAA,YAAAA;AAEA,eAAA,gBAAA","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// Implements the [Radio Button Group design pattern](https://lightningdesignsystem.com/components/radio-button-group/) in React.\n// Based on SLDS v2.5.0\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport RadioGroup from '../radio-group';\n\nimport { RADIO_BUTTON_GROUP } from '../../utilities/constants';\n\nconst propTypes = {\n\t/**\n\t * **Assistive text for accessibility**\n\t * * `label`: This label appears in the legend.\n\t */\n\tassistiveText: PropTypes.shape({\n\t\tlabel: PropTypes.string,\n\t}),\n\t/**\n\t * Children are expected to be Radio components.\n\t */\n\tchildren: PropTypes.node.isRequired,\n\t/**\n\t * Custom CSS classes added to `slds-radio_button-group` node.\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * **Text labels for internationalization**\n\t * This object is merged with the default props object on every render.\n\t * * `error`: Message to display when any of Checkboxes are in an error state.\n\t * * `label`: This label appears above the button group.\n\t */\n\tlabels: PropTypes.shape({\n\t\terror: PropTypes.string,\n\t\tlabel: PropTypes.string,\n\t}),\n\t/**\n\t * This event fires when the radio selection changes.\n\t */\n\tonChange: PropTypes.func,\n\t/**\n\t * Disable all radio inputs.\n\t */\n\tdisabled: PropTypes.bool,\n\t/**\n\t * Adds an indicator that this field is required.\n\t */\n\trequired: PropTypes.bool,\n\t/**\n\t * The name of this radio group.\n\t */\n\tname: PropTypes.string,\n\t/**\n\t * The ID of the error message, for linking to radio inputs with aria-describedby.\n\t */\n\terrorId: PropTypes.string,\n};\n\nconst defaultProps = { labels: {}, assistiveText: {} };\n\n/**\n * A styled select list that can have a single entry checked at any one time.\n * The RadioButtonGroup component wraps [Radio](/components/radios) components, which should be used as children.\n */\nconst RadioButtonGroup = (props) => {\n\t// Separate props we care about in order to pass others along passively to the dropdown component\n\tconst { variant, ...rest } = props;\n\n\treturn <RadioGroup variant=\"button-group\" {...rest} />;\n};\n\nRadioButtonGroup.displayName = RADIO_BUTTON_GROUP;\nRadioButtonGroup.propTypes = propTypes;\nRadioButtonGroup.defaultProps = defaultProps;\n\nexport default RadioButtonGroup;\n"]},"metadata":{},"sourceType":"module"}