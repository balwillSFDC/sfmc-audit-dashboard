{"ast":null,"code":"/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Button from '../../button';\nexport var DISPLAY_NAME = 'SLDSSplitViewToggleButton';\nexport var TOGGLE_BUTTON_WIDTH = '0.75rem';\nvar propsTypes = {\n  /**\n   * **Assistive text for accessibility**\n   * * `toggleButtonOpen`: The button used to open the split view.\n   * * `toggleButtonClose`: The button used to close the split view.\n   */\n  assistiveText: PropTypes.shape({\n    toggleButtonOpen: PropTypes.string.isRequired,\n    toggleButtonClose: PropTypes.string.isRequired\n  }),\n\n  /**\n   * Unique html id placed on the button for aria-controls\n   */\n  ariaControls: PropTypes.string.isRequired,\n\n  /**\n   * Determines if the panel is open\n   */\n  isOpen: PropTypes.bool.isRequired,\n\n  /**\n   * **Event Callbacks**\n   * * `onClick`: Called when the button is clicked.\n   */\n  events: PropTypes.shape({\n    onClick: PropTypes.func.isRequired\n  })\n};\nvar defaultProps = {};\n\nvar SplitViewToggleButton = function SplitViewToggleButton(_ref) {\n  var isOpen = _ref.isOpen,\n      assistiveText = _ref.assistiveText,\n      ariaControls = _ref.ariaControls,\n      events = _ref.events;\n  var toggleAssistiveText = isOpen ? assistiveText.toggleButtonOpen : assistiveText.toggleButtonClose;\n  return /*#__PURE__*/React.createElement(Button, {\n    className: classNames('slds-button slds-button_icon slds-split-view__toggle-button', {\n      'slds-is-open': isOpen\n    }),\n    \"aria-expanded\": isOpen,\n    \"aria-controls\": ariaControls,\n    title: toggleAssistiveText,\n    variant: \"base\",\n    iconName: \"left\",\n    iconCategory: \"utility\",\n    iconSize: \"x-small\",\n    onClick: events.onClick,\n    assistiveText: {\n      icon: toggleAssistiveText\n    }\n  });\n};\n\nSplitViewToggleButton.displayName = DISPLAY_NAME;\nSplitViewToggleButton.propTypes = propsTypes;\nSplitViewToggleButton.defaultProps = defaultProps;\nexport default SplitViewToggleButton;","map":{"version":3,"sources":["../../../../.tmp-es/components/split-view/private/toggle-button.jsx"],"names":["DISPLAY_NAME","TOGGLE_BUTTON_WIDTH","propsTypes","assistiveText","toggleButtonOpen","PropTypes","toggleButtonClose","isRequired","ariaControls","isOpen","events","onClick","defaultProps","SplitViewToggleButton","toggleAssistiveText","classNames","icon"],"mappings":"AAAA;;AACA;AAEA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,OAAA,UAAA,MAAA,YAAA;AACA,OAAA,MAAA,MAAA,cAAA;AAEA,OAAO,IAAMA,YAAY,GAAlB,2BAAA;AACP,OAAO,IAAMC,mBAAmB,GAAzB,SAAA;AAEP,IAAMC,UAAU,GAAG;AAClB;AACD;AACA;AACA;AACA;AACCC,EAAAA,aAAa,EAAE,SAAS,CAAT,KAAA,CAAgB;AAC9BC,IAAAA,gBAAgB,EAAEC,SAAS,CAATA,MAAAA,CADY,UAAA;AAE9BC,IAAAA,iBAAiB,EAAED,SAAS,CAATA,MAAAA,CAAiBE;AAFN,GAAhB,CANG;;AAUlB;AACD;AACA;AACCC,EAAAA,YAAY,EAAEH,SAAS,CAATA,MAAAA,CAbI,UAAA;;AAclB;AACD;AACA;AACCI,EAAAA,MAAM,EAAEJ,SAAS,CAATA,IAAAA,CAjBU,UAAA;;AAkBlB;AACD;AACA;AACA;AACCK,EAAAA,MAAM,EAAE,SAAS,CAAT,KAAA,CAAgB;AACvBC,IAAAA,OAAO,EAAEN,SAAS,CAATA,IAAAA,CAAeE;AADD,GAAhB;AAtBU,CAAnB;AA2BA,IAAMK,YAAY,GAAlB,EAAA;;AAEA,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAA,IAAA,EAKxB;AAAA,MAJLJ,MAIK,GAAA,IAAA,CAJLA,MAIK;AAAA,MAHLN,aAGK,GAAA,IAAA,CAHLA,aAGK;AAAA,MAFLK,YAEK,GAAA,IAAA,CAFLA,YAEK;AAAA,MADLE,MACK,GAAA,IAAA,CADLA,MACK;AACL,MAAMI,mBAAmB,GAAGL,MAAM,GAC/BN,aAAa,CADkB,gBAAA,GAE/BA,aAAa,CAFhB,iBAAA;AAIA,SAAA,aACC,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AACC,IAAA,SAAS,EAAEY,UAAU,CAAA,6DAAA,EAEpB;AAAE,sBAAgBN;AAAlB,KAFoB,CADtB;AAKC,qBALD,MAAA;AAMC,qBAND,YAAA;AAOC,IAAA,KAAK,EAPN,mBAAA;AAQC,IAAA,OAAO,EARR,MAAA;AASC,IAAA,QAAQ,EATT,MAAA;AAUC,IAAA,YAAY,EAVb,SAAA;AAWC,IAAA,QAAQ,EAXT,SAAA;AAYC,IAAA,OAAO,EAAEC,MAAM,CAZhB,OAAA;AAaC,IAAA,aAAa,EAAE;AAAEM,MAAAA,IAAI,EAAEF;AAAR;AAbhB,GAAA,CADD;AAVD,CAAA;;AA6BAD,qBAAqB,CAArBA,WAAAA,GAAAA,YAAAA;AACAA,qBAAqB,CAArBA,SAAAA,GAAAA,UAAAA;AACAA,qBAAqB,CAArBA,YAAAA,GAAAA,YAAAA;AAEA,eAAA,qBAAA","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Button from '../../button';\n\nexport const DISPLAY_NAME = 'SLDSSplitViewToggleButton';\nexport const TOGGLE_BUTTON_WIDTH = '0.75rem';\n\nconst propsTypes = {\n\t/**\n\t * **Assistive text for accessibility**\n\t * * `toggleButtonOpen`: The button used to open the split view.\n\t * * `toggleButtonClose`: The button used to close the split view.\n\t */\n\tassistiveText: PropTypes.shape({\n\t\ttoggleButtonOpen: PropTypes.string.isRequired,\n\t\ttoggleButtonClose: PropTypes.string.isRequired,\n\t}),\n\t/**\n\t * Unique html id placed on the button for aria-controls\n\t */\n\tariaControls: PropTypes.string.isRequired,\n\t/**\n\t * Determines if the panel is open\n\t */\n\tisOpen: PropTypes.bool.isRequired,\n\t/**\n\t * **Event Callbacks**\n\t * * `onClick`: Called when the button is clicked.\n\t */\n\tevents: PropTypes.shape({\n\t\tonClick: PropTypes.func.isRequired,\n\t}),\n};\n\nconst defaultProps = {};\n\nconst SplitViewToggleButton = ({\n\tisOpen,\n\tassistiveText,\n\tariaControls,\n\tevents,\n}) => {\n\tconst toggleAssistiveText = isOpen\n\t\t? assistiveText.toggleButtonOpen\n\t\t: assistiveText.toggleButtonClose;\n\n\treturn (\n\t\t<Button\n\t\t\tclassName={classNames(\n\t\t\t\t'slds-button slds-button_icon slds-split-view__toggle-button',\n\t\t\t\t{ 'slds-is-open': isOpen }\n\t\t\t)}\n\t\t\taria-expanded={isOpen}\n\t\t\taria-controls={ariaControls}\n\t\t\ttitle={toggleAssistiveText}\n\t\t\tvariant=\"base\"\n\t\t\ticonName=\"left\"\n\t\t\ticonCategory=\"utility\"\n\t\t\ticonSize=\"x-small\"\n\t\t\tonClick={events.onClick}\n\t\t\tassistiveText={{ icon: toggleAssistiveText }}\n\t\t/>\n\t);\n};\n\nSplitViewToggleButton.displayName = DISPLAY_NAME;\nSplitViewToggleButton.propTypes = propsTypes;\nSplitViewToggleButton.defaultProps = defaultProps;\n\nexport default SplitViewToggleButton;\n"]},"metadata":{},"sourceType":"module"}