{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n// ### React\n\n\nimport React from 'react';\nimport PropTypes from 'prop-types'; // ### classNames\n// [github.com/JedWatson/classnames](https://github.com/JedWatson/classnames)\n// This project uses `classnames`, \"a simple javascript utility for conditionally\n// joining classNames together.\"\n\nimport classnames from 'classnames';\nimport { CAROUSEL_INDICATORS } from '../../../utilities/constants';\n/**\n * CarouselIndicators is used to display the list of indicators associated to the number of panels\n * a carousel has\n */\n\nvar CarouselIndicators = /*#__PURE__*/function (_React$Component) {\n  _inherits(CarouselIndicators, _React$Component);\n\n  var _super = _createSuper(CarouselIndicators);\n\n  function CarouselIndicators() {\n    var _this;\n\n    _classCallCheck(this, CarouselIndicators);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"onFocus\", function (event) {\n      _this[\"indicator\".concat(_this.props.currentIndex)].focus();\n\n      if (_this.props.onFocus) {\n        _this.props.onFocus(event);\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(CarouselIndicators, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this.props.hasFocus && this[\"indicator\".concat(this.props.currentIndex)]) {\n        this[\"indicator\".concat(this.props.currentIndex)].focus();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var props = this.props;\n      return /*#__PURE__*/React.createElement(\"ul\", {\n        className: \"slds-carousel__indicators slds-col slds-text-align_center\",\n        role: \"tablist\"\n      }, _toConsumableArray(Array(props.noOfIndicators).keys()).map(function (index) {\n        var isSelectedPanel = index === props.currentIndex;\n        var indicatorActionClassName = classnames('slds-carousel__indicator-action', props.className, {\n          'slds-is-active': isSelectedPanel\n        });\n        var assistiveText = \"\".concat(index);\n        var title = \"\".concat(index);\n        var id = '';\n\n        if (props.items && props.items.length > 0) {\n          // eslint-disable-next-line prefer-destructuring\n          id = props.items[index].id;\n          var startItemIndex = index * props.itemsPerPanel;\n          var autoIndicatorText = ''; // eslint-disable-next-line fp/no-loops\n\n          for (var i = startItemIndex; i < startItemIndex + props.itemsPerPanel; i += 1) {\n            if (props.items[i] && props.items[i].heading) {\n              autoIndicatorText = !autoIndicatorText ? '' : \"\".concat(autoIndicatorText, \", \");\n              autoIndicatorText += props.items[i].heading;\n            }\n          }\n\n          if (autoIndicatorText) {\n            assistiveText = autoIndicatorText;\n            title = autoIndicatorText;\n          }\n        }\n\n        return /*#__PURE__*/React.createElement(\"li\", {\n          className: \"slds-carousel__indicator slds-m-horizontal_xx-small\",\n          key: index,\n          role: \"presentation\",\n          style: {\n            margin: 0,\n            padding: '0 5px'\n          }\n        }, /*#__PURE__*/React.createElement(\"a\", {\n          ref: function ref(component) {\n            _this2[\"indicator\".concat(index)] = component;\n          },\n          id: \"indicator-id-\".concat(props.carouselId, \"-\").concat(index),\n          className: indicatorActionClassName,\n          role: \"tab\",\n          tabIndex: isSelectedPanel ? '0' : '-1',\n          \"aria-selected\": isSelectedPanel,\n          \"aria-controls\": props.getPanelId({\n            carouselId: props.carouselId,\n            itemId: id\n          }),\n          title: title,\n          onBlur: props.onBlur,\n          onClick: function onClick(event) {\n            return props.onClick(event, index);\n          },\n          onFocus: _this2.onFocus\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          className: \"slds-assistive-text\"\n        }, assistiveText)));\n      }));\n    }\n  }]);\n\n  return CarouselIndicators;\n}(React.Component);\n\nCarouselIndicators.displayName = CAROUSEL_INDICATORS;\nCarouselIndicators.defaultProps = {\n  currentIndex: 0\n}; // ### Prop Types\n\nCarouselIndicators.propTypes = {\n  /**\n   * Carousel HTML ID\n   */\n  carouselId: PropTypes.string,\n\n  /**\n   * CSS classes that are applied to the component\n   */\n  className: PropTypes.oneOfType([PropTypes.array, PropTypes.object, PropTypes.string]),\n\n  /**\n   * Selected indicator\n   */\n  currentIndex: PropTypes.number,\n\n  /**\n   * Passed from carousel parent state, dictates if indicator currently has focus\n   */\n  hasFocus: PropTypes.bool,\n\n  /**\n   * Array of objects with shape, needed for building a carousel items\n   */\n  items: PropTypes.array,\n\n  /**\n   * Number of items to be displayed at a time in the carousel\n   */\n  itemsPerPanel: PropTypes.number,\n\n  /**\n   * Number of indicators to be displayed (corresponds to the number of panels in the carousel)\n   */\n  noOfIndicators: PropTypes.number.isRequired,\n\n  /**\n   * Fires on indicator blur, allows parent carousel to adjust indicatorsHaveFocus state accordingly\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * Triggered when the indicator is clicked.\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * Fires on indicator focus, allows parent carousel to adjust indicatorsHaveFocus state accordingly\n   */\n  onFocus: PropTypes.func\n};\nexport default CarouselIndicators;","map":{"version":3,"sources":["../../../../.tmp-es/components/carousel/private/carousel-indicators.jsx"],"names":["CarouselIndicators","React","Component","props","Array","isSelectedPanel","index","indicatorActionClassName","classnames","assistiveText","title","id","startItemIndex","autoIndicatorText","i","margin","padding","carouselId","itemId","onFocus","currentIndex","PropTypes","className","hasFocus","items","itemsPerPanel","noOfIndicators","onBlur","onClick","func"],"mappings":"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","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// ### React\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n// ### classNames\n// [github.com/JedWatson/classnames](https://github.com/JedWatson/classnames)\n// This project uses `classnames`, \"a simple javascript utility for conditionally\n// joining classNames together.\"\nimport classnames from 'classnames';\n\nimport { CAROUSEL_INDICATORS } from '../../../utilities/constants';\n\n/**\n * CarouselIndicators is used to display the list of indicators associated to the number of panels\n * a carousel has\n */\nclass CarouselIndicators extends React.Component {\n\tcomponentDidUpdate() {\n\t\tif (this.props.hasFocus && this[`indicator${this.props.currentIndex}`]) {\n\t\t\tthis[`indicator${this.props.currentIndex}`].focus();\n\t\t}\n\t}\n\n\tonFocus = (event) => {\n\t\tthis[`indicator${this.props.currentIndex}`].focus();\n\t\tif (this.props.onFocus) {\n\t\t\tthis.props.onFocus(event);\n\t\t}\n\t};\n\n\trender() {\n\t\tconst { props } = this;\n\n\t\treturn (\n\t\t\t<ul\n\t\t\t\tclassName=\"slds-carousel__indicators slds-col slds-text-align_center\"\n\t\t\t\trole=\"tablist\"\n\t\t\t>\n\t\t\t\t{[...Array(props.noOfIndicators).keys()].map((index) => {\n\t\t\t\t\tconst isSelectedPanel = index === props.currentIndex;\n\t\t\t\t\tconst indicatorActionClassName = classnames(\n\t\t\t\t\t\t'slds-carousel__indicator-action',\n\t\t\t\t\t\tprops.className,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t'slds-is-active': isSelectedPanel,\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t\tlet assistiveText = `${index}`;\n\t\t\t\t\tlet title = `${index}`;\n\t\t\t\t\tlet id = '';\n\n\t\t\t\t\tif (props.items && props.items.length > 0) {\n\t\t\t\t\t\t// eslint-disable-next-line prefer-destructuring\n\t\t\t\t\t\tid = props.items[index].id;\n\n\t\t\t\t\t\tconst startItemIndex = index * props.itemsPerPanel;\n\t\t\t\t\t\tlet autoIndicatorText = '';\n\n\t\t\t\t\t\t// eslint-disable-next-line fp/no-loops\n\t\t\t\t\t\tfor (\n\t\t\t\t\t\t\tlet i = startItemIndex;\n\t\t\t\t\t\t\ti < startItemIndex + props.itemsPerPanel;\n\t\t\t\t\t\t\ti += 1\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tif (props.items[i] && props.items[i].heading) {\n\t\t\t\t\t\t\t\tautoIndicatorText = !autoIndicatorText\n\t\t\t\t\t\t\t\t\t? ''\n\t\t\t\t\t\t\t\t\t: `${autoIndicatorText}, `;\n\t\t\t\t\t\t\t\tautoIndicatorText += props.items[i].heading;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (autoIndicatorText) {\n\t\t\t\t\t\t\tassistiveText = autoIndicatorText;\n\t\t\t\t\t\t\ttitle = autoIndicatorText;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<li\n\t\t\t\t\t\t\tclassName=\"slds-carousel__indicator slds-m-horizontal_xx-small\"\n\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\trole=\"presentation\"\n\t\t\t\t\t\t\tstyle={{ margin: 0, padding: '0 5px' }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\tref={(component) => {\n\t\t\t\t\t\t\t\t\tthis[`indicator${index}`] = component;\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tid={`indicator-id-${props.carouselId}-${index}`}\n\t\t\t\t\t\t\t\tclassName={indicatorActionClassName}\n\t\t\t\t\t\t\t\trole=\"tab\"\n\t\t\t\t\t\t\t\ttabIndex={isSelectedPanel ? '0' : '-1'}\n\t\t\t\t\t\t\t\taria-selected={isSelectedPanel}\n\t\t\t\t\t\t\t\taria-controls={props.getPanelId({\n\t\t\t\t\t\t\t\t\tcarouselId: props.carouselId,\n\t\t\t\t\t\t\t\t\titemId: id,\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\ttitle={title}\n\t\t\t\t\t\t\t\tonBlur={props.onBlur}\n\t\t\t\t\t\t\t\tonClick={(event) => props.onClick(event, index)}\n\t\t\t\t\t\t\t\tonFocus={this.onFocus}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<span className=\"slds-assistive-text\">{assistiveText}</span>\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</ul>\n\t\t);\n\t}\n}\n\nCarouselIndicators.displayName = CAROUSEL_INDICATORS;\n\nCarouselIndicators.defaultProps = {\n\tcurrentIndex: 0,\n};\n\n// ### Prop Types\nCarouselIndicators.propTypes = {\n\t/**\n\t * Carousel HTML ID\n\t */\n\tcarouselId: PropTypes.string,\n\t/**\n\t * CSS classes that are applied to the component\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * Selected indicator\n\t */\n\tcurrentIndex: PropTypes.number,\n\t/**\n\t * Passed from carousel parent state, dictates if indicator currently has focus\n\t */\n\thasFocus: PropTypes.bool,\n\t/**\n\t * Array of objects with shape, needed for building a carousel items\n\t */\n\titems: PropTypes.array,\n\t/**\n\t * Number of items to be displayed at a time in the carousel\n\t */\n\titemsPerPanel: PropTypes.number,\n\t/**\n\t * Number of indicators to be displayed (corresponds to the number of panels in the carousel)\n\t */\n\tnoOfIndicators: PropTypes.number.isRequired,\n\t/**\n\t * Fires on indicator blur, allows parent carousel to adjust indicatorsHaveFocus state accordingly\n\t */\n\tonBlur: PropTypes.func,\n\t/**\n\t * Triggered when the indicator is clicked.\n\t */\n\tonClick: PropTypes.func,\n\t/**\n\t * Fires on indicator focus, allows parent carousel to adjust indicatorsHaveFocus state accordingly\n\t */\n\tonFocus: PropTypes.func,\n};\n\nexport default CarouselIndicators;\n"]},"metadata":{},"sourceType":"module"}