{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n// # GlobalNavigationBar Label Component\n// ## Dependencies\n// ### React\n\n\nimport React from 'react';\nimport PropTypes from 'prop-types'; // ### classNames\n\nimport classNames from 'classnames';\nimport colors from '../../utilities/design-tokens/dist/salesforce-skin.common.js'; // ## Constants\n\nimport { GLOBAL_NAVIGATION_BAR_LABEL } from '../../utilities/constants';\n/**\n * Wraps text in the proper markup and removes link styling to support use in the GlobalNavigationBar.\n */\n\nvar GlobalNavigationBarLabel = function GlobalNavigationBarLabel(props) {\n  // Separate props we care about in order to pass others along passively to the `span` tag\n  var className = props.className,\n      dividerPosition = props.dividerPosition,\n      id = props.id,\n      label = props.label;\n  return /*#__PURE__*/React.createElement(\"li\", {\n    className: \"slds-context-bar__item slds-no-hover\"\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    id: id // inline style override\n    ,\n    style: {\n      color: colors.colorTextLinkDisabled\n    },\n    className: classNames('slds-context-bar__label-action', _defineProperty({}, \"slds-context-bar__item_divider-\".concat(dividerPosition), dividerPosition), className)\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"slds-truncate\"\n  }, label)));\n};\n\nGlobalNavigationBarLabel.displayName = GLOBAL_NAVIGATION_BAR_LABEL; // ### Prop Types\n\nGlobalNavigationBarLabel.propTypes = {\n  /**\n   * Class names to be added to the `span` element\n   */\n  className: PropTypes.oneOfType([PropTypes.array, PropTypes.object, PropTypes.string]),\n\n  /**\n   * Determines position of separating bar.\n   */\n  dividerPosition: PropTypes.oneOf(['left', 'right']),\n\n  /**\n   * Id string applied to first <span> inside of <li>\n   */\n  id: PropTypes.string,\n\n  /**\n   * Text to show\n   */\n  label: PropTypes.string\n};\nexport default GlobalNavigationBarLabel;","map":{"version":3,"sources":["../../../.tmp-es/components/global-navigation-bar/label.jsx"],"names":["GlobalNavigationBarLabel","className","dividerPosition","id","label","props","color","colors","colorTextLinkDisabled","classNames","PropTypes","string"],"mappings":";;;;;;;;;;;;;;AAAA;;AACA;AAEA;AAEA;AAEA;;;AACA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA,C,CAEA;;AACA,OAAA,UAAA,MAAA,YAAA;AAEA,OAAA,MAAA,MAAA,8DAAA,C,CAEA;;AACA,SAAA,2BAAA,QAAA,2BAAA;AAEA;AACA;AACA;;AACA,IAAMA,wBAAwB,GAAG,SAA3BA,wBAA2B,CAAA,KAAA,EAAW;AAC3C;AAD2C,MAEnCC,SAFmC,GAEOI,KAFP,CAAA,SAAA;AAAA,MAExBH,eAFwB,GAEOG,KAFP,CAAA,eAAA;AAAA,MAEPF,EAFO,GAEOE,KAFP,CAAA,EAAA;AAAA,MAEHD,KAFG,GAEOC,KAFP,CAAA,KAAA;AAI3C,SAAA,aACC,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAI,IAAA,SAAS,EAAC;AAAd,GAAA,EAAA,aACC,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AACC,IAAA,EAAE,EADH,EAAA,CAEC;AAFD;AAGC,IAAA,KAAK,EAAE;AAAEC,MAAAA,KAAK,EAAEC,MAAM,CAACC;AAAhB,KAHR;AAIC,IAAA,SAAS,EAAEC,UAAU,CAAA,gCAAA,EAAA,eAAA,CAAA,EAAA,EAAA,kCAAA,MAAA,CAAA,eAAA,CAAA,EAAA,eAAA,CAAA,EAAA,SAAA;AAJtB,GAAA,EAAA,aAYC,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,IAAA,SAAS,EAAC;AAAhB,GAAA,EAdH,KAcG,CAZD,CADD,CADD;AAJD,CAAA;;AAwBAT,wBAAwB,CAAxBA,WAAAA,GAAAA,2BAAAA,C,CAEA;;AACAA,wBAAwB,CAAxBA,SAAAA,GAAqC;AACpC;AACD;AACA;AACCC,EAAAA,SAAS,EAAES,SAAS,CAATA,SAAAA,CAAoB,CAC9BA,SAAS,CADqB,KAAA,EAE9BA,SAAS,CAFqB,MAAA,EAG9BA,SAAS,CAP0B,MAIL,CAApBA,CAJyB;;AASpC;AACD;AACA;AACCR,EAAAA,eAAe,EAAEQ,SAAS,CAATA,KAAAA,CAAgB,CAAA,MAAA,EAZG,OAYH,CAAhBA,CAZmB;;AAapC;AACD;AACA;AACCP,EAAAA,EAAE,EAAEO,SAAS,CAhBuB,MAAA;;AAiBpC;AACD;AACA;AACCN,EAAAA,KAAK,EAAEM,SAAS,CAACC;AApBmB,CAArCX;AAuBA,eAAA,wBAAA","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// # GlobalNavigationBar Label Component\n\n// ## Dependencies\n\n// ### React\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n// ### classNames\nimport classNames from 'classnames';\n\nimport colors from '../../utilities/design-tokens/dist/salesforce-skin.common.js';\n\n// ## Constants\nimport { GLOBAL_NAVIGATION_BAR_LABEL } from '../../utilities/constants';\n\n/**\n * Wraps text in the proper markup and removes link styling to support use in the GlobalNavigationBar.\n */\nconst GlobalNavigationBarLabel = (props) => {\n\t// Separate props we care about in order to pass others along passively to the `span` tag\n\tconst { className, dividerPosition, id, label } = props;\n\n\treturn (\n\t\t<li className=\"slds-context-bar__item slds-no-hover\">\n\t\t\t<span\n\t\t\t\tid={id}\n\t\t\t\t// inline style override\n\t\t\t\tstyle={{ color: colors.colorTextLinkDisabled }}\n\t\t\t\tclassName={classNames(\n\t\t\t\t\t'slds-context-bar__label-action',\n\t\t\t\t\t{\n\t\t\t\t\t\t[`slds-context-bar__item_divider-${dividerPosition}`]: dividerPosition,\n\t\t\t\t\t},\n\t\t\t\t\tclassName\n\t\t\t\t)}\n\t\t\t>\n\t\t\t\t<span className=\"slds-truncate\">{label}</span>\n\t\t\t</span>\n\t\t</li>\n\t);\n};\n\nGlobalNavigationBarLabel.displayName = GLOBAL_NAVIGATION_BAR_LABEL;\n\n// ### Prop Types\nGlobalNavigationBarLabel.propTypes = {\n\t/**\n\t * Class names to be added to the `span` element\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * Determines position of separating bar.\n\t */\n\tdividerPosition: PropTypes.oneOf(['left', 'right']),\n\t/**\n\t * Id string applied to first <span> inside of <li>\n\t */\n\tid: PropTypes.string,\n\t/**\n\t * Text to show\n\t */\n\tlabel: PropTypes.string,\n};\n\nexport default GlobalNavigationBarLabel;\n"]},"metadata":{},"sourceType":"module"}