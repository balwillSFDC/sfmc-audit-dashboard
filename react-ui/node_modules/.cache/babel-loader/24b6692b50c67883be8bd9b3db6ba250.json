{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n// Implements the [Progress Bar design pattern](https://lightningdesignsystem.com/components/progress-ring/) in React.\n// Based on SLDS v2.4.5\n\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport assign from 'lodash.assign'; // ### shortid\n// [npmjs.com/package/shortid](https://www.npmjs.com/package/shortid)\n// shortid is a short, non-sequential, url-friendly, unique id generator\n\nimport shortid from 'shortid';\nimport { PROGRESS_BAR } from '../../utilities/constants';\nvar propTypes = {\n  /**\n   * **Assistive text for accessibility**\n   * This object is merged with the default props object on every render.\n   * * `progress`: This is a visually hidden label for the percent of progress.\n   * _Tested with snapshot testing._\n   */\n  assistiveText: PropTypes.shape({\n    progress: PropTypes.string\n  }),\n\n  /**\n   * HTML id for component.\n   */\n  id: PropTypes.string,\n\n  /**\n   * CSS classes to be added to tag with `.slds-progress-bar`. Uses `classNames` [API](https://github.com/JedWatson/classnames).\n   */\n  className: PropTypes.oneOfType([PropTypes.array, PropTypes.object, PropTypes.string]),\n\n  /**\n   * Label for the progress bar\n   */\n  labels: PropTypes.shape({\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n    complete: PropTypes.oneOfType([PropTypes.string, PropTypes.node])\n  }),\n\n  /**\n   *  Set radius of progress bar\n   */\n  radius: PropTypes.oneOf(['circular']),\n\n  /**\n   *  Set fill of progress bar\n   */\n  color: PropTypes.oneOf(['success']),\n\n  /**\n   *  Set progress bar thickness\n   */\n  thickness: PropTypes.oneOf(['x-small', 'small', 'medium', 'large']),\n\n  /**\n   * Percentage of progress completion, ranging [0, 100].\n   */\n  value: PropTypes.number.isRequired,\n\n  /**\n   * Orientation of the progress bar to be used\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n\n  /**\n   * Custom styles to be passed to the component\n   */\n  style: PropTypes.object\n};\nvar defaultProps = {\n  assistiveText: {\n    progress: 'Progress'\n  },\n  labels: {\n    complete: 'Complete'\n  },\n  orientation: 'horizontal',\n  style: {\n    height: '100%'\n  }\n};\n/**\n * A progress bar component communicates to the user the progress of a particular process\n */\n\nvar ProgressBar = /*#__PURE__*/function (_React$Component) {\n  _inherits(ProgressBar, _React$Component);\n\n  var _super = _createSuper(ProgressBar);\n\n  function ProgressBar(props) {\n    var _this;\n\n    _classCallCheck(this, ProgressBar);\n\n    _this = _super.call(this, props);\n    _this.generatedId = shortid.generate();\n    return _this;\n  }\n  /**\n   * ID as a string\n   * @returns {string} id\n   */\n\n\n  _createClass(ProgressBar, [{\n    key: \"getId\",\n    value: function getId() {\n      return this.props.id || this.generatedId;\n    }\n    /**\n     * Enables Descriptive Progress Bar if label is provided\n     * @returns {string} description\n     */\n\n  }, {\n    key: \"getDescription\",\n    value: function getDescription(_ref) {\n      var labels = _ref.labels;\n\n      if (labels.label) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"slds-grid slds-grid_align-spread slds-p-bottom_x-small\",\n          id: \"progress-bar-label-\".concat(this.getId())\n        }, /*#__PURE__*/React.createElement(\"span\", null, labels.label), /*#__PURE__*/React.createElement(\"span\", null, /*#__PURE__*/React.createElement(\"strong\", null, this.props.value, '% ', labels.complete)));\n      }\n\n      return '';\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var labels = assign({}, defaultProps.labels, this.props.labels);\n      var assistiveText = assign({}, defaultProps.assistiveText, this.props.assistiveText);\n      var style = assign({}, defaultProps.style, this.props.style);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        id: this.getId(),\n        style: style\n      }, this.props.orientation === 'horizontal' && this.getDescription({\n        labels: labels\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        \"aria-labelledby\": this.props.orientation === 'horizontal' && labels.label ? \"progress-bar-label-\".concat(this.getId()) : undefined,\n        \"aria-valuemin\": \"0\",\n        \"aria-valuemax\": \"100\",\n        \"aria-valuenow\": this.props.value,\n        \"aria-valuetext\": \"\".concat(assistiveText.progress, \": \").concat(this.props.value, \"%\"),\n        role: \"progressbar\",\n        className: classNames('slds-progress-bar', this.props.radius ? \"slds-progress-bar_\".concat(this.props.radius) : null, this.props.thickness ? \"slds-progress-bar_\".concat(this.props.thickness) : null, this.props.className, {\n          'slds-progress-bar_vertical': this.props.orientation === 'vertical'\n        })\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: classNames(\"slds-progress-bar__value\", this.props.color ? \"slds-progress-bar__value_\".concat(this.props.color) : null),\n        style: this.props.orientation === 'vertical' ? {\n          height: \"\".concat(this.props.value, \"%\")\n        } : {\n          width: \"\".concat(this.props.value, \"%\")\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"slds-assistive-text\"\n      }, \"\".concat(assistiveText.progress, \": \"), \"\".concat(this.props.value, \"%\")))));\n    }\n  }]);\n\n  return ProgressBar;\n}(React.Component);\n\nProgressBar.displayName = PROGRESS_BAR;\nProgressBar.propTypes = propTypes;\nProgressBar.defaultProps = defaultProps;\nexport default ProgressBar;","map":{"version":3,"sources":["../../../.tmp-es/components/progress-bar/index.jsx"],"names":["propTypes","assistiveText","progress","PropTypes","string","id","className","labels","label","complete","radius","color","thickness","value","orientation","style","object","defaultProps","height","ProgressBar","React","Component","shortid","assign","classNames","width"],"mappings":"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","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// Implements the [Progress Bar design pattern](https://lightningdesignsystem.com/components/progress-ring/) in React.\n// Based on SLDS v2.4.5\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport assign from 'lodash.assign';\n\n// ### shortid\n// [npmjs.com/package/shortid](https://www.npmjs.com/package/shortid)\n// shortid is a short, non-sequential, url-friendly, unique id generator\nimport shortid from 'shortid';\nimport { PROGRESS_BAR } from '../../utilities/constants';\n\nconst propTypes = {\n\t/**\n\t * **Assistive text for accessibility**\n\t * This object is merged with the default props object on every render.\n\t * * `progress`: This is a visually hidden label for the percent of progress.\n\t * _Tested with snapshot testing._\n\t */\n\tassistiveText: PropTypes.shape({ progress: PropTypes.string }),\n\t/**\n\t * HTML id for component.\n\t */\n\tid: PropTypes.string,\n\t/**\n\t * CSS classes to be added to tag with `.slds-progress-bar`. Uses `classNames` [API](https://github.com/JedWatson/classnames).\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * Label for the progress bar\n\t */\n\tlabels: PropTypes.shape({\n\t\tlabel: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n\t\tcomplete: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n\t}),\n\t/**\n\t *  Set radius of progress bar\n\t */\n\tradius: PropTypes.oneOf(['circular']),\n\t/**\n\t *  Set fill of progress bar\n\t */\n\tcolor: PropTypes.oneOf(['success']),\n\t/**\n\t *  Set progress bar thickness\n\t */\n\tthickness: PropTypes.oneOf(['x-small', 'small', 'medium', 'large']),\n\t/**\n\t * Percentage of progress completion, ranging [0, 100].\n\t */\n\tvalue: PropTypes.number.isRequired,\n\t/**\n\t * Orientation of the progress bar to be used\n\t */\n\torientation: PropTypes.oneOf(['horizontal', 'vertical']),\n\t/**\n\t * Custom styles to be passed to the component\n\t */\n\tstyle: PropTypes.object,\n};\n\nconst defaultProps = {\n\tassistiveText: {\n\t\tprogress: 'Progress',\n\t},\n\tlabels: {\n\t\tcomplete: 'Complete',\n\t},\n\torientation: 'horizontal',\n\tstyle: {\n\t\theight: '100%',\n\t},\n};\n\n/**\n * A progress bar component communicates to the user the progress of a particular process\n */\nclass ProgressBar extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.generatedId = shortid.generate();\n\t}\n\n\t/**\n\t * ID as a string\n\t * @returns {string} id\n\t */\n\tgetId() {\n\t\treturn this.props.id || this.generatedId;\n\t}\n\n\t/**\n\t * Enables Descriptive Progress Bar if label is provided\n\t * @returns {string} description\n\t */\n\tgetDescription({ labels }) {\n\t\tif (labels.label) {\n\t\t\treturn (\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"slds-grid slds-grid_align-spread slds-p-bottom_x-small\"\n\t\t\t\t\tid={`progress-bar-label-${this.getId()}`}\n\t\t\t\t>\n\t\t\t\t\t<span>{labels.label}</span>\n\t\t\t\t\t<span>\n\t\t\t\t\t\t<strong>\n\t\t\t\t\t\t\t{this.props.value}\n\t\t\t\t\t\t\t{'% '}\n\t\t\t\t\t\t\t{labels.complete}\n\t\t\t\t\t\t</strong>\n\t\t\t\t\t</span>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t\treturn '';\n\t}\n\n\trender() {\n\t\tconst labels = assign({}, defaultProps.labels, this.props.labels);\n\t\tconst assistiveText = assign(\n\t\t\t{},\n\t\t\tdefaultProps.assistiveText,\n\t\t\tthis.props.assistiveText\n\t\t);\n\t\tconst style = assign({}, defaultProps.style, this.props.style);\n\t\treturn (\n\t\t\t<div id={this.getId()} style={style}>\n\t\t\t\t{this.props.orientation === 'horizontal' &&\n\t\t\t\t\tthis.getDescription({ labels })}\n\t\t\t\t<div\n\t\t\t\t\taria-labelledby={\n\t\t\t\t\t\tthis.props.orientation === 'horizontal' && labels.label\n\t\t\t\t\t\t\t? `progress-bar-label-${this.getId()}`\n\t\t\t\t\t\t\t: undefined\n\t\t\t\t\t}\n\t\t\t\t\taria-valuemin=\"0\"\n\t\t\t\t\taria-valuemax=\"100\"\n\t\t\t\t\taria-valuenow={this.props.value}\n\t\t\t\t\taria-valuetext={`${assistiveText.progress}: ${this.props.value}%`}\n\t\t\t\t\trole=\"progressbar\"\n\t\t\t\t\tclassName={classNames(\n\t\t\t\t\t\t'slds-progress-bar',\n\t\t\t\t\t\tthis.props.radius ? `slds-progress-bar_${this.props.radius}` : null,\n\t\t\t\t\t\tthis.props.thickness\n\t\t\t\t\t\t\t? `slds-progress-bar_${this.props.thickness}`\n\t\t\t\t\t\t\t: null,\n\t\t\t\t\t\tthis.props.className,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t'slds-progress-bar_vertical':\n\t\t\t\t\t\t\t\tthis.props.orientation === 'vertical',\n\t\t\t\t\t\t}\n\t\t\t\t\t)}\n\t\t\t\t>\n\t\t\t\t\t<span\n\t\t\t\t\t\tclassName={classNames(\n\t\t\t\t\t\t\t`slds-progress-bar__value`,\n\t\t\t\t\t\t\tthis.props.color\n\t\t\t\t\t\t\t\t? `slds-progress-bar__value_${this.props.color}`\n\t\t\t\t\t\t\t\t: null\n\t\t\t\t\t\t)}\n\t\t\t\t\t\tstyle={\n\t\t\t\t\t\t\tthis.props.orientation === 'vertical'\n\t\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\t\theight: `${this.props.value}%`,\n\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t: {\n\t\t\t\t\t\t\t\t\t\twidth: `${this.props.value}%`,\n\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t}\n\t\t\t\t\t>\n\t\t\t\t\t\t<span className=\"slds-assistive-text\">\n\t\t\t\t\t\t\t{`${assistiveText.progress}: `}\n\t\t\t\t\t\t\t{`${this.props.value}%`}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nProgressBar.displayName = PROGRESS_BAR;\nProgressBar.propTypes = propTypes;\nProgressBar.defaultProps = defaultProps;\n\nexport default ProgressBar;\n"]},"metadata":{},"sourceType":"module"}