{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Avatar from '../../avatar';\nimport Icon from '../../icon';\nimport Pill from '../../utilities/pill';\nimport isReactComponent from '../../../utilities/is-react-component';\nvar propTypes = {\n  /*\n   * The option object within the selection prop that should have focus.\n   */\n  activeOption: PropTypes.object,\n\n  /*\n   * The index of the option object within the selection prop that should have focus.\n   */\n  activeOptionIndex: PropTypes.number,\n\n  /**\n   * **Assistive text for accessibility**\n   * This object is merged with the default props object on every render.\n   * * `label`: This is used as a visually hidden label if, no `labels.label` is provided.\n   * * `removePill`: Aids in keyboard interaction with Pills.\n   * * `selectedListboxLabel`: Used to identify the listbox\n   */\n  assistiveText: PropTypes.shape({\n    label: PropTypes.string,\n    removePill: PropTypes.string,\n    selectedListboxLabel: PropTypes.string\n  }),\n\n  /**\n   * CSS classes to be added to the top-level `div` tag.\n   */\n  className: PropTypes.oneOfType([PropTypes.array, PropTypes.object, PropTypes.string]),\n\n  /*\n   * Callbacks for various pill events such as click, focus, etc\n   */\n  events: PropTypes.shape({\n    onClickPill: PropTypes.func,\n    onPillFocus: PropTypes.func.isRequired,\n    onRequestFocus: PropTypes.func.isRequired,\n    onRequestFocusOnNextPill: PropTypes.func.isRequired,\n    onRequestFocusOnPreviousPill: PropTypes.func.isRequired,\n    onRequestRemove: PropTypes.func.isRequired\n  }),\n\n  /**\n   * HTML id for component main container\n   */\n  id: PropTypes.string,\n\n  /**\n   * Determines whether component renders as a bare pill container with associated styling for child pills\n   */\n  isBare: PropTypes.bool,\n\n  /**\n   * Adds inline (inside of input) styling\n   */\n  isInline: PropTypes.bool,\n\n  /**\n   * Determines whether component renders as a pill container with associated styling and behavior\n   */\n  isPillContainer: PropTypes.bool,\n\n  /**\n   * The value of `aria-orientation` to use on the listbox element\n   */\n  listboxAriaOrientation: PropTypes.string,\n\n  /**\n   * The value of `role` to use on the listbox element\n   */\n  listboxRole: PropTypes.string,\n\n  /**\n   * The value of `aria-orientation` to use on the container element\n   */\n  containerAriaOrientation: PropTypes.string,\n\n  /**\n   * The value of `role` to use on the container element\n   */\n  containerRole: PropTypes.string,\n\n  /*\n   * Pill Label\n   */\n  labels: PropTypes.shape({\n    label: PropTypes.string,\n    remove: PropTypes.string,\n    title: PropTypes.string\n  }),\n\n  /**\n   * Changes styles of the input. Currently `entity` is not supported.\n   */\n  renderAtSelectionLength: PropTypes.number,\n\n  /**\n   * This callback exposes the selected listbox reference / DOM node to parent components.\n   */\n  selectedListboxRef: PropTypes.func,\n\n  /**\n   * Accepts an array of item objects.\n   */\n  selection: PropTypes.array,\n\n  /**\n   * Custom styles to be passed to the top-level `div` tag\n   */\n  style: PropTypes.object,\n\n  /**\n   * Requests that the active option set focus on render\n   */\n  listboxHasFocus: PropTypes.bool,\n\n  /**\n   * Changes styles of the input. Currently `entity` is not supported.\n   */\n  variant: PropTypes.oneOf(['base', 'inline-listbox', 'readonly'])\n};\nvar defaultProps = {\n  listboxAriaOrientation: 'horizontal',\n  listboxRole: 'listbox',\n  renderAtSelectionLength: 1\n};\n\nvar getAvatar = function getAvatar(option) {\n  var avatarObject = option.avatar;\n  var avatar = null;\n\n  if (avatarObject) {\n    if (isReactComponent(avatarObject) || avatarObject instanceof HTMLElement) {\n      avatar = avatarObject;\n    } else if (avatarObject.imgSrc) {\n      avatar = /*#__PURE__*/React.createElement(Avatar, {\n        imgSrc: avatarObject.imgSrc,\n        title: avatarObject.title || option.label,\n        variant: avatarObject.variant || 'user'\n      });\n    }\n  }\n\n  return avatar;\n};\n\nvar getIcon = function getIcon(option) {\n  var iconObject = option.icon;\n  var icon = null;\n\n  if (iconObject) {\n    if (isReactComponent(iconObject) || iconObject instanceof HTMLElement) {\n      icon = iconObject;\n    } else if (iconObject.category && iconObject.name) {\n      icon = /*#__PURE__*/React.createElement(Icon, {\n        category: iconObject.category,\n        name: iconObject.name,\n        title: iconObject.title || option.label\n      });\n    }\n  }\n\n  return icon;\n};\n\nvar SelectedListBox = function SelectedListBox(props) {\n  return props.selection.length >= props.renderAtSelectionLength ? /*#__PURE__*/React.createElement(\"div\", {\n    // eslint-disable-line jsx-a11y/role-supports-aria-props\n    className: classNames({\n      'slds-pill_container': props.isPillContainer\n    }, props.className) || undefined,\n    id: props.id,\n    ref: function ref(_ref) {\n      if (props.selectedListboxRef) {\n        props.selectedListboxRef(_ref);\n      }\n    },\n    style: props.style // Remove role and aria-orientation after slds-has-inline-listbox is deprecated in Combobox\n    ,\n    role: props.containerRole,\n    \"aria-orientation\": props.containerAriaOrientation\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    className: classNames('slds-listbox', {\n      'slds-listbox_inline': props.isInline,\n      'slds-listbox_horizontal': !props.isInline,\n      'slds-p-top_xxx-small': !props.isInline\n    }),\n    \"aria-label\": props.assistiveText.selectedListboxLabel,\n    role: props.listboxRole,\n    \"aria-orientation\": props.listboxAriaOrientation\n  }, props.selection.map(function (option, renderIndex) {\n    var hasTabIndex = renderIndex === props.activeOptionIndex;\n    var icon = getIcon(option);\n    var avatar = !icon ? getAvatar(option) : null;\n    return /*#__PURE__*/React.createElement(\"li\", {\n      role: \"presentation\",\n      className: \"slds-listbox__item\",\n      key: \"\".concat(props.id, \"-list-item-\").concat(option.id)\n    }, /*#__PURE__*/React.createElement(Pill, {\n      active: hasTabIndex && props.listboxHasFocus,\n      assistiveText: {\n        remove: props.assistiveText.removePill\n      },\n      avatar: avatar,\n      bare: option.bare || props.isBare,\n      error: option.error,\n      events: {\n        onBlur: props.events.onBlurPill,\n        onClick: typeof props.events.onClickPill === 'function' ? function (event, data) {\n          props.events.onClickPill(event, _objectSpread(_objectSpread({}, data), {}, {\n            index: renderIndex\n          }));\n        } : null,\n        onFocus: function onFocus(event, data) {\n          props.events.onPillFocus(event, _objectSpread(_objectSpread({}, data), {}, {\n            index: renderIndex\n          }));\n        },\n        onRequestFocusOnNextPill: props.events.onRequestFocusOnNextPill,\n        onRequestFocusOnPreviousPill: props.events.onRequestFocusOnPreviousPill,\n        onRequestRemove: function onRequestRemove(event, data) {\n          props.events.onRequestRemove(event, _objectSpread(_objectSpread({}, data), {}, {\n            index: renderIndex\n          }));\n        },\n        onRequestFocus: props.events.onRequestFocus\n      },\n      eventData: {\n        option: option\n      },\n      hasError: option.error,\n      icon: icon,\n      labels: {\n        label: option.label,\n        removeTitle: props.labels.removePillTitle\n      },\n      requestFocus: props.listboxHasFocus,\n      tabIndex: hasTabIndex ? 0 : -1\n    }));\n  }))) : null;\n};\n\nSelectedListBox.displayName = 'SelectedListBox';\nSelectedListBox.propTypes = propTypes;\nSelectedListBox.defaultProps = defaultProps;\nexport default SelectedListBox;","map":{"version":3,"sources":["../../../../.tmp-es/components/pill-container/private/selected-listbox.jsx"],"names":["propTypes","activeOption","PropTypes","activeOptionIndex","assistiveText","label","removePill","selectedListboxLabel","string","className","events","onClickPill","onPillFocus","onRequestFocus","onRequestFocusOnNextPill","onRequestFocusOnPreviousPill","onRequestRemove","isRequired","id","isBare","isInline","isPillContainer","listboxAriaOrientation","listboxRole","containerAriaOrientation","containerRole","labels","remove","title","renderAtSelectionLength","selectedListboxRef","selection","style","listboxHasFocus","variant","defaultProps","getAvatar","avatarObject","option","avatar","isReactComponent","getIcon","iconObject","icon","SelectedListBox","props","classNames","hasTabIndex","renderIndex","onBlur","onClick","index","onFocus","removeTitle","removePillTitle"],"mappings":"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","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport classNames from 'classnames';\n\nimport Avatar from '../../avatar';\nimport Icon from '../../icon';\nimport Pill from '../../utilities/pill';\n\nimport isReactComponent from '../../../utilities/is-react-component';\n\nconst propTypes = {\n\t/*\n\t * The option object within the selection prop that should have focus.\n\t */\n\tactiveOption: PropTypes.object,\n\t/*\n\t * The index of the option object within the selection prop that should have focus.\n\t */\n\tactiveOptionIndex: PropTypes.number,\n\t/**\n\t * **Assistive text for accessibility**\n\t * This object is merged with the default props object on every render.\n\t * * `label`: This is used as a visually hidden label if, no `labels.label` is provided.\n\t * * `removePill`: Aids in keyboard interaction with Pills.\n\t * * `selectedListboxLabel`: Used to identify the listbox\n\t */\n\tassistiveText: PropTypes.shape({\n\t\tlabel: PropTypes.string,\n\t\tremovePill: PropTypes.string,\n\t\tselectedListboxLabel: PropTypes.string,\n\t}),\n\t/**\n\t * CSS classes to be added to the top-level `div` tag.\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/*\n\t * Callbacks for various pill events such as click, focus, etc\n\t */\n\tevents: PropTypes.shape({\n\t\tonClickPill: PropTypes.func,\n\t\tonPillFocus: PropTypes.func.isRequired,\n\t\tonRequestFocus: PropTypes.func.isRequired,\n\t\tonRequestFocusOnNextPill: PropTypes.func.isRequired,\n\t\tonRequestFocusOnPreviousPill: PropTypes.func.isRequired,\n\t\tonRequestRemove: PropTypes.func.isRequired,\n\t}),\n\t/**\n\t * HTML id for component main container\n\t */\n\tid: PropTypes.string,\n\t/**\n\t * Determines whether component renders as a bare pill container with associated styling for child pills\n\t */\n\tisBare: PropTypes.bool,\n\t/**\n\t * Adds inline (inside of input) styling\n\t */\n\tisInline: PropTypes.bool,\n\t/**\n\t * Determines whether component renders as a pill container with associated styling and behavior\n\t */\n\tisPillContainer: PropTypes.bool,\n\t/**\n\t * The value of `aria-orientation` to use on the listbox element\n\t */\n\tlistboxAriaOrientation: PropTypes.string,\n\t/**\n\t * The value of `role` to use on the listbox element\n\t */\n\tlistboxRole: PropTypes.string,\n\t/**\n\t * The value of `aria-orientation` to use on the container element\n\t */\n\tcontainerAriaOrientation: PropTypes.string,\n\t/**\n\t * The value of `role` to use on the container element\n\t */\n\tcontainerRole: PropTypes.string,\n\t/*\n\t * Pill Label\n\t */\n\tlabels: PropTypes.shape({\n\t\tlabel: PropTypes.string,\n\t\tremove: PropTypes.string,\n\t\ttitle: PropTypes.string,\n\t}),\n\t/**\n\t * Changes styles of the input. Currently `entity` is not supported.\n\t */\n\trenderAtSelectionLength: PropTypes.number,\n\t/**\n\t * This callback exposes the selected listbox reference / DOM node to parent components.\n\t */\n\tselectedListboxRef: PropTypes.func,\n\t/**\n\t * Accepts an array of item objects.\n\t */\n\tselection: PropTypes.array,\n\t/**\n\t * Custom styles to be passed to the top-level `div` tag\n\t */\n\tstyle: PropTypes.object,\n\t/**\n\t * Requests that the active option set focus on render\n\t */\n\tlistboxHasFocus: PropTypes.bool,\n\t/**\n\t * Changes styles of the input. Currently `entity` is not supported.\n\t */\n\tvariant: PropTypes.oneOf(['base', 'inline-listbox', 'readonly']),\n};\n\nconst defaultProps = {\n\tlistboxAriaOrientation: 'horizontal',\n\tlistboxRole: 'listbox',\n\trenderAtSelectionLength: 1,\n};\n\nconst getAvatar = (option) => {\n\tconst avatarObject = option.avatar;\n\tlet avatar = null;\n\n\tif (avatarObject) {\n\t\tif (isReactComponent(avatarObject) || avatarObject instanceof HTMLElement) {\n\t\t\tavatar = avatarObject;\n\t\t} else if (avatarObject.imgSrc) {\n\t\t\tavatar = (\n\t\t\t\t<Avatar\n\t\t\t\t\timgSrc={avatarObject.imgSrc}\n\t\t\t\t\ttitle={avatarObject.title || option.label}\n\t\t\t\t\tvariant={avatarObject.variant || 'user'}\n\t\t\t\t/>\n\t\t\t);\n\t\t}\n\t}\n\n\treturn avatar;\n};\n\nconst getIcon = (option) => {\n\tconst iconObject = option.icon;\n\tlet icon = null;\n\n\tif (iconObject) {\n\t\tif (isReactComponent(iconObject) || iconObject instanceof HTMLElement) {\n\t\t\ticon = iconObject;\n\t\t} else if (iconObject.category && iconObject.name) {\n\t\t\ticon = (\n\t\t\t\t<Icon\n\t\t\t\t\tcategory={iconObject.category}\n\t\t\t\t\tname={iconObject.name}\n\t\t\t\t\ttitle={iconObject.title || option.label}\n\t\t\t\t/>\n\t\t\t);\n\t\t}\n\t}\n\n\treturn icon;\n};\n\nconst SelectedListBox = (props) =>\n\tprops.selection.length >= props.renderAtSelectionLength ? (\n\t\t<div // eslint-disable-line jsx-a11y/role-supports-aria-props\n\t\t\tclassName={\n\t\t\t\tclassNames(\n\t\t\t\t\t{\n\t\t\t\t\t\t'slds-pill_container': props.isPillContainer,\n\t\t\t\t\t},\n\t\t\t\t\tprops.className\n\t\t\t\t) || undefined\n\t\t\t}\n\t\t\tid={props.id}\n\t\t\tref={(ref) => {\n\t\t\t\tif (props.selectedListboxRef) {\n\t\t\t\t\tprops.selectedListboxRef(ref);\n\t\t\t\t}\n\t\t\t}}\n\t\t\tstyle={props.style}\n\t\t\t// Remove role and aria-orientation after slds-has-inline-listbox is deprecated in Combobox\n\t\t\trole={props.containerRole}\n\t\t\taria-orientation={props.containerAriaOrientation}\n\t\t>\n\t\t\t<ul\n\t\t\t\tclassName={classNames('slds-listbox', {\n\t\t\t\t\t'slds-listbox_inline': props.isInline,\n\t\t\t\t\t'slds-listbox_horizontal': !props.isInline,\n\t\t\t\t\t'slds-p-top_xxx-small': !props.isInline,\n\t\t\t\t})}\n\t\t\t\taria-label={props.assistiveText.selectedListboxLabel}\n\t\t\t\trole={props.listboxRole}\n\t\t\t\taria-orientation={props.listboxAriaOrientation}\n\t\t\t>\n\t\t\t\t{props.selection.map((option, renderIndex) => {\n\t\t\t\t\tconst hasTabIndex = renderIndex === props.activeOptionIndex;\n\t\t\t\t\tconst icon = getIcon(option);\n\t\t\t\t\tconst avatar = !icon ? getAvatar(option) : null;\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<li\n\t\t\t\t\t\t\trole=\"presentation\"\n\t\t\t\t\t\t\tclassName=\"slds-listbox__item\"\n\t\t\t\t\t\t\tkey={`${props.id}-list-item-${option.id}`}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Pill\n\t\t\t\t\t\t\t\tactive={hasTabIndex && props.listboxHasFocus}\n\t\t\t\t\t\t\t\tassistiveText={{\n\t\t\t\t\t\t\t\t\tremove: props.assistiveText.removePill,\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tavatar={avatar}\n\t\t\t\t\t\t\t\tbare={option.bare || props.isBare}\n\t\t\t\t\t\t\t\terror={option.error}\n\t\t\t\t\t\t\t\tevents={{\n\t\t\t\t\t\t\t\t\tonBlur: props.events.onBlurPill,\n\t\t\t\t\t\t\t\t\tonClick:\n\t\t\t\t\t\t\t\t\t\ttypeof props.events.onClickPill === 'function'\n\t\t\t\t\t\t\t\t\t\t\t? (event, data) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tprops.events.onClickPill(event, {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t...data,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tindex: renderIndex,\n\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t: null,\n\t\t\t\t\t\t\t\t\tonFocus: (event, data) => {\n\t\t\t\t\t\t\t\t\t\tprops.events.onPillFocus(event, {\n\t\t\t\t\t\t\t\t\t\t\t...data,\n\t\t\t\t\t\t\t\t\t\t\tindex: renderIndex,\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tonRequestFocusOnNextPill:\n\t\t\t\t\t\t\t\t\t\tprops.events.onRequestFocusOnNextPill,\n\t\t\t\t\t\t\t\t\tonRequestFocusOnPreviousPill:\n\t\t\t\t\t\t\t\t\t\tprops.events.onRequestFocusOnPreviousPill,\n\t\t\t\t\t\t\t\t\tonRequestRemove: (event, data) => {\n\t\t\t\t\t\t\t\t\t\tprops.events.onRequestRemove(event, {\n\t\t\t\t\t\t\t\t\t\t\t...data,\n\t\t\t\t\t\t\t\t\t\t\tindex: renderIndex,\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tonRequestFocus: props.events.onRequestFocus,\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\teventData={{ option }}\n\t\t\t\t\t\t\t\thasError={option.error}\n\t\t\t\t\t\t\t\ticon={icon}\n\t\t\t\t\t\t\t\tlabels={{\n\t\t\t\t\t\t\t\t\tlabel: option.label,\n\t\t\t\t\t\t\t\t\tremoveTitle: props.labels.removePillTitle,\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\trequestFocus={props.listboxHasFocus}\n\t\t\t\t\t\t\t\ttabIndex={hasTabIndex ? 0 : -1}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</ul>\n\t\t</div>\n\t) : null;\n\nSelectedListBox.displayName = 'SelectedListBox';\nSelectedListBox.propTypes = propTypes;\nSelectedListBox.defaultProps = defaultProps;\n\nexport default SelectedListBox;\n"]},"metadata":{},"sourceType":"module"}