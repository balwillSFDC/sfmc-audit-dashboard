{"ast":null,"code":"/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n// # CarouselItem Component\n// Implements the [CarouselItem design pattern](https://www.lightningdesignsystem.com/components/carousel/) in React.\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '../../button';\nimport { CAROUSEL_ITEM } from '../../../utilities/constants';\n/**\n * A carousel allows multiple pieces of featured content to occupy an allocated amount of space.\n */\n\nvar CarouselItem = function CarouselItem(props) {\n  function handleOnClick(event) {\n    if (props.href === '#') {\n      event.preventDefault();\n    }\n\n    if (props.onClick) {\n      props.onClick(event);\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: props.getPanelId({\n      carouselId: props.carouselId,\n      itemId: props.id\n    }),\n    className: \"slds-carousel__panel slds-m-horizontal_xx-small slds-list_horizontal\",\n    role: \"tabpanel\",\n    \"aria-hidden\": \"false\",\n    \"aria-labelledby\": \"indicator-id-\".concat(props.carouselId, \"-\").concat(props.panelIndex),\n    style: {\n      margin: 0,\n      maxWidth: \"\".concat(props.itemWidth, \"px\"),\n      padding: '0 6px'\n    }\n  }, props.onRenderItem ? props.onRenderItem({\n    item: props\n  }) : /*#__PURE__*/React.createElement(\"a\", {\n    className: \"slds-carousel__panel-action slds-text-link_reset\",\n    href: props.href,\n    onClick: handleOnClick,\n    onFocus: props.onFocus,\n    style: {\n      backgroundColor: 'white',\n      width: '100%'\n    },\n    tabIndex: props.isInCurrentPanel ? '0' : '-1'\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"slds-carousel__image\"\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: props.src,\n    alt: props.imageAssistiveText || props.heading\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"slds-carousel__content\",\n    style: {\n      height: 'auto'\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"slds-carousel__content-title\"\n  }, props.heading), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"slds-p-bottom_x-small slds-text-body_small\",\n    style: {\n      minHeight: '40px'\n    }\n  }, props.description), props.buttonLabel && /*#__PURE__*/React.createElement(Button, {\n    label: props.buttonLabel,\n    tabIndex: props.isInCurrentPanel ? '0' : '-1',\n    variant: \"neutral\"\n  }))));\n};\n\nCarouselItem.displayName = CAROUSEL_ITEM;\nCarouselItem.propTypes = {\n  /**\n   * Label of the button to be displayed. If not provided, no button will be rendered.\n   */\n  buttonLabel: PropTypes.string,\n\n  /**\n   * Carousel HTML ID\n   */\n  carouselId: PropTypes.string,\n\n  /**\n   * CSS classes that are applied to the component\n   */\n  className: PropTypes.oneOfType([PropTypes.array, PropTypes.object, PropTypes.string]),\n\n  /**\n   * Visible paragraph text to be displayed on the carousel item\n   */\n  description: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n\n  /**\n   * Carousel Item's visible heading\n   */\n  heading: PropTypes.oneOfType([PropTypes.string, PropTypes.object]).isRequired,\n  href: PropTypes.string,\n\n  /**\n   * Id of the item component.\n   */\n  id: PropTypes.number.isRequired,\n\n  /**\n   * Image alt text\n   */\n  imageAssistiveText: PropTypes.string,\n\n  /**\n   * Boolean indicating whether this item is currently visible in the active parent carousel panel\n   */\n  isInCurrentPanel: PropTypes.bool,\n\n  /**\n   * Width of the carousel item\n   */\n  itemWidth: PropTypes.number,\n\n  /**\n   * Accepts a callback to handle when the a tag is focused on\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * Accepts a custom carousel item rendering function\n   */\n  onRenderItem: PropTypes.func,\n\n  /**\n   * Index of the panel this item belongs to, to be used when associating it to an indicator\n   */\n  panelIndex: PropTypes.number,\n\n  /**\n   * Path of the image to be used\n   */\n  src: PropTypes.string.isRequired\n};\nCarouselItem.defaultProps = {\n  href: '#'\n};\nexport default CarouselItem;","map":{"version":3,"sources":["../../../../.tmp-es/components/carousel/private/carousel-item.jsx"],"names":["CarouselItem","props","event","carouselId","itemId","id","margin","maxWidth","padding","item","backgroundColor","width","heading","height","minHeight","buttonLabel","PropTypes","className","description","href","imageAssistiveText","isInCurrentPanel","itemWidth","onFocus","onRenderItem","panelIndex","src","isRequired"],"mappings":"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","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// # CarouselItem Component\n\n// Implements the [CarouselItem design pattern](https://www.lightningdesignsystem.com/components/carousel/) in React.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Button from '../../button';\n\nimport { CAROUSEL_ITEM } from '../../../utilities/constants';\n\n/**\n * A carousel allows multiple pieces of featured content to occupy an allocated amount of space.\n */\nconst CarouselItem = (props) => {\n\tfunction handleOnClick(event) {\n\t\tif (props.href === '#') {\n\t\t\tevent.preventDefault();\n\t\t}\n\n\t\tif (props.onClick) {\n\t\t\tprops.onClick(event);\n\t\t}\n\t}\n\n\treturn (\n\t\t<div\n\t\t\tid={props.getPanelId({ carouselId: props.carouselId, itemId: props.id })}\n\t\t\tclassName=\"slds-carousel__panel slds-m-horizontal_xx-small slds-list_horizontal\"\n\t\t\trole=\"tabpanel\"\n\t\t\taria-hidden=\"false\"\n\t\t\taria-labelledby={`indicator-id-${props.carouselId}-${props.panelIndex}`}\n\t\t\tstyle={{\n\t\t\t\tmargin: 0,\n\t\t\t\tmaxWidth: `${props.itemWidth}px`,\n\t\t\t\tpadding: '0 6px',\n\t\t\t}}\n\t\t>\n\t\t\t{props.onRenderItem ? (\n\t\t\t\tprops.onRenderItem({ item: props })\n\t\t\t) : (\n\t\t\t\t<a\n\t\t\t\t\tclassName=\"slds-carousel__panel-action slds-text-link_reset\"\n\t\t\t\t\thref={props.href}\n\t\t\t\t\tonClick={handleOnClick}\n\t\t\t\t\tonFocus={props.onFocus}\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tbackgroundColor: 'white',\n\t\t\t\t\t\twidth: '100%',\n\t\t\t\t\t}}\n\t\t\t\t\ttabIndex={props.isInCurrentPanel ? '0' : '-1'}\n\t\t\t\t>\n\t\t\t\t\t<div className=\"slds-carousel__image\">\n\t\t\t\t\t\t<img\n\t\t\t\t\t\t\tsrc={props.src}\n\t\t\t\t\t\t\talt={props.imageAssistiveText || props.heading}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"slds-carousel__content\" style={{ height: 'auto' }}>\n\t\t\t\t\t\t<h2 className=\"slds-carousel__content-title\">{props.heading}</h2>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName=\"slds-p-bottom_x-small slds-text-body_small\"\n\t\t\t\t\t\t\tstyle={{ minHeight: '40px' }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{props.description}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{props.buttonLabel && (\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tlabel={props.buttonLabel}\n\t\t\t\t\t\t\t\ttabIndex={props.isInCurrentPanel ? '0' : '-1'}\n\t\t\t\t\t\t\t\tvariant=\"neutral\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t</a>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nCarouselItem.displayName = CAROUSEL_ITEM;\n\nCarouselItem.propTypes = {\n\t/**\n\t * Label of the button to be displayed. If not provided, no button will be rendered.\n\t */\n\tbuttonLabel: PropTypes.string,\n\t/**\n\t * Carousel HTML ID\n\t */\n\tcarouselId: PropTypes.string,\n\t/**\n\t * CSS classes that are applied to the component\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * Visible paragraph text to be displayed on the carousel item\n\t */\n\tdescription: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n\t/**\n\t * Carousel Item's visible heading\n\t */\n\theading: PropTypes.oneOfType([PropTypes.string, PropTypes.object]).isRequired,\n\thref: PropTypes.string,\n\t/**\n\t * Id of the item component.\n\t */\n\tid: PropTypes.number.isRequired,\n\t/**\n\t * Image alt text\n\t */\n\timageAssistiveText: PropTypes.string,\n\t/**\n\t * Boolean indicating whether this item is currently visible in the active parent carousel panel\n\t */\n\tisInCurrentPanel: PropTypes.bool,\n\t/**\n\t * Width of the carousel item\n\t */\n\titemWidth: PropTypes.number,\n\t/**\n\t * Accepts a callback to handle when the a tag is focused on\n\t */\n\tonFocus: PropTypes.func,\n\t/**\n\t * Accepts a custom carousel item rendering function\n\t */\n\tonRenderItem: PropTypes.func,\n\t/**\n\t * Index of the panel this item belongs to, to be used when associating it to an indicator\n\t */\n\tpanelIndex: PropTypes.number,\n\t/**\n\t * Path of the image to be used\n\t */\n\tsrc: PropTypes.string.isRequired,\n};\n\nCarouselItem.defaultProps = {\n\thref: '#',\n};\n\nexport default CarouselItem;\n"]},"metadata":{},"sourceType":"module"}