{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types'; // This component's `checkProps` which issues warnings to developers about properties\n// when in development mode (similar to React's built in development tools)\n\nimport checkProps from './check-props';\nimport Svg from './svg';\nimport SLDS_ICONS_UTILITY from '../../../icons/utility';\nimport SLDS_ICONS_ACTION from '../../../icons/action';\nimport SLDS_ICONS_CUSTOM from '../../../icons/custom';\nimport SLDS_ICONS_DOCTYPE from '../../../icons/doctype';\nimport SLDS_ICONS_STANDARD from '../../../icons/standard';\nimport { DIRECTIONS } from '../UNSAFE_direction';\nimport LanguageDirection from '../UNSAFE_direction/private/language-direction';\nimport { IconSettingsContext } from '../../icon-settings';\n/*\n * If inline icons are present and icon bundle imports are not just an empty object, then inline icons will be used instead of external icons that require HTTP access.\n */\n\nvar UtilityIcon = function UtilityIcon(_ref) {\n  var _ref$name = _ref.name,\n      name = _ref$name === void 0 ? '' : _ref$name,\n      assistiveText = _ref.assistiveText,\n      category = _ref.category,\n      icon = _ref.icon,\n      path = _ref.path,\n      direction = _ref.direction,\n      rest = _objectWithoutProperties(_ref, [\"name\", \"assistiveText\", \"category\", \"icon\", \"path\", \"direction\"]);\n\n  var context = useContext(IconSettingsContext);\n  checkProps('UtilityIcon', {\n    name: name,\n    category: category,\n    path: path,\n    context: context\n  });\n  var inlineIcons = {\n    action: SLDS_ICONS_ACTION,\n    custom: SLDS_ICONS_CUSTOM,\n    doctype: SLDS_ICONS_DOCTYPE,\n    standard: SLDS_ICONS_STANDARD,\n    utility: SLDS_ICONS_UTILITY\n  };\n  var inlineData;\n\n  if (icon) {\n    // Use SVG data passed in with `icon` prop\n    inlineData = icon;\n  } else if (Object.keys(inlineIcons[category]).length) {\n    // Use inline icon data if it exists. ENV variables will have to set to allow this.\n    inlineData = inlineIcons[category][name.toLowerCase()];\n    inlineData.viewBox = inlineIcons[category].viewBox;\n  }\n\n  var modifiedPath;\n\n  if (path) {\n    // Use `path` prop of Icon if present\n    modifiedPath = path;\n  } else if (context.onRequestIconPath) {\n    modifiedPath = context.onRequestIconPath({\n      category: category,\n      name: name\n    });\n  } else if (context[\"\".concat(category, \"Sprite\")]) {\n    // Use category sprite file from IconSettings if present\n    modifiedPath = \"\".concat(context[\"\".concat(category, \"Sprite\")], \"#\").concat(name);\n  } else {\n    // Otherwise, use external URLs for icons\n    var svgAssetName = direction === DIRECTIONS.RTL ? 'symbols-rtl.svg' : 'symbols.svg';\n    modifiedPath = context.iconPath && \"\".concat(context.iconPath, \"/\").concat(category, \"-sprite/svg/\").concat(svgAssetName, \"#\").concat(name);\n  }\n\n  return inlineData ? /*#__PURE__*/React.createElement(Svg, _extends({\n    data: inlineData,\n    name: name\n  }, rest)) : /*#__PURE__*/React.createElement(\"svg\", _extends({\n    key: \"\".concat(name, \"_\").concat(category)\n  }, rest), /*#__PURE__*/React.createElement(\"use\", {\n    href: modifiedPath\n  }));\n};\n\nUtilityIcon.displayName = 'UtilityIcon';\nUtilityIcon.propTypes = {\n  assistiveText: PropTypes.object,\n  category: PropTypes.oneOf(['action', 'custom', 'doctype', 'standard', 'utility']),\n\n  /**\n   * An SVG object to use instead of name / category, look in `design-system-react/icons` for examples\n   */\n  icon: PropTypes.object,\n\n  /**\n   * Name of the icon. Visit <a href='http://www.lightningdesignsystem.com/resources/icons'>Lightning Design System Icons</a> to reference icon names.\n   */\n  name: PropTypes.string,\n\n  /**\n   * Path to the icon. This will override any global icon settings.\n   */\n  path: PropTypes.string\n};\nUtilityIcon.defaultProps = {\n  category: 'utility'\n};\nexport default LanguageDirection(UtilityIcon);","map":{"version":3,"sources":["../../../../.tmp-es/components/utilities/utility-icon/index.jsx"],"names":["UtilityIcon","name","assistiveText","category","icon","path","direction","rest","context","useContext","checkProps","inlineIcons","action","custom","doctype","standard","utility","SLDS_ICONS_UTILITY","inlineData","Object","modifiedPath","svgAssetName","DIRECTIONS","PropTypes","string","LanguageDirection"],"mappings":"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","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\n\n// This component's `checkProps` which issues warnings to developers about properties\n// when in development mode (similar to React's built in development tools)\nimport checkProps from './check-props';\n\nimport Svg from './svg';\n\nimport SLDS_ICONS_UTILITY from '../../../icons/utility';\nimport SLDS_ICONS_ACTION from '../../../icons/action';\nimport SLDS_ICONS_CUSTOM from '../../../icons/custom';\nimport SLDS_ICONS_DOCTYPE from '../../../icons/doctype';\nimport SLDS_ICONS_STANDARD from '../../../icons/standard';\n\nimport { DIRECTIONS } from '../UNSAFE_direction';\nimport LanguageDirection from '../UNSAFE_direction/private/language-direction';\n\nimport { IconSettingsContext } from '../../icon-settings';\n\n/*\n * If inline icons are present and icon bundle imports are not just an empty object, then inline icons will be used instead of external icons that require HTTP access.\n */\nconst UtilityIcon = ({\n\tname = '',\n\tassistiveText, // eslint-disable-line no-unused-vars\n\tcategory,\n\ticon,\n\tpath,\n\tdirection,\n\t...rest\n}) => {\n\tconst context = useContext(IconSettingsContext);\n\tcheckProps('UtilityIcon', { name, category, path, context });\n\n\tconst inlineIcons = {\n\t\taction: SLDS_ICONS_ACTION,\n\t\tcustom: SLDS_ICONS_CUSTOM,\n\t\tdoctype: SLDS_ICONS_DOCTYPE,\n\t\tstandard: SLDS_ICONS_STANDARD,\n\t\tutility: SLDS_ICONS_UTILITY,\n\t};\n\tlet inlineData;\n\n\tif (icon) {\n\t\t// Use SVG data passed in with `icon` prop\n\t\tinlineData = icon;\n\t} else if (Object.keys(inlineIcons[category]).length) {\n\t\t// Use inline icon data if it exists. ENV variables will have to set to allow this.\n\t\tinlineData = inlineIcons[category][name.toLowerCase()];\n\t\tinlineData.viewBox = inlineIcons[category].viewBox;\n\t}\n\n\tlet modifiedPath;\n\n\tif (path) {\n\t\t// Use `path` prop of Icon if present\n\t\tmodifiedPath = path;\n\t} else if (context.onRequestIconPath) {\n\t\tmodifiedPath = context.onRequestIconPath({ category, name });\n\t} else if (context[`${category}Sprite`]) {\n\t\t// Use category sprite file from IconSettings if present\n\t\tmodifiedPath = `${context[`${category}Sprite`]}#${name}`;\n\t} else {\n\t\t// Otherwise, use external URLs for icons\n\t\tconst svgAssetName =\n\t\t\tdirection === DIRECTIONS.RTL ? 'symbols-rtl.svg' : 'symbols.svg';\n\t\tmodifiedPath =\n\t\t\tcontext.iconPath &&\n\t\t\t`${context.iconPath}/${category}-sprite/svg/${svgAssetName}#${name}`;\n\t}\n\n\treturn inlineData ? (\n\t\t<Svg data={inlineData} name={name} {...rest} />\n\t) : (\n\t\t<svg key={`${name}_${category}`} {...rest}>\n\t\t\t<use href={modifiedPath} />\n\t\t</svg>\n\t);\n};\n\nUtilityIcon.displayName = 'UtilityIcon';\n\nUtilityIcon.propTypes = {\n\tassistiveText: PropTypes.object,\n\tcategory: PropTypes.oneOf([\n\t\t'action',\n\t\t'custom',\n\t\t'doctype',\n\t\t'standard',\n\t\t'utility',\n\t]),\n\t/**\n\t * An SVG object to use instead of name / category, look in `design-system-react/icons` for examples\n\t */\n\ticon: PropTypes.object,\n\t/**\n\t * Name of the icon. Visit <a href='http://www.lightningdesignsystem.com/resources/icons'>Lightning Design System Icons</a> to reference icon names.\n\t */\n\tname: PropTypes.string,\n\t/**\n\t * Path to the icon. This will override any global icon settings.\n\t */\n\tpath: PropTypes.string,\n};\n\nUtilityIcon.defaultProps = {\n\tcategory: 'utility',\n};\n\nexport default LanguageDirection(UtilityIcon);\n"]},"metadata":{},"sourceType":"module"}