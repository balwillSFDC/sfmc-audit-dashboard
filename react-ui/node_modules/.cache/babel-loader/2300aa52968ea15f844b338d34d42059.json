{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n// Implements the [Welcome Mat design pattern](https://lightningdesignsystem.com/components/welcome-mat/) in React.\n// Based on SLDS v2.4.0\n\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames'; // ### shortid\n// [npmjs.com/package/shortid](https://www.npmjs.com/package/shortid)\n// shortid is a short, non-sequential, url-friendly, unique id generator\n\nimport shortid from 'shortid';\nimport assign from 'lodash.assign';\nimport Modal from '../modal';\nimport ProgressBar from '../progress-bar';\nimport { WELCOME_MAT } from '../../utilities/constants';\nvar displayName = WELCOME_MAT;\nvar propTypes = {\n  /**\n   * CSS class names to be added to the container element. `array`, `object`, or `string` are accepted.\n   */\n  className: PropTypes.oneOfType([PropTypes.array, PropTypes.object, PropTypes.string]),\n\n  /**\n   * HTML id for component.\n   */\n  id: PropTypes.string,\n\n  /**\n   * Whether the modal is open\n   */\n  isOpen: PropTypes.bool,\n\n  /**\n   * **Weclome Mat labels for internationalization**\n   * This object is merged with the default props object on every render.\n   * * `title`: Title for the Welcome Mat\n   * * `description`: Label for the radio input\n   * * `unitsCompletedAfter`: Label for the radio input\n   */\n  labels: PropTypes.shape({\n    title: PropTypes.string,\n    description: PropTypes.string,\n    unitsCompletedAfter: PropTypes.string\n  }),\n\n  /**\n   *\tVariant of the WelcomeMat\n   */\n  variant: PropTypes.oneOf(['steps', 'info-only', 'splash', 'trailhead-connected']),\n\n  /**\n   * Link to learn more button\n   */\n  onRenderInfoActions: PropTypes.func,\n\n  /**\n   * Callback to fire when modal is dismissed\n   */\n  onRequestClose: PropTypes.func,\n\n  /**\n   *  Accepts a single WelcomeMatInfoBadge component, to be used with the trailhead variant\n   */\n  infoBadge: PropTypes.node,\n\n  /**\n   *  Do not show again checkbox for info-only variant\n   */\n  doNotShowAgainCheckbox: PropTypes.node\n};\nvar defaultProps = {\n  labels: {\n    unitsCompletedAfter: 'units completed'\n  },\n  variant: 'steps',\n  isOpen: true\n};\n/**\n * A Welcome Mat provides a series of unordered items a user can click to learn about a thematic topic.\n */\n\nvar WelcomeMat = /*#__PURE__*/function (_React$Component) {\n  _inherits(WelcomeMat, _React$Component);\n\n  var _super = _createSuper(WelcomeMat);\n\n  function WelcomeMat(props) {\n    var _this;\n\n    _classCallCheck(this, WelcomeMat);\n\n    _this = _super.call(this, props);\n    _this.generatedId = shortid.generate();\n\n    _this.getCount();\n\n    return _this;\n  }\n  /**\n   * Get the WelcomeMat's HTML id. Generate a new one if no ID present.\n   */\n\n\n  _createClass(WelcomeMat, [{\n    key: \"getId\",\n    value: function getId() {\n      return this.props.id || this.generatedId;\n    }\n  }, {\n    key: \"getCount\",\n    value: function getCount() {\n      var totalSteps = React.Children.count(this.props.children);\n      var completedSteps = React.Children.toArray(this.props.children).filter(function (c) {\n        return c.props.isComplete;\n      }).length;\n      var progress = completedSteps / totalSteps * 100;\n      this.state = {\n        totalSteps: totalSteps,\n        completedSteps: completedSteps,\n        progress: progress\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var labels = assign({}, defaultProps.labels, this.props.labels);\n      var splash = /*#__PURE__*/React.createElement(\"div\", {\n        className: classNames('slds-welcome-mat__info-content', this.props.className),\n        id: \"\".concat(this.getId(), \"-content\")\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        className: \"slds-welcome-mat__info-title\",\n        id: \"\".concat(this.getId(), \"-label\")\n      }, labels.title), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"slds-welcome-mat__info-description slds-text-longform\"\n      }, /*#__PURE__*/React.createElement(\"p\", null, labels.description)), this.props.variant === 'info-only' || this.props.variant === 'splash' ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"slds-welcome-mat__info-actions\"\n      }, this.props.onRenderInfoActions() ? this.props.onRenderInfoActions() : null, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"slds-m-top_large\"\n      }, this.props.doNotShowAgainCheckbox ? this.props.doNotShowAgainCheckbox : null)) : null, (this.props.variant === 'steps' || this.props.variant === 'trailhead-connected') && this.props.children ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        className: classNames('slds-welcome-mat__info-progress', this.state.completedSteps === this.state.totalSteps ? 'slds-welcome-mat__info-progress_complete' : null)\n      }, this.props.variant === 'trailhead-connected' ? React.Children.map(this.props.infoBadge, function (child) {\n        return /*#__PURE__*/React.cloneElement(child, {\n          isComplete: _this2.state.completedSteps === _this2.state.totalSteps ? true : null\n        });\n      }) : null, this.state.completedSteps !== this.state.totalSteps || this.props.variant !== 'trailhead-connected' ? /*#__PURE__*/React.createElement(React.Fragment, null, this.props.variant === 'trailhead-connected' ? /*#__PURE__*/React.createElement(\"p\", null, this.state.completedSteps, \"/\", this.state.totalSteps, \" \".concat(labels.unitsCompletedAfter)) : /*#__PURE__*/React.createElement(\"p\", null, /*#__PURE__*/React.createElement(\"strong\", null, this.state.completedSteps, \"/\", this.state.totalSteps, \" \".concat(labels.unitsCompletedAfter))), /*#__PURE__*/React.createElement(ProgressBar, {\n        value: this.state.progress,\n        radius: \"circular\"\n      })) : null)) : null);\n      return /*#__PURE__*/React.createElement(Modal, {\n        assistiveText: {\n          dialogLabelledBy: \"\".concat(this.getId(), \"-label\")\n        },\n        isOpen: this.props.isOpen,\n        onRequestClose: this.props.onRequestClose,\n        size: \"small\",\n        id: \"\".concat(this.getId(), \"-modal\")\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: classNames('slds-welcome-mat', {\n          'slds-welcome-mat_info-only': this.props.variant === 'info-only'\n        }, this.props.children ? null : 'slds-welcome-mat_splash'),\n        id: this.getId()\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"slds-welcome-mat__content slds-grid\"\n      }, this.props.children ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"slds-welcome-mat__info slds-size_1-of-2\"\n      }, splash), /*#__PURE__*/React.createElement(\"div\", {\n        className: classNames('slds-welcome-mat__tiles', 'slds-size_1-of-2', this.props.variant === 'info-only' ? 'slds-welcome-mat__tiles_info-only' : null)\n      }, React.Children.map(this.props.children, function (child) {\n        return /*#__PURE__*/React.cloneElement(child, {\n          variant: _this2.props.variant\n        });\n      }))) : /*#__PURE__*/React.createElement(\"div\", {\n        className: \"slds-welcome-mat__info slds-size_1-of-1\"\n      }, splash))));\n    }\n  }]);\n\n  return WelcomeMat;\n}(React.Component);\n\nWelcomeMat.displayName = displayName;\nWelcomeMat.propTypes = propTypes;\nWelcomeMat.defaultProps = defaultProps;\nexport default WelcomeMat;","map":{"version":3,"sources":["../../../.tmp-es/components/welcome-mat/index.jsx"],"names":["displayName","propTypes","className","PropTypes","id","isOpen","labels","title","description","unitsCompletedAfter","string","variant","onRenderInfoActions","onRequestClose","infoBadge","doNotShowAgainCheckbox","node","defaultProps","WelcomeMat","React","Component","shortid","totalSteps","completedSteps","c","progress","assign","splash","classNames","isComplete","dialogLabelledBy"],"mappings":"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","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// Implements the [Welcome Mat design pattern](https://lightningdesignsystem.com/components/welcome-mat/) in React.\n// Based on SLDS v2.4.0\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n// ### shortid\n// [npmjs.com/package/shortid](https://www.npmjs.com/package/shortid)\n// shortid is a short, non-sequential, url-friendly, unique id generator\nimport shortid from 'shortid';\n\nimport assign from 'lodash.assign';\n\nimport Modal from '../modal';\nimport ProgressBar from '../progress-bar';\n\nimport { WELCOME_MAT } from '../../utilities/constants';\n\nconst displayName = WELCOME_MAT;\n\nconst propTypes = {\n\t/**\n\t * CSS class names to be added to the container element. `array`, `object`, or `string` are accepted.\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * HTML id for component.\n\t */\n\tid: PropTypes.string,\n\t/**\n\t * Whether the modal is open\n\t */\n\tisOpen: PropTypes.bool,\n\t/**\n\t * **Weclome Mat labels for internationalization**\n\t * This object is merged with the default props object on every render.\n\t * * `title`: Title for the Welcome Mat\n\t * * `description`: Label for the radio input\n\t * * `unitsCompletedAfter`: Label for the radio input\n\t */\n\tlabels: PropTypes.shape({\n\t\ttitle: PropTypes.string,\n\t\tdescription: PropTypes.string,\n\t\tunitsCompletedAfter: PropTypes.string,\n\t}),\n\t/**\n\t *\tVariant of the WelcomeMat\n\t */\n\tvariant: PropTypes.oneOf([\n\t\t'steps',\n\t\t'info-only',\n\t\t'splash',\n\t\t'trailhead-connected',\n\t]),\n\t/**\n\t * Link to learn more button\n\t */\n\tonRenderInfoActions: PropTypes.func,\n\t/**\n\t * Callback to fire when modal is dismissed\n\t */\n\tonRequestClose: PropTypes.func,\n\t/**\n\t *  Accepts a single WelcomeMatInfoBadge component, to be used with the trailhead variant\n\t */\n\tinfoBadge: PropTypes.node,\n\t/**\n\t *  Do not show again checkbox for info-only variant\n\t */\n\tdoNotShowAgainCheckbox: PropTypes.node,\n};\n\nconst defaultProps = {\n\tlabels: {\n\t\tunitsCompletedAfter: 'units completed',\n\t},\n\tvariant: 'steps',\n\tisOpen: true,\n};\n\n/**\n * A Welcome Mat provides a series of unordered items a user can click to learn about a thematic topic.\n */\nclass WelcomeMat extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.generatedId = shortid.generate();\n\t\tthis.getCount();\n\t}\n\n\t/**\n\t * Get the WelcomeMat's HTML id. Generate a new one if no ID present.\n\t */\n\tgetId() {\n\t\treturn this.props.id || this.generatedId;\n\t}\n\n\tgetCount() {\n\t\tconst totalSteps = React.Children.count(this.props.children);\n\t\tconst completedSteps = React.Children.toArray(this.props.children).filter(\n\t\t\t(c) => c.props.isComplete\n\t\t).length;\n\t\tconst progress = (completedSteps / totalSteps) * 100;\n\t\tthis.state = {\n\t\t\ttotalSteps,\n\t\t\tcompletedSteps,\n\t\t\tprogress,\n\t\t};\n\t}\n\n\trender() {\n\t\tconst labels = assign({}, defaultProps.labels, this.props.labels);\n\t\tconst splash = (\n\t\t\t<div\n\t\t\t\tclassName={classNames(\n\t\t\t\t\t'slds-welcome-mat__info-content',\n\t\t\t\t\tthis.props.className\n\t\t\t\t)}\n\t\t\t\tid={`${this.getId()}-content`}\n\t\t\t>\n\t\t\t\t<h2\n\t\t\t\t\tclassName=\"slds-welcome-mat__info-title\"\n\t\t\t\t\tid={`${this.getId()}-label`}\n\t\t\t\t>\n\t\t\t\t\t{labels.title}\n\t\t\t\t</h2>\n\t\t\t\t<div className=\"slds-welcome-mat__info-description slds-text-longform\">\n\t\t\t\t\t<p>{labels.description}</p>\n\t\t\t\t</div>\n\t\t\t\t{this.props.variant === 'info-only' ||\n\t\t\t\tthis.props.variant === 'splash' ? (\n\t\t\t\t\t<div className=\"slds-welcome-mat__info-actions\">\n\t\t\t\t\t\t{this.props.onRenderInfoActions()\n\t\t\t\t\t\t\t? this.props.onRenderInfoActions()\n\t\t\t\t\t\t\t: null}\n\t\t\t\t\t\t<div className=\"slds-m-top_large\">\n\t\t\t\t\t\t\t{this.props.doNotShowAgainCheckbox\n\t\t\t\t\t\t\t\t? this.props.doNotShowAgainCheckbox\n\t\t\t\t\t\t\t\t: null}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t) : null}\n\t\t\t\t{(this.props.variant === 'steps' ||\n\t\t\t\t\tthis.props.variant === 'trailhead-connected') &&\n\t\t\t\tthis.props.children ? (\n\t\t\t\t\t<React.Fragment>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName={classNames(\n\t\t\t\t\t\t\t\t'slds-welcome-mat__info-progress',\n\t\t\t\t\t\t\t\tthis.state.completedSteps === this.state.totalSteps\n\t\t\t\t\t\t\t\t\t? 'slds-welcome-mat__info-progress_complete'\n\t\t\t\t\t\t\t\t\t: null\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{this.props.variant === 'trailhead-connected'\n\t\t\t\t\t\t\t\t? React.Children.map(this.props.infoBadge, (child) =>\n\t\t\t\t\t\t\t\t\t\tReact.cloneElement(child, {\n\t\t\t\t\t\t\t\t\t\t\tisComplete:\n\t\t\t\t\t\t\t\t\t\t\t\tthis.state.completedSteps === this.state.totalSteps\n\t\t\t\t\t\t\t\t\t\t\t\t\t? true\n\t\t\t\t\t\t\t\t\t\t\t\t\t: null,\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t\t\t: null}\n\t\t\t\t\t\t\t{this.state.completedSteps !== this.state.totalSteps ||\n\t\t\t\t\t\t\tthis.props.variant !== 'trailhead-connected' ? (\n\t\t\t\t\t\t\t\t<React.Fragment>\n\t\t\t\t\t\t\t\t\t{this.props.variant === 'trailhead-connected' ? (\n\t\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t\t{this.state.completedSteps}\n\t\t\t\t\t\t\t\t\t\t\t{`/`}\n\t\t\t\t\t\t\t\t\t\t\t{this.state.totalSteps}\n\t\t\t\t\t\t\t\t\t\t\t{` ${labels.unitsCompletedAfter}`}\n\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t\t<strong>\n\t\t\t\t\t\t\t\t\t\t\t\t{this.state.completedSteps}\n\t\t\t\t\t\t\t\t\t\t\t\t{`/`}\n\t\t\t\t\t\t\t\t\t\t\t\t{this.state.totalSteps}\n\t\t\t\t\t\t\t\t\t\t\t\t{` ${labels.unitsCompletedAfter}`}\n\t\t\t\t\t\t\t\t\t\t\t</strong>\n\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t<ProgressBar value={this.state.progress} radius=\"circular\" />\n\t\t\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</React.Fragment>\n\t\t\t\t) : null}\n\t\t\t</div>\n\t\t);\n\n\t\treturn (\n\t\t\t<Modal\n\t\t\t\tassistiveText={{\n\t\t\t\t\tdialogLabelledBy: `${this.getId()}-label`,\n\t\t\t\t}}\n\t\t\t\tisOpen={this.props.isOpen}\n\t\t\t\tonRequestClose={this.props.onRequestClose}\n\t\t\t\tsize=\"small\"\n\t\t\t\tid={`${this.getId()}-modal`}\n\t\t\t>\n\t\t\t\t<div\n\t\t\t\t\tclassName={classNames(\n\t\t\t\t\t\t'slds-welcome-mat',\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t'slds-welcome-mat_info-only': this.props.variant === 'info-only',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tthis.props.children ? null : 'slds-welcome-mat_splash'\n\t\t\t\t\t)}\n\t\t\t\t\tid={this.getId()}\n\t\t\t\t>\n\t\t\t\t\t<div className=\"slds-welcome-mat__content slds-grid\">\n\t\t\t\t\t\t{this.props.children ? (\n\t\t\t\t\t\t\t<React.Fragment>\n\t\t\t\t\t\t\t\t<div className=\"slds-welcome-mat__info slds-size_1-of-2\">\n\t\t\t\t\t\t\t\t\t{splash}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tclassName={classNames(\n\t\t\t\t\t\t\t\t\t\t'slds-welcome-mat__tiles',\n\t\t\t\t\t\t\t\t\t\t'slds-size_1-of-2',\n\t\t\t\t\t\t\t\t\t\tthis.props.variant === 'info-only'\n\t\t\t\t\t\t\t\t\t\t\t? 'slds-welcome-mat__tiles_info-only'\n\t\t\t\t\t\t\t\t\t\t\t: null\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{React.Children.map(this.props.children, (child) =>\n\t\t\t\t\t\t\t\t\t\tReact.cloneElement(child, {\n\t\t\t\t\t\t\t\t\t\t\tvariant: this.props.variant,\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<div className=\"slds-welcome-mat__info slds-size_1-of-1\">\n\t\t\t\t\t\t\t\t{splash}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</Modal>\n\t\t);\n\t}\n}\n\nWelcomeMat.displayName = displayName;\nWelcomeMat.propTypes = propTypes;\nWelcomeMat.defaultProps = defaultProps;\n\nexport default WelcomeMat;\n"]},"metadata":{},"sourceType":"module"}