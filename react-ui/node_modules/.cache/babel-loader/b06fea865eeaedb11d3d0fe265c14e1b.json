{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\n// # Global Navigation Dropdown Component\n// ## Dependencies\n// ### React\n\n\nimport React from 'react';\nimport PropTypes from 'prop-types'; // ### classNames\n\nimport classNames from 'classnames';\nimport colors from '../../utilities/design-tokens/dist/salesforce-skin.common.js';\nimport checkProps from './check-props';\nimport componentDoc from './component.json';\nimport Button from '../button'; // ## Constants\n\nimport { MENU_DROPDOWN_TRIGGER } from '../../utilities/constants';\n/**\n *  The Dropdown Button Trigger renders the default trigger button for the dropdown menu. If this component has children, it does not render itself to the DOM. Instead, it renders its child element, `Button`, and all that child's properties. This component may be used as a template to create custom triggers that do not use `Button`.\n */\n\nvar GlobalNavigationDropdownTrigger = /*#__PURE__*/function (_React$Component) {\n  _inherits(GlobalNavigationDropdownTrigger, _React$Component);\n\n  var _super = _createSuper(GlobalNavigationDropdownTrigger); // ### Display Name\n  // Always use the canonical component name (set in the core) as the React\n  // display name.\n  // ### Prop Types\n\n\n  function GlobalNavigationDropdownTrigger(props) {\n    var _this;\n\n    _classCallCheck(this, GlobalNavigationDropdownTrigger);\n\n    _this = _super.call(this, props);\n    checkProps(MENU_DROPDOWN_TRIGGER, _this.props, componentDoc);\n    return _this;\n  } // ### Render\n\n\n  _createClass(GlobalNavigationDropdownTrigger, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          active = _this$props.active,\n          activeBackgroundColor = _this$props.activeBackgroundColor,\n          className = _this$props.className,\n          dividerPosition = _this$props.dividerPosition,\n          id = _this$props.id,\n          isOpen = _this$props.isOpen,\n          label = _this$props.label,\n          menu = _this$props.menu,\n          onBlur = _this$props.onBlur,\n          onClick = _this$props.onClick,\n          onFocus = _this$props.onFocus,\n          onKeyDown = _this$props.onKeyDown,\n          onMouseDown = _this$props.onMouseDown,\n          onMouseEnter = _this$props.onMouseEnter,\n          onMouseLeave = _this$props.onMouseLeave,\n          triggerRef = _this$props.triggerRef,\n          rest = _objectWithoutProperties(_this$props, [\"active\", \"activeBackgroundColor\", \"className\", \"dividerPosition\", \"id\", \"isOpen\", \"label\", \"menu\", \"onBlur\", \"onClick\", \"onFocus\", \"onKeyDown\", \"onMouseDown\", \"onMouseEnter\", \"onMouseLeave\", \"triggerRef\"]);\n\n      var listItemstyle = {}; // Uses design token to get correct color\n\n      var hoverBackgroundColor = colors.brandPrimaryTransparent10;\n\n      if (active) {\n        listItemstyle.backgroundColor = activeBackgroundColor;\n        listItemstyle.borderBottomColor = activeBackgroundColor;\n      } // Per SLDS pattern, set trigger style like hover style, so that hover visuals and menu being open and closed are in same state\n\n\n      if (isOpen) {\n        listItemstyle.backgroundColor = hoverBackgroundColor;\n      }\n\n      return (\n        /*#__PURE__*/\n        // eslint-disable-next-line jsx-a11y/role-supports-aria-props\n        React.createElement(\"li\", {\n          \"aria-haspopup\": \"true\",\n          className: classNames('slds-context-bar__item slds-context-bar__dropdown-trigger slds-dropdown-trigger slds-dropdown-trigger_click', _defineProperty({\n            'slds-is-open': isOpen,\n            'slds-is-active': active\n          }, \"slds-context-bar__item_divider-\".concat(dividerPosition), dividerPosition), className),\n          id: id,\n          onBlur: onBlur,\n          onClick: onClick,\n          onFocus: onFocus,\n          onKeyDown: onKeyDown,\n          onMouseDown: onMouseDown,\n          onMouseEnter: onMouseEnter,\n          onMouseLeave: onMouseLeave,\n          ref: triggerRef,\n          style: listItemstyle\n        }, /*#__PURE__*/React.createElement(\"a\", {\n          className: \"slds-context-bar__label-action\",\n          title: label\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          className: \"slds-truncate\",\n          title: label\n        }, label)), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"slds-context-bar__icon-action slds-p-left_none\"\n        }, /*#__PURE__*/React.createElement(Button, _extends({\n          assistiveText: this.props.assistiveText\n        }, rest, {\n          className: \"slds-context-bar__button\",\n          \"aria-haspopup\": \"true\",\n          iconCategory: \"utility\",\n          iconName: \"chevrondown\",\n          iconVariant: \"bare\",\n          variant: \"icon\"\n        }))), menu)\n      );\n    }\n  }]);\n\n  return GlobalNavigationDropdownTrigger;\n}(React.Component);\n\n_defineProperty(GlobalNavigationDropdownTrigger, \"displayName\", MENU_DROPDOWN_TRIGGER);\n\n_defineProperty(GlobalNavigationDropdownTrigger, \"propTypes\", {\n  /**\n   * Whether the item is active or not.\n   */\n  active: PropTypes.bool,\n\n  /**\n   * Allows alignment of active item with active application background color.\n   */\n  activeBackgroundColor: PropTypes.string,\n\n  /**\n   * **Assistive text for accessibility.**\n   * This object is merged with the default props object on every render.\n   * * `icon`: Text that is visually hidden but read aloud by screenreaders to tell the user what the icon means. If the button has an icon and a visible label, you can omit the <code>assistiveText.icon</code> prop and use the <code>label</code> prop.\n   */\n  assistiveText: PropTypes.shape({\n    icon: PropTypes.string\n  }),\n\n  /**\n   * CSS classes to be added to the 'li'.\n   */\n  className: PropTypes.oneOfType([PropTypes.array, PropTypes.object, PropTypes.string]),\n\n  /**\n   * Determines position of separating bar.\n   */\n  dividerPosition: PropTypes.oneOf(['left', 'right']),\n\n  /**\n   * A unique ID is needed in order to support keyboard navigation, ARIA support, and connect the dropdown to the triggering button.\n   */\n  id: PropTypes.string,\n\n  /**\n   * Allows the dropdown menu to style itself accordingly when open since CSS hover rules cannot take effect if the menu is not inline.\n   */\n  isOpen: PropTypes.bool,\n\n  /**\n   * Visible label on the dropdown menu trigger button.\n   */\n  label: PropTypes.string,\n\n  /**\n   * The dropdown menu.\n   */\n  menu: PropTypes.node,\n\n  /**\n   * Is only called when `openOn` is set to `hover` and when the triggering li loses focus.\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * This prop is passed onto the triggering `li`. Triggered when the trigger li is clicked.\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * Is only called when `openOn` is set to `hover` and when the triggering li gains focus.\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * Called when a key pressed.\n   */\n  onKeyDown: PropTypes.func,\n\n  /**\n   * Called when mouse clicks down on the trigger `li`.\n   */\n  onMouseDown: PropTypes.func,\n\n  /**\n   * Called when mouse hovers over the trigger `li`.\n   */\n  onMouseEnter: PropTypes.func,\n\n  /**\n   * Called when mouse leaves trigger `li` or the menu.\n   */\n  onMouseLeave: PropTypes.func,\n\n  /**\n   * The ref of the actual triggering button.\n   */\n  triggerRef: PropTypes.func\n});\n\n_defineProperty(GlobalNavigationDropdownTrigger, \"defaultProps\", {\n  assistiveText: {\n    icon: 'Open menu item submenu'\n  }\n});\n\nexport default GlobalNavigationDropdownTrigger;","map":{"version":3,"sources":["../../../.tmp-es/components/global-navigation-bar/dropdown-trigger.jsx"],"names":["GlobalNavigationDropdownTrigger","React","Component","MENU_DROPDOWN_TRIGGER","active","PropTypes","activeBackgroundColor","assistiveText","icon","string","className","dividerPosition","id","isOpen","label","menu","onBlur","onClick","onFocus","onKeyDown","onMouseDown","onMouseEnter","onMouseLeave","triggerRef","func","checkProps","rest","listItemstyle","hoverBackgroundColor","colors","classNames"],"mappings":"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","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\n\n// # Global Navigation Dropdown Component\n\n// ## Dependencies\n\n// ### React\nimport React from 'react';\n\nimport PropTypes from 'prop-types';\n\n// ### classNames\nimport classNames from 'classnames';\n\nimport colors from '../../utilities/design-tokens/dist/salesforce-skin.common.js';\n\nimport checkProps from './check-props';\nimport componentDoc from './component.json';\n\nimport Button from '../button';\n\n// ## Constants\nimport { MENU_DROPDOWN_TRIGGER } from '../../utilities/constants';\n\n/**\n *  The Dropdown Button Trigger renders the default trigger button for the dropdown menu. If this component has children, it does not render itself to the DOM. Instead, it renders its child element, `Button`, and all that child's properties. This component may be used as a template to create custom triggers that do not use `Button`.\n */\nclass GlobalNavigationDropdownTrigger extends React.Component {\n\t// ### Display Name\n\t// Always use the canonical component name (set in the core) as the React\n\t// display name.\n\tstatic displayName = MENU_DROPDOWN_TRIGGER;\n\n\t// ### Prop Types\n\tstatic propTypes = {\n\t\t/**\n\t\t * Whether the item is active or not.\n\t\t */\n\t\tactive: PropTypes.bool,\n\t\t/**\n\t\t * Allows alignment of active item with active application background color.\n\t\t */\n\t\tactiveBackgroundColor: PropTypes.string,\n\t\t/**\n\t\t * **Assistive text for accessibility.**\n\t\t * This object is merged with the default props object on every render.\n\t\t * * `icon`: Text that is visually hidden but read aloud by screenreaders to tell the user what the icon means. If the button has an icon and a visible label, you can omit the <code>assistiveText.icon</code> prop and use the <code>label</code> prop.\n\t\t */\n\t\tassistiveText: PropTypes.shape({\n\t\t\ticon: PropTypes.string,\n\t\t}),\n\t\t/**\n\t\t * CSS classes to be added to the 'li'.\n\t\t */\n\t\tclassName: PropTypes.oneOfType([\n\t\t\tPropTypes.array,\n\t\t\tPropTypes.object,\n\t\t\tPropTypes.string,\n\t\t]),\n\t\t/**\n\t\t * Determines position of separating bar.\n\t\t */\n\t\tdividerPosition: PropTypes.oneOf(['left', 'right']),\n\t\t/**\n\t\t * A unique ID is needed in order to support keyboard navigation, ARIA support, and connect the dropdown to the triggering button.\n\t\t */\n\t\tid: PropTypes.string,\n\t\t/**\n\t\t * Allows the dropdown menu to style itself accordingly when open since CSS hover rules cannot take effect if the menu is not inline.\n\t\t */\n\t\tisOpen: PropTypes.bool,\n\t\t/**\n\t\t * Visible label on the dropdown menu trigger button.\n\t\t */\n\t\tlabel: PropTypes.string,\n\t\t/**\n\t\t * The dropdown menu.\n\t\t */\n\t\tmenu: PropTypes.node,\n\t\t/**\n\t\t * Is only called when `openOn` is set to `hover` and when the triggering li loses focus.\n\t\t */\n\t\tonBlur: PropTypes.func,\n\t\t/**\n\t\t * This prop is passed onto the triggering `li`. Triggered when the trigger li is clicked.\n\t\t */\n\t\tonClick: PropTypes.func,\n\t\t/**\n\t\t * Is only called when `openOn` is set to `hover` and when the triggering li gains focus.\n\t\t */\n\t\tonFocus: PropTypes.func,\n\t\t/**\n\t\t * Called when a key pressed.\n\t\t */\n\t\tonKeyDown: PropTypes.func,\n\t\t/**\n\t\t * Called when mouse clicks down on the trigger `li`.\n\t\t */\n\t\tonMouseDown: PropTypes.func,\n\t\t/**\n\t\t * Called when mouse hovers over the trigger `li`.\n\t\t */\n\t\tonMouseEnter: PropTypes.func,\n\t\t/**\n\t\t * Called when mouse leaves trigger `li` or the menu.\n\t\t */\n\t\tonMouseLeave: PropTypes.func,\n\t\t/**\n\t\t * The ref of the actual triggering button.\n\t\t */\n\t\ttriggerRef: PropTypes.func,\n\t};\n\n\tstatic defaultProps = { assistiveText: { icon: 'Open menu item submenu' } };\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tcheckProps(MENU_DROPDOWN_TRIGGER, this.props, componentDoc);\n\t}\n\n\t// ### Render\n\trender() {\n\t\tconst {\n\t\t\tactive,\n\t\t\tactiveBackgroundColor,\n\t\t\tclassName,\n\t\t\tdividerPosition,\n\t\t\tid,\n\t\t\tisOpen,\n\t\t\tlabel,\n\t\t\tmenu,\n\t\t\tonBlur,\n\t\t\tonClick,\n\t\t\tonFocus,\n\t\t\tonKeyDown,\n\t\t\tonMouseDown,\n\t\t\tonMouseEnter,\n\t\t\tonMouseLeave,\n\t\t\ttriggerRef,\n\t\t\t...rest\n\t\t} = this.props;\n\n\t\tconst listItemstyle = {};\n\t\t// Uses design token to get correct color\n\t\tconst hoverBackgroundColor = colors.brandPrimaryTransparent10;\n\n\t\tif (active) {\n\t\t\tlistItemstyle.backgroundColor = activeBackgroundColor;\n\t\t\tlistItemstyle.borderBottomColor = activeBackgroundColor;\n\t\t}\n\n\t\t// Per SLDS pattern, set trigger style like hover style, so that hover visuals and menu being open and closed are in same state\n\t\tif (isOpen) {\n\t\t\tlistItemstyle.backgroundColor = hoverBackgroundColor;\n\t\t}\n\n\t\treturn (\n\t\t\t// eslint-disable-next-line jsx-a11y/role-supports-aria-props\n\t\t\t<li\n\t\t\t\taria-haspopup=\"true\"\n\t\t\t\tclassName={classNames(\n\t\t\t\t\t'slds-context-bar__item slds-context-bar__dropdown-trigger slds-dropdown-trigger slds-dropdown-trigger_click',\n\t\t\t\t\t{\n\t\t\t\t\t\t'slds-is-open': isOpen,\n\t\t\t\t\t\t'slds-is-active': active,\n\t\t\t\t\t\t[`slds-context-bar__item_divider-${dividerPosition}`]: dividerPosition,\n\t\t\t\t\t},\n\t\t\t\t\tclassName\n\t\t\t\t)}\n\t\t\t\tid={id}\n\t\t\t\tonBlur={onBlur}\n\t\t\t\tonClick={onClick}\n\t\t\t\tonFocus={onFocus}\n\t\t\t\tonKeyDown={onKeyDown}\n\t\t\t\tonMouseDown={onMouseDown}\n\t\t\t\tonMouseEnter={onMouseEnter}\n\t\t\t\tonMouseLeave={onMouseLeave}\n\t\t\t\tref={triggerRef}\n\t\t\t\tstyle={listItemstyle}\n\t\t\t>\n\t\t\t\t<a className=\"slds-context-bar__label-action\" title={label}>\n\t\t\t\t\t<span className=\"slds-truncate\" title={label}>\n\t\t\t\t\t\t{label}\n\t\t\t\t\t</span>\n\t\t\t\t</a>\n\t\t\t\t<div className=\"slds-context-bar__icon-action slds-p-left_none\">\n\t\t\t\t\t<Button\n\t\t\t\t\t\tassistiveText={this.props.assistiveText}\n\t\t\t\t\t\t{...rest}\n\t\t\t\t\t\tclassName=\"slds-context-bar__button\"\n\t\t\t\t\t\taria-haspopup=\"true\"\n\t\t\t\t\t\ticonCategory=\"utility\"\n\t\t\t\t\t\ticonName=\"chevrondown\"\n\t\t\t\t\t\ticonVariant=\"bare\"\n\t\t\t\t\t\tvariant=\"icon\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t{menu}\n\t\t\t</li>\n\t\t);\n\t}\n}\n\nexport default GlobalNavigationDropdownTrigger;\n"]},"metadata":{},"sourceType":"module"}