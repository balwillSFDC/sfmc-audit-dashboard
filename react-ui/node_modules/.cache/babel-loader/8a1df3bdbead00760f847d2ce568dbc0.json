{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n// # Alert Container Component\n\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../utilities/class-names';\nimport { ALERT_CONTAINER } from '../../utilities/constants';\nvar propTypes = {\n  /**\n   * CSS classes to be added to tag with `.slds-notify_alert`. Uses `classNames` [API](https://github.com/JedWatson/classnames).\n   */\n  className: PropTypes.oneOfType([PropTypes.array, PropTypes.object, PropTypes.string]),\n\n  /**\n   * Alert components\n   */\n  children: PropTypes.node\n};\n/**\n * A fixed container for alert banners.\n */\n\nvar AlertContainer = /*#__PURE__*/function (_React$Component) {\n  _inherits(AlertContainer, _React$Component);\n\n  var _super = _createSuper(AlertContainer);\n\n  function AlertContainer() {\n    _classCallCheck(this, AlertContainer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(AlertContainer, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: classNames('slds-notify-container', this.props.className)\n      }, this.props.children);\n    }\n  }]);\n\n  return AlertContainer;\n}(React.Component);\n\nAlertContainer.displayName = ALERT_CONTAINER;\nAlertContainer.propTypes = propTypes;\nexport default AlertContainer;","map":{"version":3,"sources":["../../../.tmp-es/components/alert/container.jsx"],"names":["propTypes","className","PropTypes","children","node","AlertContainer","React","Component","classNames"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;AAEA;;;AAEA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,OAAA,UAAA,MAAA,6BAAA;AACA,SAAA,eAAA,QAAA,2BAAA;AAEA,IAAMA,SAAS,GAAG;AACjB;AACD;AACA;AACCC,EAAAA,SAAS,EAAEC,SAAS,CAATA,SAAAA,CAAoB,CAC9BA,SAAS,CADqB,KAAA,EAE9BA,SAAS,CAFqB,MAAA,EAG9BA,SAAS,CAPO,MAIc,CAApBA,CAJM;;AASjB;AACD;AACA;AACCC,EAAAA,QAAQ,EAAED,SAAS,CAACE;AAZH,CAAlB;AAeA;AACA;AACA;;IAEMC,c;;;;;;;;;;;;;6BACI;AACR,aAAA,aACC,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACC,QAAA,SAAS,EAAEG,UAAU,CAAA,uBAAA,EAA0B,KAAA,KAAA,CAA1B,SAAA;AADtB,OAAA,EAGE,KAAA,KAAA,CAJH,QACC,CADD;AAOA;;;;EAT2BF,KAAK,CAACC,S;;AAYnCF,cAAc,CAAdA,WAAAA,GAAAA,eAAAA;AACAA,cAAc,CAAdA,SAAAA,GAAAA,SAAAA;AAEA,eAAA,cAAA","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// # Alert Container Component\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../utilities/class-names';\nimport { ALERT_CONTAINER } from '../../utilities/constants';\n\nconst propTypes = {\n\t/**\n\t * CSS classes to be added to tag with `.slds-notify_alert`. Uses `classNames` [API](https://github.com/JedWatson/classnames).\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * Alert components\n\t */\n\tchildren: PropTypes.node,\n};\n\n/**\n * A fixed container for alert banners.\n */\n\nclass AlertContainer extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<div\n\t\t\t\tclassName={classNames('slds-notify-container', this.props.className)}\n\t\t\t>\n\t\t\t\t{this.props.children}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nAlertContainer.displayName = ALERT_CONTAINER;\nAlertContainer.propTypes = propTypes;\n\nexport default AlertContainer;\n"]},"metadata":{},"sourceType":"module"}