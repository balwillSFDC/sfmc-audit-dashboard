{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n// # Carousel Component\n// Implements the [Carousel design pattern](https://www.lightningdesignsystem.com/components/carousel/) in React.\n\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames'; // ### shortid\n// [npmjs.com/package/shortid](https://www.npmjs.com/package/shortid)\n// shortid is a short, non-sequential, url-friendly, unique id generator\n\nimport shortid from 'shortid';\nimport { CAROUSEL } from '../../utilities/constants';\nimport { canUseDOM, canUseEventListeners } from '../../utilities/execution-environment';\nimport CarouselIndicators from './private/carousel-indicators';\nimport PreviousNextCarouselNavigator from './private/previous-next-carousel-navigator';\nimport CarouselItem from './private/carousel-item';\nimport AutoplayButton from './private/auto-play-button'; // ### Event Helpers\n\nimport KEYS from '../../utilities/key-code';\nimport EventUtil from '../../utilities/event';\n/* eslint-disable jsx-a11y/no-static-element-interactions */\n// ### Default Props\n\nvar defaultProps = {\n  assistiveText: {\n    autoplayButton: 'Start / Stop auto-play',\n    nextPanel: 'Next Panel',\n    previousPanel: 'Previous Panel'\n  },\n  autoplayInterval: 4000,\n  hasAutoplay: false,\n  hasPreviousNextPanelNavigation: false,\n  isInfinite: false,\n  itemsPerPanel: 1\n};\n/**\n * A carousel allows multiple pieces of featured content to occupy an allocated amount of space.\n * Currently panel index and auto play cannot be controlled by the app.\n */\n\nvar Carousel = /*#__PURE__*/function (_React$Component) {\n  _inherits(Carousel, _React$Component);\n\n  var _super = _createSuper(Carousel); // ### Display Name\n  // Always use the canonical component name as the React display name.\n  // ### Prop Types\n  // ### Default Props\n\n\n  function Carousel(props) {\n    var _this;\n\n    _classCallCheck(this, Carousel);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"onNextPanelHandler\", function (event) {\n      var next = _this.getCurrentPanel() + 1;\n\n      if (next > _this.nrOfPanels - 1) {\n        next = 0;\n      }\n\n      _this.setCurrentPanel(event, next, _this.changeTranslationAutomatically);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onPreviousPanelHandler\", function (event) {\n      var prev = _this.getCurrentPanel() - 1;\n\n      if (prev < 0) {\n        prev = _this.nrOfPanels - 1;\n      }\n\n      _this.setCurrentPanel(event, prev, _this.changeTranslationAutomatically);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onIndicatorBlur\", function () {\n      _this.setState({\n        indicatorsHaveFocus: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onIndicatorClickHandler\", function (event, panel) {\n      _this.setCurrentPanel(event, panel, _this.changeTranslationAutomatically);\n\n      _this.setState({\n        indicatorsHaveFocus: true\n      });\n\n      if (_this.getIsAutoplayOn()) {\n        _this.stopAutoplay(event);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onIndicatorFocus\", function (event) {\n      _this.setState({\n        indicatorsHaveFocus: true\n      });\n\n      if (_this.getIsAutoplayOn()) {\n        _this.stopAutoplay(event);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onAutoplayBtnClick\", function (event) {\n      var isAutoplayOn = _this.getIsAutoplayOn();\n\n      if (_this.props.onRequestAutoplayToggle) {\n        _this.props.onRequestAutoplayToggle(event, {\n          isAutoplayOn: isAutoplayOn\n        });\n      } else {\n        var actionToTake = isAutoplayOn ? _this.stopAutoplay : _this.startAutoplay;\n\n        _this.setState({\n          isAutoplayOn: !isAutoplayOn\n        });\n\n        actionToTake(event);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getPanelId\", function (_ref) {\n      var carouselId = _ref.carouselId,\n          itemId = _ref.itemId;\n      return \"content-id-\".concat(carouselId, \"-\").concat(itemId);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setDimensions\", function () {\n      if (canUseDOM && _this.stageItem !== undefined && _this.stageItem.current !== undefined && _this.stageItem.current.offsetWidth !== undefined) {\n        _this.setState({\n          stageWidth: _this.stageItem.current.offsetWidth\n        }, _this.changeTranslationAutomatically);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setTranslationAmount\", function (amount, cb) {\n      _this.setState({\n        translateX: amount\n      }, cb);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setCurrentPanel\", function (event, amount, cb) {\n      if (_this.props.onRequestPanelChange) {\n        _this.props.onRequestPanelChange(event, {\n          currentPanel: _this.getCurrentPanel(),\n          requestedPanel: amount\n        });\n      } else {\n        _this.setState({\n          currentPanel: amount\n        }, cb);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"startAutoplay\", function (event) {\n      _this.autoplayId = setInterval(function () {\n        if (_this.canGoToNext()) {\n          _this.onNextPanelHandler(event);\n        } else if (_this.props.isInfinite) {\n          _this.setCurrentPanel(event, 0, _this.changeTranslationAutomatically);\n        } else {\n          _this.stopAutoplay(event);\n        }\n      }, _this.props.autoplayInterval);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"stopAutoplay\", function (event, ignoreCallbacksAndStateUpdates) {\n      if (_this.autoplayId) {\n        clearInterval(_this.autoplayId);\n      }\n\n      if (!ignoreCallbacksAndStateUpdates) {\n        if (_this.props.onRequestAutoplayToggle) {\n          _this.props.onRequestAutoplayToggle(event, {\n            isAutoplayOn: _this.getIsAutoplayOn()\n          });\n        } else {\n          _this.setState({\n            isAutoplayOn: false\n          });\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"changeTranslationAutomatically\", function () {\n      _this.setTranslationAmount(-((_this.state.stageWidth || _this.stageWidth) * _this.getCurrentPanel()));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"canGoToNext\", function () {\n      return _this.getCurrentPanel() < _this.nrOfPanels - 1;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"canGoToPrevious\", function () {\n      return _this.getCurrentPanel() > 0;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleKeyDown\", function (event) {\n      var _keyDownCallbacks;\n\n      var keyDownCallbacks = (_keyDownCallbacks = {}, _defineProperty(_keyDownCallbacks, KEYS.LEFT, function () {\n        if (_this.props.isInfinite || _this.canGoToPrevious()) {\n          _this.onPreviousPanelHandler(event);\n\n          _this.setState({\n            indicatorsHaveFocus: true\n          });\n\n          if (_this.getIsAutoplayOn()) {\n            _this.stopAutoplay(event);\n          }\n        }\n      }), _defineProperty(_keyDownCallbacks, KEYS.RIGHT, function () {\n        if (_this.props.isInfinite || _this.canGoToNext()) {\n          _this.onNextPanelHandler(event);\n\n          _this.setState({\n            indicatorsHaveFocus: true\n          });\n\n          if (_this.getIsAutoplayOn()) {\n            _this.stopAutoplay(event);\n          }\n        }\n      }), _keyDownCallbacks);\n\n      if (keyDownCallbacks[event.keyCode]) {\n        EventUtil.trapImmediate(event);\n        keyDownCallbacks[event.keyCode]();\n      }\n    });\n\n    _this.nrOfPanels = Math.ceil(props.items.length / props.itemsPerPanel);\n    _this.stageItem = /*#__PURE__*/React.createRef();\n    _this.state = {\n      currentPanel: props.currentPanel !== undefined ? props.currentPanel : 0,\n      indicatorsHaveFocus: false,\n      isAutoplayOn: props.isAutoplayOn !== undefined ? props.isAutoplayOn : props.hasAutoplay,\n      stageWidth: 0,\n      translateX: -1000000\n    };\n    _this.generatedId = shortid.generate();\n    return _this;\n  }\n\n  _createClass(Carousel, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (canUseDOM && this.stageItem !== undefined && this.stageItem.current !== undefined && this.stageItem.current.offsetWidth !== undefined) {\n        this.stageWidth = this.stageItem.current.offsetWidth;\n      }\n\n      if (canUseEventListeners) {\n        window.addEventListener('resize', this.setDimensions, false);\n      }\n\n      this.changeTranslationAutomatically();\n\n      if (this.getIsAutoplayOn()) {\n        this.startAutoplay({\n          mountAutoplayEvent: true\n        });\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.currentPanel !== undefined && prevProps.currentPanel !== this.props.currentPanel) {\n        this.changeTranslationAutomatically();\n      }\n\n      if (this.props.isAutoplayOn !== undefined && prevProps.isAutoplayOn !== this.props.isAutoplayOn) {\n        if (this.props.isAutoplayOn) {\n          this.startAutoplay({\n            updateAutoplayEvent: true\n          });\n        } else {\n          this.stopAutoplay({\n            updateAutoplayEvent: true\n          }, true);\n        }\n      }\n\n      if (prevProps.items.length !== this.props.items.length || prevProps.itemsPerPanel !== this.props.itemsPerPanel) {\n        this.nrOfPanels = Math.ceil(this.props.items.length / this.props.itemsPerPanel);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (canUseEventListeners) {\n        window.removeEventListener('resize', this.setDimensions, false);\n      }\n\n      this.stopAutoplay({\n        unmountAutoplayEvent: true\n      }, true);\n    }\n  }, {\n    key: \"getCurrentPanel\",\n    value: function getCurrentPanel() {\n      return this.props.currentPanel !== undefined ? this.props.currentPanel : this.state.currentPanel;\n    }\n  }, {\n    key: \"getIsAutoplayOn\",\n    value: function getIsAutoplayOn() {\n      return this.props.isAutoplayOn !== undefined ? this.props.isAutoplayOn : this.state.isAutoplayOn;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          hasAutoplay = _this$props.hasAutoplay,\n          hasPreviousNextPanelNavigation = _this$props.hasPreviousNextPanelNavigation,\n          isInfinite = _this$props.isInfinite;\n      var currentPanel = this.getCurrentPanel();\n      var id = this.props.id || this.generatedId;\n      var isPreviousBtnDisabled = !(isInfinite || this.canGoToPrevious());\n      var isNextBtnDisabled = !(isInfinite || this.canGoToNext());\n      var itemWidth = (this.state.stageWidth || this.stageWidth) / this.props.itemsPerPanel;\n      var carouselMargins = hasPreviousNextPanelNavigation ? {\n        marginLeft: '44px',\n        marginRight: '44px'\n      } : {};\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: classnames('slds-carousel', this.props.className),\n        id: id,\n        onKeyDown: this.handleKeyDown\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"slds-grid_vertical slds-col slds-path__scroller\"\n      }, hasAutoplay && /*#__PURE__*/React.createElement(AutoplayButton, {\n        assistiveText: this.props.assistiveText.autoplayButton,\n        isAutoplayOn: this.getIsAutoplayOn(),\n        onClick: this.onAutoplayBtnClick\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"slds-is-relative\",\n        style: carouselMargins\n      }, hasPreviousNextPanelNavigation && /*#__PURE__*/React.createElement(PreviousNextCarouselNavigator, {\n        assistiveText: this.props.assistiveText.previousPanel,\n        iconName: \"chevronleft\",\n        isDisabled: isPreviousBtnDisabled,\n        onClick: function onClick(event) {\n          if (_this2.getIsAutoplayOn()) {\n            _this2.stopAutoplay(event);\n          }\n\n          _this2.onPreviousPanelHandler(event);\n        },\n        inlineStyle: {\n          left: '-38px'\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        ref: this.stageItem,\n        className: \"slds-carousel__stage slds-show\"\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"slds-carousel__panels slds-is-relative\",\n        style: {\n          transform: \"translateX(\".concat(this.state.translateX, \"px)\")\n        }\n      }, this.props.items.map(function (item, index) {\n        return /*#__PURE__*/React.createElement(CarouselItem, _extends({\n          carouselId: id,\n          getPanelId: _this2.getPanelId,\n          onClick: function onClick(event) {\n            _this2.props.onItemClick(event, {\n              item: item\n            });\n          },\n          onFocus: function onFocus(event) {\n            if (_this2.getIsAutoplayOn()) {\n              _this2.stopAutoplay(event);\n            }\n          },\n          onRenderItem: _this2.props.onRenderItem\n        }, item, {\n          isInCurrentPanel: index >= currentPanel * _this2.props.itemsPerPanel && index < currentPanel * _this2.props.itemsPerPanel + _this2.props.itemsPerPanel,\n          itemWidth: itemWidth,\n          key: item.id,\n          panelIndex: Math.ceil((index + 1) / _this2.props.itemsPerPanel) - 1\n        }));\n      }))), hasPreviousNextPanelNavigation && /*#__PURE__*/React.createElement(PreviousNextCarouselNavigator, {\n        assistiveText: this.props.assistiveText.nextPanel,\n        iconName: \"chevronright\",\n        isDisabled: isNextBtnDisabled,\n        onClick: function onClick(event) {\n          if (_this2.getIsAutoplayOn()) {\n            _this2.stopAutoplay(event);\n          }\n\n          _this2.onNextPanelHandler(event);\n        },\n        inlineStyle: {\n          right: '-38px'\n        }\n      })), /*#__PURE__*/React.createElement(CarouselIndicators, {\n        noOfIndicators: this.nrOfPanels,\n        carouselId: id,\n        currentIndex: currentPanel,\n        getPanelId: this.getPanelId,\n        hasFocus: this.state.indicatorsHaveFocus,\n        onBlur: this.onIndicatorBlur,\n        onClick: this.onIndicatorClickHandler,\n        onFocus: this.onIndicatorFocus,\n        items: this.props.items,\n        itemsPerPanel: this.props.itemsPerPanel\n      })));\n    }\n  }]);\n\n  return Carousel;\n}(React.Component);\n\n_defineProperty(Carousel, \"displayName\", CAROUSEL);\n\n_defineProperty(Carousel, \"propTypes\", {\n  /**\n   * Description of the carousel items for screen-readers.\n   */\n  assistiveText: PropTypes.object,\n\n  /**\n   * Interval for the autoplay iteration\n   */\n  autoplayInterval: PropTypes.number,\n\n  /**\n   * CSS classes that are applied to the main 'slds-carousel' classed component container\n   */\n  className: PropTypes.oneOfType([PropTypes.array, PropTypes.object, PropTypes.string]),\n\n  /**\n   * Dictates the currently active/visible carousel panel. Use with `onRequestPanelChange` for a controlled carousel component. If not provided, the carousel will manage this itself via state.\n   */\n  currentPanel: PropTypes.number,\n\n  /**\n   * Boolean showing whether the autoplay button is available or not\n   */\n  hasAutoplay: PropTypes.bool,\n\n  /**\n   * Boolean for displaying the navigation indicators (left/right arrows) of the carousel\n   */\n  hasPreviousNextPanelNavigation: PropTypes.bool,\n\n  /**\n   * Id of component, if desired. If not provided an id is automatically generated\n   */\n  id: PropTypes.string,\n\n  /**\n   * Boolean that dictates whether autoplay is active or not. Use with `onRequestAutoplayToggle` for a controlled carousel component.\n   */\n  isAutoplayOn: PropTypes.bool,\n\n  /**\n   * Boolean for infinite loop navigation. Note: if not true autoplay will stop automatically at the last panel.\n   */\n  isInfinite: PropTypes.bool,\n\n  /**\n   * * **Array of item objects used by the default carousel item renderer.**\n   * Each object can contain:\n   * * `id`: The id of the carousel item. [REQUIRED]\n   * * `heading`: Primary string that will be used as the heading\n   * * `description`: Secondary string that is used to describe the item\n   * * `buttonLabel`: If assigned a call to button action will be rendered with this text, if unassigned no button is rendered\n   * * `imageAssistiveText`: Image alt text, if not present heading will be used instead\n   * * `href`: Used for item link, if not provided '#' is used instead\n   * * `src`: Item image src value\n   */\n  items: PropTypes.array.isRequired,\n\n  /**\n   * Number of items to be displayed at a time in the carousel\n   */\n  itemsPerPanel: PropTypes.number,\n\n  /**\n   * Accepts a custom carousel item rendering function\n   */\n  onRenderItem: PropTypes.func,\n\n  /**\n   * Called whenever `isAutoplayOn` is requested to be toggled on or off. Use with `isAutoplayOn` prop for a controlled carousel component. Passes an event object and a data object with the current `isAutoplayOn` value as an attribute.\n   */\n  onRequestAutoplayToggle: PropTypes.func,\n\n  /**\n   * Called whenever the panel is requested to change due to user interaction or auto-play. Use with `currentPanel` for a controlled carousel component. Passes an event object and a data object with `currentPanel` and `requestedPanel` attributes.\n   */\n  onRequestPanelChange: PropTypes.func,\n\n  /**\n   * Handler for clicking on a carousel item\n   */\n  onItemClick: PropTypes.func\n});\n\n_defineProperty(Carousel, \"defaultProps\", defaultProps);\n\nexport default Carousel;","map":{"version":3,"sources":["../../../.tmp-es/components/carousel/index.jsx"],"names":["defaultProps","assistiveText","autoplayButton","nextPanel","previousPanel","autoplayInterval","hasAutoplay","hasPreviousNextPanelNavigation","isInfinite","itemsPerPanel","Carousel","React","Component","CAROUSEL","PropTypes","className","currentPanel","id","isAutoplayOn","items","onRenderItem","onRequestAutoplayToggle","onRequestPanelChange","onItemClick","func","Math","props","indicatorsHaveFocus","stageWidth","translateX","shortid","canUseDOM","window","mountAutoplayEvent","prevProps","updateAutoplayEvent","unmountAutoplayEvent","next","prev","actionToTake","carouselId","itemId","offsetWidth","amount","requestedPanel","setInterval","clearInterval","keyDownCallbacks","KEYS","event","EventUtil","isPreviousBtnDisabled","isNextBtnDisabled","itemWidth","carouselMargins","marginLeft","marginRight","classnames","handleKeyDown","onAutoplayBtnClick","left","transform","item","index","right"],"mappings":"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","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// # Carousel Component\n\n// Implements the [Carousel design pattern](https://www.lightningdesignsystem.com/components/carousel/) in React.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\n// ### shortid\n// [npmjs.com/package/shortid](https://www.npmjs.com/package/shortid)\n// shortid is a short, non-sequential, url-friendly, unique id generator\nimport shortid from 'shortid';\n\nimport { CAROUSEL } from '../../utilities/constants';\n\nimport {\n\tcanUseDOM,\n\tcanUseEventListeners,\n} from '../../utilities/execution-environment';\n\nimport CarouselIndicators from './private/carousel-indicators';\nimport PreviousNextCarouselNavigator from './private/previous-next-carousel-navigator';\nimport CarouselItem from './private/carousel-item';\nimport AutoplayButton from './private/auto-play-button';\n\n// ### Event Helpers\nimport KEYS from '../../utilities/key-code';\nimport EventUtil from '../../utilities/event';\n\n/* eslint-disable jsx-a11y/no-static-element-interactions */\n\n// ### Default Props\nconst defaultProps = {\n\tassistiveText: {\n\t\tautoplayButton: 'Start / Stop auto-play',\n\t\tnextPanel: 'Next Panel',\n\t\tpreviousPanel: 'Previous Panel',\n\t},\n\tautoplayInterval: 4000,\n\thasAutoplay: false,\n\thasPreviousNextPanelNavigation: false,\n\tisInfinite: false,\n\titemsPerPanel: 1,\n};\n\n/**\n * A carousel allows multiple pieces of featured content to occupy an allocated amount of space.\n * Currently panel index and auto play cannot be controlled by the app.\n */\nclass Carousel extends React.Component {\n\t// ### Display Name\n\t// Always use the canonical component name as the React display name.\n\tstatic displayName = CAROUSEL;\n\n\t// ### Prop Types\n\tstatic propTypes = {\n\t\t/**\n\t\t * Description of the carousel items for screen-readers.\n\t\t */\n\t\tassistiveText: PropTypes.object,\n\t\t/**\n\t\t * Interval for the autoplay iteration\n\t\t */\n\t\tautoplayInterval: PropTypes.number,\n\t\t/**\n\t\t * CSS classes that are applied to the main 'slds-carousel' classed component container\n\t\t */\n\t\tclassName: PropTypes.oneOfType([\n\t\t\tPropTypes.array,\n\t\t\tPropTypes.object,\n\t\t\tPropTypes.string,\n\t\t]),\n\t\t/**\n\t\t * Dictates the currently active/visible carousel panel. Use with `onRequestPanelChange` for a controlled carousel component. If not provided, the carousel will manage this itself via state.\n\t\t */\n\t\tcurrentPanel: PropTypes.number,\n\t\t/**\n\t\t * Boolean showing whether the autoplay button is available or not\n\t\t */\n\t\thasAutoplay: PropTypes.bool,\n\t\t/**\n\t\t * Boolean for displaying the navigation indicators (left/right arrows) of the carousel\n\t\t */\n\t\thasPreviousNextPanelNavigation: PropTypes.bool,\n\t\t/**\n\t\t * Id of component, if desired. If not provided an id is automatically generated\n\t\t */\n\t\tid: PropTypes.string,\n\t\t/**\n\t\t * Boolean that dictates whether autoplay is active or not. Use with `onRequestAutoplayToggle` for a controlled carousel component.\n\t\t */\n\t\tisAutoplayOn: PropTypes.bool,\n\t\t/**\n\t\t * Boolean for infinite loop navigation. Note: if not true autoplay will stop automatically at the last panel.\n\t\t */\n\t\tisInfinite: PropTypes.bool,\n\t\t/**\n\t\t * * **Array of item objects used by the default carousel item renderer.**\n\t\t * Each object can contain:\n\t\t * * `id`: The id of the carousel item. [REQUIRED]\n\t\t * * `heading`: Primary string that will be used as the heading\n\t\t * * `description`: Secondary string that is used to describe the item\n\t\t * * `buttonLabel`: If assigned a call to button action will be rendered with this text, if unassigned no button is rendered\n\t\t * * `imageAssistiveText`: Image alt text, if not present heading will be used instead\n\t\t * * `href`: Used for item link, if not provided '#' is used instead\n\t\t * * `src`: Item image src value\n\t\t */\n\t\titems: PropTypes.array.isRequired,\n\t\t/**\n\t\t * Number of items to be displayed at a time in the carousel\n\t\t */\n\t\titemsPerPanel: PropTypes.number,\n\t\t/**\n\t\t * Accepts a custom carousel item rendering function\n\t\t */\n\t\tonRenderItem: PropTypes.func,\n\t\t/**\n\t\t * Called whenever `isAutoplayOn` is requested to be toggled on or off. Use with `isAutoplayOn` prop for a controlled carousel component. Passes an event object and a data object with the current `isAutoplayOn` value as an attribute.\n\t\t */\n\t\tonRequestAutoplayToggle: PropTypes.func,\n\t\t/**\n\t\t * Called whenever the panel is requested to change due to user interaction or auto-play. Use with `currentPanel` for a controlled carousel component. Passes an event object and a data object with `currentPanel` and `requestedPanel` attributes.\n\t\t */\n\t\tonRequestPanelChange: PropTypes.func,\n\t\t/**\n\t\t * Handler for clicking on a carousel item\n\t\t */\n\t\tonItemClick: PropTypes.func,\n\t};\n\n\t// ### Default Props\n\tstatic defaultProps = defaultProps;\n\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.nrOfPanels = Math.ceil(props.items.length / props.itemsPerPanel);\n\t\tthis.stageItem = React.createRef();\n\n\t\tthis.state = {\n\t\t\tcurrentPanel: props.currentPanel !== undefined ? props.currentPanel : 0,\n\t\t\tindicatorsHaveFocus: false,\n\t\t\tisAutoplayOn:\n\t\t\t\tprops.isAutoplayOn !== undefined\n\t\t\t\t\t? props.isAutoplayOn\n\t\t\t\t\t: props.hasAutoplay,\n\t\t\tstageWidth: 0,\n\t\t\ttranslateX: -1000000,\n\t\t};\n\n\t\tthis.generatedId = shortid.generate();\n\t}\n\n\tcomponentDidMount() {\n\t\tif (\n\t\t\tcanUseDOM &&\n\t\t\tthis.stageItem !== undefined &&\n\t\t\tthis.stageItem.current !== undefined &&\n\t\t\tthis.stageItem.current.offsetWidth !== undefined\n\t\t) {\n\t\t\tthis.stageWidth = this.stageItem.current.offsetWidth;\n\t\t}\n\n\t\tif (canUseEventListeners) {\n\t\t\twindow.addEventListener('resize', this.setDimensions, false);\n\t\t}\n\n\t\tthis.changeTranslationAutomatically();\n\n\t\tif (this.getIsAutoplayOn()) {\n\t\t\tthis.startAutoplay({ mountAutoplayEvent: true });\n\t\t}\n\t}\n\n\tcomponentDidUpdate(prevProps) {\n\t\tif (\n\t\t\tthis.props.currentPanel !== undefined &&\n\t\t\tprevProps.currentPanel !== this.props.currentPanel\n\t\t) {\n\t\t\tthis.changeTranslationAutomatically();\n\t\t}\n\t\tif (\n\t\t\tthis.props.isAutoplayOn !== undefined &&\n\t\t\tprevProps.isAutoplayOn !== this.props.isAutoplayOn\n\t\t) {\n\t\t\tif (this.props.isAutoplayOn) {\n\t\t\t\tthis.startAutoplay({ updateAutoplayEvent: true });\n\t\t\t} else {\n\t\t\t\tthis.stopAutoplay({ updateAutoplayEvent: true }, true);\n\t\t\t}\n\t\t}\n\t\tif (\n\t\t\tprevProps.items.length !== this.props.items.length ||\n\t\t\tprevProps.itemsPerPanel !== this.props.itemsPerPanel\n\t\t) {\n\t\t\tthis.nrOfPanels = Math.ceil(\n\t\t\t\tthis.props.items.length / this.props.itemsPerPanel\n\t\t\t);\n\t\t}\n\t}\n\n\tcomponentWillUnmount() {\n\t\tif (canUseEventListeners) {\n\t\t\twindow.removeEventListener('resize', this.setDimensions, false);\n\t\t}\n\t\tthis.stopAutoplay({ unmountAutoplayEvent: true }, true);\n\t}\n\n\tonNextPanelHandler = (event) => {\n\t\tlet next = this.getCurrentPanel() + 1;\n\t\tif (next > this.nrOfPanels - 1) {\n\t\t\tnext = 0;\n\t\t}\n\t\tthis.setCurrentPanel(event, next, this.changeTranslationAutomatically);\n\t};\n\n\tonPreviousPanelHandler = (event) => {\n\t\tlet prev = this.getCurrentPanel() - 1;\n\t\tif (prev < 0) {\n\t\t\tprev = this.nrOfPanels - 1;\n\t\t}\n\t\tthis.setCurrentPanel(event, prev, this.changeTranslationAutomatically);\n\t};\n\n\tonIndicatorBlur = () => {\n\t\tthis.setState({ indicatorsHaveFocus: false });\n\t};\n\n\tonIndicatorClickHandler = (event, panel) => {\n\t\tthis.setCurrentPanel(event, panel, this.changeTranslationAutomatically);\n\t\tthis.setState({ indicatorsHaveFocus: true });\n\t\tif (this.getIsAutoplayOn()) {\n\t\t\tthis.stopAutoplay(event);\n\t\t}\n\t};\n\n\tonIndicatorFocus = (event) => {\n\t\tthis.setState({ indicatorsHaveFocus: true });\n\t\tif (this.getIsAutoplayOn()) {\n\t\t\tthis.stopAutoplay(event);\n\t\t}\n\t};\n\n\tonAutoplayBtnClick = (event) => {\n\t\tconst isAutoplayOn = this.getIsAutoplayOn();\n\n\t\tif (this.props.onRequestAutoplayToggle) {\n\t\t\tthis.props.onRequestAutoplayToggle(event, { isAutoplayOn });\n\t\t} else {\n\t\t\tconst actionToTake = isAutoplayOn\n\t\t\t\t? this.stopAutoplay\n\t\t\t\t: this.startAutoplay;\n\n\t\t\tthis.setState({\n\t\t\t\tisAutoplayOn: !isAutoplayOn,\n\t\t\t});\n\t\t\tactionToTake(event);\n\t\t}\n\t};\n\n\tgetPanelId = ({ carouselId, itemId }) => `content-id-${carouselId}-${itemId}`;\n\n\tgetCurrentPanel() {\n\t\treturn this.props.currentPanel !== undefined\n\t\t\t? this.props.currentPanel\n\t\t\t: this.state.currentPanel;\n\t}\n\n\tgetIsAutoplayOn() {\n\t\treturn this.props.isAutoplayOn !== undefined\n\t\t\t? this.props.isAutoplayOn\n\t\t\t: this.state.isAutoplayOn;\n\t}\n\n\tsetDimensions = () => {\n\t\tif (\n\t\t\tcanUseDOM &&\n\t\t\tthis.stageItem !== undefined &&\n\t\t\tthis.stageItem.current !== undefined &&\n\t\t\tthis.stageItem.current.offsetWidth !== undefined\n\t\t) {\n\t\t\tthis.setState(\n\t\t\t\t{ stageWidth: this.stageItem.current.offsetWidth },\n\t\t\t\tthis.changeTranslationAutomatically\n\t\t\t);\n\t\t}\n\t};\n\n\tsetTranslationAmount = (amount, cb) => {\n\t\tthis.setState({ translateX: amount }, cb);\n\t};\n\n\tsetCurrentPanel = (event, amount, cb) => {\n\t\tif (this.props.onRequestPanelChange) {\n\t\t\tthis.props.onRequestPanelChange(event, {\n\t\t\t\tcurrentPanel: this.getCurrentPanel(),\n\t\t\t\trequestedPanel: amount,\n\t\t\t});\n\t\t} else {\n\t\t\tthis.setState({ currentPanel: amount }, cb);\n\t\t}\n\t};\n\n\tstartAutoplay = (event) => {\n\t\tthis.autoplayId = setInterval(() => {\n\t\t\tif (this.canGoToNext()) {\n\t\t\t\tthis.onNextPanelHandler(event);\n\t\t\t} else if (this.props.isInfinite) {\n\t\t\t\tthis.setCurrentPanel(event, 0, this.changeTranslationAutomatically);\n\t\t\t} else {\n\t\t\t\tthis.stopAutoplay(event);\n\t\t\t}\n\t\t}, this.props.autoplayInterval);\n\t};\n\n\tstopAutoplay = (event, ignoreCallbacksAndStateUpdates) => {\n\t\tif (this.autoplayId) {\n\t\t\tclearInterval(this.autoplayId);\n\t\t}\n\n\t\tif (!ignoreCallbacksAndStateUpdates) {\n\t\t\tif (this.props.onRequestAutoplayToggle) {\n\t\t\t\tthis.props.onRequestAutoplayToggle(event, {\n\t\t\t\t\tisAutoplayOn: this.getIsAutoplayOn(),\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.setState({ isAutoplayOn: false });\n\t\t\t}\n\t\t}\n\t};\n\n\tchangeTranslationAutomatically = () => {\n\t\tthis.setTranslationAmount(\n\t\t\t-((this.state.stageWidth || this.stageWidth) * this.getCurrentPanel())\n\t\t);\n\t};\n\n\tcanGoToNext = () => this.getCurrentPanel() < this.nrOfPanels - 1;\n\n\tcanGoToPrevious = () => this.getCurrentPanel() > 0;\n\n\thandleKeyDown = (event) => {\n\t\tconst keyDownCallbacks = {\n\t\t\t[KEYS.LEFT]: () => {\n\t\t\t\tif (this.props.isInfinite || this.canGoToPrevious()) {\n\t\t\t\t\tthis.onPreviousPanelHandler(event);\n\t\t\t\t\tthis.setState({ indicatorsHaveFocus: true });\n\t\t\t\t\tif (this.getIsAutoplayOn()) {\n\t\t\t\t\t\tthis.stopAutoplay(event);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t[KEYS.RIGHT]: () => {\n\t\t\t\tif (this.props.isInfinite || this.canGoToNext()) {\n\t\t\t\t\tthis.onNextPanelHandler(event);\n\t\t\t\t\tthis.setState({ indicatorsHaveFocus: true });\n\t\t\t\t\tif (this.getIsAutoplayOn()) {\n\t\t\t\t\t\tthis.stopAutoplay(event);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t};\n\n\t\tif (keyDownCallbacks[event.keyCode]) {\n\t\t\tEventUtil.trapImmediate(event);\n\t\t\tkeyDownCallbacks[event.keyCode]();\n\t\t}\n\t};\n\n\trender() {\n\t\tconst {\n\t\t\thasAutoplay,\n\t\t\thasPreviousNextPanelNavigation,\n\t\t\tisInfinite,\n\t\t} = this.props;\n\t\tconst currentPanel = this.getCurrentPanel();\n\t\tconst id = this.props.id || this.generatedId;\n\t\tconst isPreviousBtnDisabled = !(isInfinite || this.canGoToPrevious());\n\t\tconst isNextBtnDisabled = !(isInfinite || this.canGoToNext());\n\t\tconst itemWidth =\n\t\t\t(this.state.stageWidth || this.stageWidth) / this.props.itemsPerPanel;\n\t\tconst carouselMargins = hasPreviousNextPanelNavigation\n\t\t\t? { marginLeft: '44px', marginRight: '44px' }\n\t\t\t: {};\n\t\treturn (\n\t\t\t<div\n\t\t\t\tclassName={classnames('slds-carousel', this.props.className)}\n\t\t\t\tid={id}\n\t\t\t\tonKeyDown={this.handleKeyDown}\n\t\t\t>\n\t\t\t\t<div className=\"slds-grid_vertical slds-col slds-path__scroller\">\n\t\t\t\t\t{hasAutoplay && (\n\t\t\t\t\t\t<AutoplayButton\n\t\t\t\t\t\t\tassistiveText={this.props.assistiveText.autoplayButton}\n\t\t\t\t\t\t\tisAutoplayOn={this.getIsAutoplayOn()}\n\t\t\t\t\t\t\tonClick={this.onAutoplayBtnClick}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\t\t\t\t\t<div className=\"slds-is-relative\" style={carouselMargins}>\n\t\t\t\t\t\t{hasPreviousNextPanelNavigation && (\n\t\t\t\t\t\t\t<PreviousNextCarouselNavigator\n\t\t\t\t\t\t\t\tassistiveText={this.props.assistiveText.previousPanel}\n\t\t\t\t\t\t\t\ticonName=\"chevronleft\"\n\t\t\t\t\t\t\t\tisDisabled={isPreviousBtnDisabled}\n\t\t\t\t\t\t\t\tonClick={(event) => {\n\t\t\t\t\t\t\t\t\tif (this.getIsAutoplayOn()) {\n\t\t\t\t\t\t\t\t\t\tthis.stopAutoplay(event);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tthis.onPreviousPanelHandler(event);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tinlineStyle={{ left: '-38px' }}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tref={this.stageItem}\n\t\t\t\t\t\t\tclassName=\"slds-carousel__stage slds-show\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"slds-carousel__panels slds-is-relative\"\n\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\ttransform: `translateX(${this.state.translateX}px)`,\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{this.props.items.map((item, index) => (\n\t\t\t\t\t\t\t\t\t<CarouselItem\n\t\t\t\t\t\t\t\t\t\tcarouselId={id}\n\t\t\t\t\t\t\t\t\t\tgetPanelId={this.getPanelId}\n\t\t\t\t\t\t\t\t\t\tonClick={(event) => {\n\t\t\t\t\t\t\t\t\t\t\tthis.props.onItemClick(event, { item });\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tonFocus={(event) => {\n\t\t\t\t\t\t\t\t\t\t\tif (this.getIsAutoplayOn()) {\n\t\t\t\t\t\t\t\t\t\t\t\tthis.stopAutoplay(event);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tonRenderItem={this.props.onRenderItem}\n\t\t\t\t\t\t\t\t\t\t{...item}\n\t\t\t\t\t\t\t\t\t\tisInCurrentPanel={\n\t\t\t\t\t\t\t\t\t\t\tindex >= currentPanel * this.props.itemsPerPanel &&\n\t\t\t\t\t\t\t\t\t\t\tindex <\n\t\t\t\t\t\t\t\t\t\t\t\tcurrentPanel * this.props.itemsPerPanel +\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.props.itemsPerPanel\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\titemWidth={itemWidth}\n\t\t\t\t\t\t\t\t\t\tkey={item.id}\n\t\t\t\t\t\t\t\t\t\tpanelIndex={\n\t\t\t\t\t\t\t\t\t\t\tMath.ceil((index + 1) / this.props.itemsPerPanel) - 1\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{hasPreviousNextPanelNavigation && (\n\t\t\t\t\t\t\t<PreviousNextCarouselNavigator\n\t\t\t\t\t\t\t\tassistiveText={this.props.assistiveText.nextPanel}\n\t\t\t\t\t\t\t\ticonName=\"chevronright\"\n\t\t\t\t\t\t\t\tisDisabled={isNextBtnDisabled}\n\t\t\t\t\t\t\t\tonClick={(event) => {\n\t\t\t\t\t\t\t\t\tif (this.getIsAutoplayOn()) {\n\t\t\t\t\t\t\t\t\t\tthis.stopAutoplay(event);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tthis.onNextPanelHandler(event);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tinlineStyle={{ right: '-38px' }}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t\t<CarouselIndicators\n\t\t\t\t\t\tnoOfIndicators={this.nrOfPanels}\n\t\t\t\t\t\tcarouselId={id}\n\t\t\t\t\t\tcurrentIndex={currentPanel}\n\t\t\t\t\t\tgetPanelId={this.getPanelId}\n\t\t\t\t\t\thasFocus={this.state.indicatorsHaveFocus}\n\t\t\t\t\t\tonBlur={this.onIndicatorBlur}\n\t\t\t\t\t\tonClick={this.onIndicatorClickHandler}\n\t\t\t\t\t\tonFocus={this.onIndicatorFocus}\n\t\t\t\t\t\titems={this.props.items}\n\t\t\t\t\t\titemsPerPanel={this.props.itemsPerPanel}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Carousel;\n"]},"metadata":{},"sourceType":"module"}