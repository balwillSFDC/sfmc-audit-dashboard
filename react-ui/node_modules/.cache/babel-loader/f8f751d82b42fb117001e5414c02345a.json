{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n// # Illustration Component\n// Based on SLDS v2.6.2\n// ## Dependencies\n// ### React\n\n\nimport React from 'react';\nimport PropTypes from 'prop-types'; // This component's `checkProps` which issues warnings to developers about properties\n// when in development mode (similar to React's built in development tools)\n\nimport checkProps from './check-props'; // ### classNames\n// [github.com/JedWatson/classnames](https://github.com/JedWatson/classnames)\n// A simple javascript utility for conditionally joining classNames together.\n\nimport classNames from '../../utilities/class-names'; // ## SVG\n\nimport Svg from '../utilities/utility-icon/svg'; // ## Constants\n\nimport { ILLUSTRATION } from '../../utilities/constants';\nimport componentDoc from './component.json';\n/**\n * An illustration is an image and inline text that work in tandem to communicate a state in a more friendly way.\n */\n\nvar Illustration = function Illustration(props) {\n  var className = props.className,\n      illustration = props.illustration,\n      heading = props.heading,\n      messageBody = props.messageBody,\n      name = props.name,\n      path = props.path,\n      size = props.size,\n      style = props.style;\n  checkProps('Illustration', props, componentDoc);\n  var kababCaseName = name ? name.replace(/_| /g, '-').toLowerCase() : '';\n\n  var styles = _objectSpread({}, style);\n\n  var illustrationSvg; // large illustration svg should have a default height of 400px if not already specified\n\n  if (size === 'large' && !styles.height) {\n    styles.height = '400px';\n  }\n\n  if (illustration) {\n    // Use SVG data passed in with `illustration` prop\n    illustrationSvg = /*#__PURE__*/React.createElement(Svg, {\n      className: \"slds-illustration__svg\",\n      \"aria-hidden\": \"true\",\n      data: illustration,\n      name: kababCaseName,\n      style: styles\n    });\n  } else if (path) {\n    illustrationSvg = /*#__PURE__*/React.createElement(\"svg\", {\n      className: \"slds-illustration__svg\",\n      \"aria-hidden\": \"true\",\n      name: kababCaseName,\n      style: styles\n    }, /*#__PURE__*/React.createElement(\"use\", {\n      xlinkHref: path\n    }));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(className, 'slds-illustration', {\n      'slds-illustration_small': size === 'small',\n      'slds-illustration_large': size === 'large'\n    })\n  }, illustrationSvg, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"slds-text-longform\"\n  }, heading ? /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"slds-text-heading_medium\"\n  }, heading) : null, messageBody ? /*#__PURE__*/React.createElement(\"p\", {\n    className: \"slds-text-body_regular\"\n  }, messageBody) : null));\n}; // ### Display Name\n// Always use the canonical component name as the React display name.\n\n\nIllustration.displayName = ILLUSTRATION; // ### Prop Types\n\nIllustration.propTypes = {\n  /**\n   * CSS classes that are applied to the SVG. _Tested with Mocha testing._\n   */\n  className: PropTypes.oneOfType([PropTypes.array, PropTypes.object, PropTypes.string]),\n\n  /**\n   * A heading text. It is required if illustration is present. _Tested with snapshot testing._ _Tested with Mocha testing._\n   */\n  heading: PropTypes.string,\n\n  /**\n   * A custom SVG object to use instead of the supplied SLDS illustrations, look in `design-system-react/icons` for examples and syntax. _Tested with snapshot testing._ _Tested with Mocha testing._\n   */\n  illustration: PropTypes.object,\n\n  /**\n   * Indicates whether the illustration SVGs are from the design-system-react repo. If yes, set to true.\n   */\n  internalIllustration: PropTypes.bool.isRequired,\n\n  /**\n   * A message body below the heading to further communicate the state of the component. _Tested with snapshot testing._ _Tested with Mocha testing._\n   */\n  messageBody: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n\n  /**\n   * Name of the illustration. Visit <a href='https://lightningdesignsystem.com/components/illustration/'>Lightning Design System Illustration</a> to reference illustration names. _Tested with snapshot testing._ _Tested with Mocha testing._\n   */\n  name: PropTypes.string,\n\n  /**\n   * Path to the illustration SVG image. _Tested with snapshot testing._\n   */\n  path: PropTypes.string,\n\n  /**\n   * Size of the illustration. _Tested with snapshot testing._ _Tested with Mocha testing._\n   */\n  size: PropTypes.oneOf(['small', 'large']),\n\n  /**\n   * Custom styles to be passed to the illustration SVG. _Tested with Mocha testing._\n   */\n  style: PropTypes.object\n};\nIllustration.defaultProps = {\n  internalIllustration: true,\n  size: 'small',\n  style: {}\n};\nexport default Illustration;","map":{"version":3,"sources":["../../../.tmp-es/components/illustration/index.jsx"],"names":["Illustration","className","illustration","heading","messageBody","name","path","size","style","props","checkProps","kababCaseName","styles","illustrationSvg","classNames","PropTypes","internalIllustration","object"],"mappings":"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","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// # Illustration Component\n\n// Based on SLDS v2.6.2\n\n// ## Dependencies\n\n// ### React\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n// This component's `checkProps` which issues warnings to developers about properties\n// when in development mode (similar to React's built in development tools)\nimport checkProps from './check-props';\n\n// ### classNames\n// [github.com/JedWatson/classnames](https://github.com/JedWatson/classnames)\n// A simple javascript utility for conditionally joining classNames together.\nimport classNames from '../../utilities/class-names';\n\n// ## SVG\nimport Svg from '../utilities/utility-icon/svg';\n\n// ## Constants\nimport { ILLUSTRATION } from '../../utilities/constants';\nimport componentDoc from './component.json';\n\n/**\n * An illustration is an image and inline text that work in tandem to communicate a state in a more friendly way.\n */\nconst Illustration = (props) => {\n\tconst {\n\t\tclassName,\n\t\tillustration,\n\t\theading,\n\t\tmessageBody,\n\t\tname,\n\t\tpath,\n\t\tsize,\n\t\tstyle,\n\t} = props;\n\n\tcheckProps('Illustration', props, componentDoc);\n\tconst kababCaseName = name ? name.replace(/_| /g, '-').toLowerCase() : '';\n\tconst styles = { ...style };\n\tlet illustrationSvg;\n\n\t// large illustration svg should have a default height of 400px if not already specified\n\tif (size === 'large' && !styles.height) {\n\t\tstyles.height = '400px';\n\t}\n\n\tif (illustration) {\n\t\t// Use SVG data passed in with `illustration` prop\n\t\tillustrationSvg = (\n\t\t\t<Svg\n\t\t\t\tclassName=\"slds-illustration__svg\"\n\t\t\t\taria-hidden=\"true\"\n\t\t\t\tdata={illustration}\n\t\t\t\tname={kababCaseName}\n\t\t\t\tstyle={styles}\n\t\t\t/>\n\t\t);\n\t} else if (path) {\n\t\tillustrationSvg = (\n\t\t\t<svg\n\t\t\t\tclassName=\"slds-illustration__svg\"\n\t\t\t\taria-hidden=\"true\"\n\t\t\t\tname={kababCaseName}\n\t\t\t\tstyle={styles}\n\t\t\t>\n\t\t\t\t<use xlinkHref={path} />\n\t\t\t</svg>\n\t\t);\n\t}\n\n\treturn (\n\t\t<div\n\t\t\tclassName={classNames(className, 'slds-illustration', {\n\t\t\t\t'slds-illustration_small': size === 'small',\n\t\t\t\t'slds-illustration_large': size === 'large',\n\t\t\t})}\n\t\t>\n\t\t\t{illustrationSvg}\n\t\t\t<div className=\"slds-text-longform\">\n\t\t\t\t{heading ? (\n\t\t\t\t\t<h3 className=\"slds-text-heading_medium\">{heading}</h3>\n\t\t\t\t) : null}\n\t\t\t\t{messageBody ? (\n\t\t\t\t\t<p className=\"slds-text-body_regular\">{messageBody}</p>\n\t\t\t\t) : null}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\n// ### Display Name\n// Always use the canonical component name as the React display name.\nIllustration.displayName = ILLUSTRATION;\n\n// ### Prop Types\nIllustration.propTypes = {\n\t/**\n\t * CSS classes that are applied to the SVG. _Tested with Mocha testing._\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * A heading text. It is required if illustration is present. _Tested with snapshot testing._ _Tested with Mocha testing._\n\t */\n\theading: PropTypes.string,\n\t/**\n\t * A custom SVG object to use instead of the supplied SLDS illustrations, look in `design-system-react/icons` for examples and syntax. _Tested with snapshot testing._ _Tested with Mocha testing._\n\t */\n\tillustration: PropTypes.object,\n\t/**\n\t * Indicates whether the illustration SVGs are from the design-system-react repo. If yes, set to true.\n\t */\n\tinternalIllustration: PropTypes.bool.isRequired,\n\t/**\n\t * A message body below the heading to further communicate the state of the component. _Tested with snapshot testing._ _Tested with Mocha testing._\n\t */\n\tmessageBody: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n\t/**\n\t * Name of the illustration. Visit <a href='https://lightningdesignsystem.com/components/illustration/'>Lightning Design System Illustration</a> to reference illustration names. _Tested with snapshot testing._ _Tested with Mocha testing._\n\t */\n\tname: PropTypes.string,\n\t/**\n\t * Path to the illustration SVG image. _Tested with snapshot testing._\n\t */\n\tpath: PropTypes.string,\n\t/**\n\t * Size of the illustration. _Tested with snapshot testing._ _Tested with Mocha testing._\n\t */\n\tsize: PropTypes.oneOf(['small', 'large']),\n\t/**\n\t * Custom styles to be passed to the illustration SVG. _Tested with Mocha testing._\n\t */\n\tstyle: PropTypes.object,\n};\n\nIllustration.defaultProps = {\n\tinternalIllustration: true,\n\tsize: 'small',\n\tstyle: {},\n};\n\nexport default Illustration;\n"]},"metadata":{},"sourceType":"module"}