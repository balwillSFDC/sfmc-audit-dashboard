{"ast":null,"code":"/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n// ### React\nimport React from 'react';\nimport PropTypes from 'prop-types'; // ### classNames\n\nimport classNames from 'classnames'; // ## Constants\n\nimport { DATA_TABLE_CELL } from '../../utilities/constants';\n/**\n * The default Cell renderer for the DataTable. Pass in any React component with the same `displayName` which takes the same props to provide custom rendering.\n */\n\nvar DataTableCell = function DataTableCell(props) {\n  var childText = /*#__PURE__*/React.isValidElement(props.children) ? props.children.props.children : props.children;\n  var contents = /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames({\n      'slds-truncate': props.fixedLayout\n    }),\n    title: props.title || childText\n  }, props.children);\n  var cell = /*#__PURE__*/React.createElement(\"td\", {\n    className: props.className,\n    \"data-label\": props.label,\n    role: props.fixedLayout ? 'gridcell' : null,\n    style: props.width ? {\n      width: props.width\n    } : null,\n    headers: props.headerId\n  }, contents);\n\n  if (props.primaryColumn) {\n    cell = /*#__PURE__*/React.createElement(\"th\", {\n      className: props.className,\n      \"data-label\": props.label,\n      role: props.fixedLayout ? 'gridcell' : null,\n      style: props.width ? {\n        width: props.width\n      } : null\n    }, contents);\n  }\n\n  return cell;\n}; // ### Display Name\n// Always use the canonical component name as the React display name.\n\n\nDataTableCell.displayName = DATA_TABLE_CELL; // ### Prop Types\n\nDataTableCell.propTypes = {\n  /**\n   * The contents of the cell. This can be simple text or DOM nodes. Equivalent to `props.item[props.property]`\n   */\n  children: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n\n  /**\n   * Class names to be added to the cell.\n   */\n  className: PropTypes.oneOfType([PropTypes.array, PropTypes.object, PropTypes.string]),\n\n  /**\n   * Use this if you are creating an advanced table (selectable, sortable, or resizable rows)\n   */\n  fixedLayout: PropTypes.bool,\n\n  /**\n   * The item from the items which represents this row.\n   */\n  item: PropTypes.object,\n\n  /**\n   * The primary column for a row. This is almost always the first column.\n   */\n  primaryColumn: PropTypes.bool,\n\n  /**\n   * The property of this item to display.\n   */\n  property: PropTypes.string,\n\n  /**\n   * Shows on hover. Useful for truncated cells.\n   */\n  title: PropTypes.string,\n\n  /**\n   * Width of column. This is required for advanced/fixed layout tables. Please provide units. (`rems` are recommended)\n   */\n  width: PropTypes.string\n};\nexport default DataTableCell;","map":{"version":3,"sources":["../../../.tmp-es/components/data-table/cell.jsx"],"names":["DataTableCell","childText","props","contents","classNames","fixedLayout","cell","width","headerId","children","PropTypes","className","item","primaryColumn","property","title","string"],"mappings":"AAAA;;AACA;AAEA;AACA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA,C,CAEA;;AACA,OAAA,UAAA,MAAA,YAAA,C,CAEA;;AACA,SAAA,eAAA,QAAA,2BAAA;AAEA;AACA;AACA;;AACA,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,CAAA,KAAA,EAAW;AAChC,MAAMC,SAAS,GAAG,aAAA,KAAK,CAAL,cAAA,CAAqBC,KAAK,CAA1B,QAAA,IACfA,KAAK,CAALA,QAAAA,CAAAA,KAAAA,CADe,QAAA,GAEfA,KAAK,CAFR,QAAA;AAGA,MAAMC,QAAQ,GAAA,aACb,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACC,IAAA,SAAS,EAAEC,UAAU,CAAC;AACrB,uBAAiBF,KAAK,CAACG;AADF,KAAD,CADtB;AAIC,IAAA,KAAK,EAAEH,KAAK,CAALA,KAAAA,IAAeD;AAJvB,GAAA,EAMEC,KAAK,CAPR,QACC,CADD;AAWA,MAAII,IAAI,GAAA,aACP,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AACC,IAAA,SAAS,EAAEJ,KAAK,CADjB,SAAA;AAEC,kBAAYA,KAAK,CAFlB,KAAA;AAGC,IAAA,IAAI,EAAEA,KAAK,CAALA,WAAAA,GAAAA,UAAAA,GAHP,IAAA;AAIC,IAAA,KAAK,EAAE,KAAK,CAAL,KAAA,GAAc;AAAEK,MAAAA,KAAK,EAAEL,KAAK,CAACK;AAAf,KAAd,GAJR,IAAA;AAKC,IAAA,OAAO,EAAEL,KAAK,CAACM;AALhB,GAAA,EADD,QACC,CADD;;AAYA,MAAIN,KAAK,CAAT,aAAA,EAAyB;AACxBI,IAAAA,IAAI,GAAA,aACH,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AACC,MAAA,SAAS,EAAEJ,KAAK,CADjB,SAAA;AAEC,oBAAYA,KAAK,CAFlB,KAAA;AAGC,MAAA,IAAI,EAAEA,KAAK,CAALA,WAAAA,GAAAA,UAAAA,GAHP,IAAA;AAIC,MAAA,KAAK,EAAE,KAAK,CAAL,KAAA,GAAc;AAAEK,QAAAA,KAAK,EAAEL,KAAK,CAACK;AAAf,OAAd,GAAuC;AAJ/C,KAAA,EADDD,QACC,CADDA;AAUA;;AAED,SAAA,IAAA;AAxCD,CAAA,C,CA2CA;AACA;;;AACAN,aAAa,CAAbA,WAAAA,GAAAA,eAAAA,C,CAEA;;AACAA,aAAa,CAAbA,SAAAA,GAA0B;AACzB;AACD;AACA;AACCS,EAAAA,QAAQ,EAAEC,SAAS,CAATA,SAAAA,CAAoB,CAACA,SAAS,CAAV,IAAA,EAAiBA,SAAS,CAJ/B,MAIK,CAApBA,CAJe;;AAKzB;AACD;AACA;AACCC,EAAAA,SAAS,EAAED,SAAS,CAATA,SAAAA,CAAoB,CAC9BA,SAAS,CADqB,KAAA,EAE9BA,SAAS,CAFqB,MAAA,EAG9BA,SAAS,CAXe,MAQM,CAApBA,CARc;;AAazB;AACD;AACA;AACCL,EAAAA,WAAW,EAAEK,SAAS,CAhBG,IAAA;;AAiBzB;AACD;AACA;AACCE,EAAAA,IAAI,EAAEF,SAAS,CApBU,MAAA;;AAqBzB;AACD;AACA;AACCG,EAAAA,aAAa,EAAEH,SAAS,CAxBC,IAAA;;AAyBzB;AACD;AACA;AACCI,EAAAA,QAAQ,EAAEJ,SAAS,CA5BM,MAAA;;AA6BzB;AACD;AACA;AACCK,EAAAA,KAAK,EAAEL,SAAS,CAhCS,MAAA;;AAiCzB;AACD;AACA;AACCH,EAAAA,KAAK,EAAEG,SAAS,CAACM;AApCQ,CAA1BhB;AAuCA,eAAA,aAAA","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// ### React\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n// ### classNames\nimport classNames from 'classnames';\n\n// ## Constants\nimport { DATA_TABLE_CELL } from '../../utilities/constants';\n\n/**\n * The default Cell renderer for the DataTable. Pass in any React component with the same `displayName` which takes the same props to provide custom rendering.\n */\nconst DataTableCell = (props) => {\n\tconst childText = React.isValidElement(props.children)\n\t\t? props.children.props.children\n\t\t: props.children;\n\tconst contents = (\n\t\t<div\n\t\t\tclassName={classNames({\n\t\t\t\t'slds-truncate': props.fixedLayout,\n\t\t\t})}\n\t\t\ttitle={props.title || childText}\n\t\t>\n\t\t\t{props.children}\n\t\t</div>\n\t);\n\n\tlet cell = (\n\t\t<td\n\t\t\tclassName={props.className}\n\t\t\tdata-label={props.label}\n\t\t\trole={props.fixedLayout ? 'gridcell' : null}\n\t\t\tstyle={props.width ? { width: props.width } : null}\n\t\t\theaders={props.headerId}\n\t\t>\n\t\t\t{contents}\n\t\t</td>\n\t);\n\n\tif (props.primaryColumn) {\n\t\tcell = (\n\t\t\t<th\n\t\t\t\tclassName={props.className}\n\t\t\t\tdata-label={props.label}\n\t\t\t\trole={props.fixedLayout ? 'gridcell' : null}\n\t\t\t\tstyle={props.width ? { width: props.width } : null}\n\t\t\t>\n\t\t\t\t{contents}\n\t\t\t</th>\n\t\t);\n\t}\n\n\treturn cell;\n};\n\n// ### Display Name\n// Always use the canonical component name as the React display name.\nDataTableCell.displayName = DATA_TABLE_CELL;\n\n// ### Prop Types\nDataTableCell.propTypes = {\n\t/**\n\t * The contents of the cell. This can be simple text or DOM nodes. Equivalent to `props.item[props.property]`\n\t */\n\tchildren: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n\t/**\n\t * Class names to be added to the cell.\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * Use this if you are creating an advanced table (selectable, sortable, or resizable rows)\n\t */\n\tfixedLayout: PropTypes.bool,\n\t/**\n\t * The item from the items which represents this row.\n\t */\n\titem: PropTypes.object,\n\t/**\n\t * The primary column for a row. This is almost always the first column.\n\t */\n\tprimaryColumn: PropTypes.bool,\n\t/**\n\t * The property of this item to display.\n\t */\n\tproperty: PropTypes.string,\n\t/**\n\t * Shows on hover. Useful for truncated cells.\n\t */\n\ttitle: PropTypes.string,\n\t/**\n\t * Width of column. This is required for advanced/fixed layout tables. Please provide units. (`rems` are recommended)\n\t */\n\twidth: PropTypes.string,\n};\n\nexport default DataTableCell;\n"]},"metadata":{},"sourceType":"module"}