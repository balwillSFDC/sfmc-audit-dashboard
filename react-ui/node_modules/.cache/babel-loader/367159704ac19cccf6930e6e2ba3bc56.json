{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n// # Inline Edit Component\n// Implements an inline edit component based on the [Input design pattern](https://www.lightningdesignsystem.com/components/forms/#input) in React.\n// ## Dependencies\n// ### React\n\n\nimport React from 'react';\nimport PropTypes from 'prop-types'; // ### isFunction\n\nimport isFunction from 'lodash.isfunction'; // ## Children\n\nimport Button from '../../button';\nimport Input from '../../input/index';\nimport InputIcon from '../../icon/input-icon'; // ### Event Helpers\n\nimport KEYS from '../../../utilities/key-code'; // This component's `checkProps` which issues warnings to developers about properties when in development mode (similar to React's built in development tools)\n\nimport checkProps from './inline-check-props'; // ## Constants\n\nimport { FORMS_INLINE_EDIT } from '../../../utilities/constants'; // ### Prop Types\n\nvar propTypes = {\n  /**\n   * Class names to be added to the outer container of the input.\n   */\n  className: PropTypes.oneOfType([PropTypes.array, PropTypes.object, PropTypes.string]),\n\n  /**\n   * Name of the submitted form parameter.\n   */\n  name: PropTypes.string,\n\n  /**\n   * Disables the Inline Edit component and prevents editing the contents.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Every Inline Edit component must have a unique ID in order to support keyboard navigation and ARIA support.\n   */\n  id: PropTypes.string.isRequired,\n\n  /**\n   * This event fires when the input changes.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Function will run when keyup during text edit\n   */\n  onKeyUp: PropTypes.func,\n\n  /**\n   * Function will run when we enter edit mode\n   */\n  onEnterEditMode: PropTypes.func,\n\n  /**\n   * Function will run when we leave edit mode\n   */\n  onLeaveEditMode: PropTypes.func,\n\n  /**\n   * Typically an Inline Edit component will be of the type text, but like the Input element it includes support for all HTML5 types.\n   */\n  type: PropTypes.oneOf(['text', 'password', 'datetime', 'datetime-local', 'date', 'month', 'time', 'week', 'number', 'email', 'url', 'search', 'tel', 'color']),\n\n  /**\n   * Inline Edit is a controlled component, and will always display this value.\n   */\n  value: PropTypes.string.isRequired\n};\nvar defaultProps = {\n  assistiveText: 'Edit text',\n  type: 'text'\n};\n/**\n * An inline input is rendered as a label by default. When clicked (or tabbed in), it's rendered as an input. When the focus is lost, the current input value is saved and the input is rendered as a label again.\n */\n\nvar InlineEdit = /*#__PURE__*/function (_React$Component) {\n  _inherits(InlineEdit, _React$Component);\n\n  var _super = _createSuper(InlineEdit);\n\n  function InlineEdit(props) {\n    var _this;\n\n    _classCallCheck(this, InlineEdit);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"endEditMode\", function (option) {\n      if (_this.willSave) {\n        clearTimeout(_this.willSave); // eslint-disable-next-line fp/no-delete\n\n        delete _this.willSave;\n      }\n\n      _this.setState({\n        isEditing: false,\n        value: null\n      });\n\n      if (_this.props.onLeaveEditMode && isFunction(_this.props.onLeaveEditMode)) {\n        _this.props.onLeaveEditMode(undefined, option);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleBlur\", function () {\n      if (!_this.willSave) {\n        _this.willSave = setTimeout(_this.saveEdits, 200);\n      }\n\n      if (_this.props.onLeaveEditMode && isFunction(_this.props.onLeaveEditMode)) {\n        _this.props.onLeaveEditMode();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (event) {\n      _this.setState({\n        value: event.target.value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleKeyDown\", function (event) {\n      if (event.keyCode) {\n        if (event.keyCode === KEYS.ESCAPE) {\n          _this.saveEdits({\n            cancel: true\n          });\n        } else if (event.keyCode === KEYS.ENTER) {\n          _this.saveEdits();\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleKeyUp\", function (event) {\n      if (event.keyCode) {\n        if (_this.props.onKeyUp && isFunction(_this.props.onKeyUp)) {\n          _this.props.onKeyUp(event, {\n            value: _this.state.value\n          });\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"saveEdits\", function (option) {\n      if (!(option && option.cancel === true)) {\n        if (isFunction(_this.props.onChange)) {\n          _this.props.onChange({\n            value: _this.state.value\n          });\n        }\n      }\n\n      _this.endEditMode(option);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"triggerEditMode\", function () {\n      if (!_this.props.disabled) {\n        _this.autoFocus = true;\n\n        _this.setState({\n          isEditing: true,\n          value: _this.props.value\n        });\n\n        if (isFunction(_this.props.onEnterEditMode)) {\n          _this.props.onEnterEditMode();\n        }\n      }\n    });\n\n    _this.state = {\n      isEditing: false,\n      value: null\n    };\n    checkProps(FORMS_INLINE_EDIT, props);\n    return _this;\n  }\n\n  _createClass(InlineEdit, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this.autoFocus) {\n        if (this.inputNode) {\n          this.inputNode.focus();\n          this.inputNode.select();\n        }\n\n        this.autoFocus = false;\n      }\n    }\n  }, {\n    key: \"render\",\n    // ### Render\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          assistiveText = _this$props.assistiveText,\n          disabled = _this$props.disabled,\n          value = _this$props.value,\n          name = _this$props.name,\n          rest = _objectWithoutProperties(_this$props, [\"assistiveText\", \"disabled\", \"value\", \"name\"]);\n\n      return /*#__PURE__*/React.createElement(Input, _extends({}, rest, {\n        iconRight: this.state.isEditing ? /*#__PURE__*/React.createElement(InputIcon, {\n          category: \"utility\",\n          name: \"close\",\n          position: \"right\",\n          onClick: this.endEditMode,\n          tabIndex: \"-1\"\n        }) : null,\n        disabled: disabled,\n        inlineEditTrigger: /*#__PURE__*/React.createElement(Button, {\n          assistiveText: {\n            icon: assistiveText\n          },\n          className: \"slds-m-left_x-small\",\n          disabled: disabled,\n          iconCategory: \"utility\",\n          iconName: \"edit\",\n          iconPosition: \"right\",\n          iconSize: \"small\",\n          variant: \"icon\"\n        }),\n        onBlur: this.handleBlur,\n        onChange: this.handleChange,\n        onClick: !this.state.isEditing ? this.triggerEditMode : null,\n        onKeyDown: this.handleKeyDown,\n        onKeyUp: this.handleKeyUp,\n        isStatic: !this.state.isEditing,\n        name: name,\n        value: this.state.isEditing ? this.state.value : value,\n        inputRef: function inputRef(input) {\n          _this2.inputNode = input;\n        }\n      }));\n    }\n  }]);\n\n  return InlineEdit;\n}(React.Component);\n\nInlineEdit.displayName = FORMS_INLINE_EDIT;\nInlineEdit.propTypes = propTypes;\nInlineEdit.defaultProps = defaultProps;\nexport default InlineEdit;","map":{"version":3,"sources":["../../../../.tmp-es/components/forms/input/inline.jsx"],"names":["propTypes","className","PropTypes","name","disabled","id","onChange","onKeyUp","onEnterEditMode","onLeaveEditMode","type","value","isRequired","defaultProps","assistiveText","InlineEdit","React","Component","isEditing","checkProps","clearTimeout","isFunction","setTimeout","event","KEYS","cancel","option","rest","icon"],"mappings":"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","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// # Inline Edit Component\n\n// Implements an inline edit component based on the [Input design pattern](https://www.lightningdesignsystem.com/components/forms/#input) in React.\n\n// ## Dependencies\n\n// ### React\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n// ### isFunction\nimport isFunction from 'lodash.isfunction';\n\n// ## Children\nimport Button from '../../button';\nimport Input from '../../input/index';\nimport InputIcon from '../../icon/input-icon';\n\n// ### Event Helpers\nimport KEYS from '../../../utilities/key-code';\n\n// This component's `checkProps` which issues warnings to developers about properties when in development mode (similar to React's built in development tools)\nimport checkProps from './inline-check-props';\n\n// ## Constants\nimport { FORMS_INLINE_EDIT } from '../../../utilities/constants';\n\n// ### Prop Types\nconst propTypes = {\n\t/**\n\t * Class names to be added to the outer container of the input.\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * Name of the submitted form parameter.\n\t */\n\tname: PropTypes.string,\n\t/**\n\t * Disables the Inline Edit component and prevents editing the contents.\n\t */\n\tdisabled: PropTypes.bool,\n\t/**\n\t * Every Inline Edit component must have a unique ID in order to support keyboard navigation and ARIA support.\n\t */\n\tid: PropTypes.string.isRequired,\n\t/**\n\t * This event fires when the input changes.\n\t */\n\tonChange: PropTypes.func,\n\t/**\n\t * Function will run when keyup during text edit\n\t */\n\tonKeyUp: PropTypes.func,\n\t/**\n\t * Function will run when we enter edit mode\n\t */\n\tonEnterEditMode: PropTypes.func,\n\t/**\n\t * Function will run when we leave edit mode\n\t */\n\tonLeaveEditMode: PropTypes.func,\n\t/**\n\t * Typically an Inline Edit component will be of the type text, but like the Input element it includes support for all HTML5 types.\n\t */\n\ttype: PropTypes.oneOf([\n\t\t'text',\n\t\t'password',\n\t\t'datetime',\n\t\t'datetime-local',\n\t\t'date',\n\t\t'month',\n\t\t'time',\n\t\t'week',\n\t\t'number',\n\t\t'email',\n\t\t'url',\n\t\t'search',\n\t\t'tel',\n\t\t'color',\n\t]),\n\t/**\n\t * Inline Edit is a controlled component, and will always display this value.\n\t */\n\tvalue: PropTypes.string.isRequired,\n};\n\nconst defaultProps = {\n\tassistiveText: 'Edit text',\n\ttype: 'text',\n};\n\n/**\n * An inline input is rendered as a label by default. When clicked (or tabbed in), it's rendered as an input. When the focus is lost, the current input value is saved and the input is rendered as a label again.\n */\nclass InlineEdit extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tisEditing: false,\n\t\t\tvalue: null,\n\t\t};\n\n\t\tcheckProps(FORMS_INLINE_EDIT, props);\n\t}\n\n\tcomponentDidUpdate() {\n\t\tif (this.autoFocus) {\n\t\t\tif (this.inputNode) {\n\t\t\t\tthis.inputNode.focus();\n\t\t\t\tthis.inputNode.select();\n\t\t\t}\n\t\t\tthis.autoFocus = false;\n\t\t}\n\t}\n\n\tendEditMode = (option) => {\n\t\tif (this.willSave) {\n\t\t\tclearTimeout(this.willSave);\n\t\t\t// eslint-disable-next-line fp/no-delete\n\t\t\tdelete this.willSave;\n\t\t}\n\n\t\tthis.setState({\n\t\t\tisEditing: false,\n\t\t\tvalue: null,\n\t\t});\n\n\t\tif (this.props.onLeaveEditMode && isFunction(this.props.onLeaveEditMode)) {\n\t\t\tthis.props.onLeaveEditMode(undefined, option);\n\t\t}\n\t};\n\n\thandleBlur = () => {\n\t\tif (!this.willSave) {\n\t\t\tthis.willSave = setTimeout(this.saveEdits, 200);\n\t\t}\n\t\tif (this.props.onLeaveEditMode && isFunction(this.props.onLeaveEditMode)) {\n\t\t\tthis.props.onLeaveEditMode();\n\t\t}\n\t};\n\n\thandleChange = (event) => {\n\t\tthis.setState({\n\t\t\tvalue: event.target.value,\n\t\t});\n\t};\n\n\thandleKeyDown = (event) => {\n\t\tif (event.keyCode) {\n\t\t\tif (event.keyCode === KEYS.ESCAPE) {\n\t\t\t\tthis.saveEdits({ cancel: true });\n\t\t\t} else if (event.keyCode === KEYS.ENTER) {\n\t\t\t\tthis.saveEdits();\n\t\t\t}\n\t\t}\n\t};\n\n\thandleKeyUp = (event) => {\n\t\tif (event.keyCode) {\n\t\t\tif (this.props.onKeyUp && isFunction(this.props.onKeyUp)) {\n\t\t\t\tthis.props.onKeyUp(event, {\n\t\t\t\t\tvalue: this.state.value,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n\n\tsaveEdits = (option) => {\n\t\tif (!(option && option.cancel === true)) {\n\t\t\tif (isFunction(this.props.onChange)) {\n\t\t\t\tthis.props.onChange({\n\t\t\t\t\tvalue: this.state.value,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tthis.endEditMode(option);\n\t};\n\n\ttriggerEditMode = () => {\n\t\tif (!this.props.disabled) {\n\t\t\tthis.autoFocus = true;\n\t\t\tthis.setState({\n\t\t\t\tisEditing: true,\n\t\t\t\tvalue: this.props.value,\n\t\t\t});\n\t\t\tif (isFunction(this.props.onEnterEditMode)) {\n\t\t\t\tthis.props.onEnterEditMode();\n\t\t\t}\n\t\t}\n\t};\n\n\t// ### Render\n\trender() {\n\t\tconst {\n\t\t\tassistiveText,\n\t\t\tdisabled,\n\t\t\tvalue,\n\t\t\tname,\n\n\t\t\t// ### Additional properties\n\t\t\t// Using [object destructuring](https://facebook.github.io/react/docs/transferring-props.html#transferring-with-...-in-jsx) to pass on any properties which are not explicitly defined.\n\t\t\t...rest\n\t\t} = this.props;\n\n\t\treturn (\n\t\t\t<Input\n\t\t\t\t{...rest}\n\t\t\t\ticonRight={\n\t\t\t\t\tthis.state.isEditing ? (\n\t\t\t\t\t\t<InputIcon\n\t\t\t\t\t\t\tcategory=\"utility\"\n\t\t\t\t\t\t\tname=\"close\"\n\t\t\t\t\t\t\tposition=\"right\"\n\t\t\t\t\t\t\tonClick={this.endEditMode}\n\t\t\t\t\t\t\ttabIndex=\"-1\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t) : null\n\t\t\t\t}\n\t\t\t\tdisabled={disabled}\n\t\t\t\tinlineEditTrigger={\n\t\t\t\t\t<Button\n\t\t\t\t\t\tassistiveText={{ icon: assistiveText }}\n\t\t\t\t\t\tclassName=\"slds-m-left_x-small\"\n\t\t\t\t\t\tdisabled={disabled}\n\t\t\t\t\t\ticonCategory=\"utility\"\n\t\t\t\t\t\ticonName=\"edit\"\n\t\t\t\t\t\ticonPosition=\"right\"\n\t\t\t\t\t\ticonSize=\"small\"\n\t\t\t\t\t\tvariant=\"icon\"\n\t\t\t\t\t/>\n\t\t\t\t}\n\t\t\t\tonBlur={this.handleBlur}\n\t\t\t\tonChange={this.handleChange}\n\t\t\t\tonClick={!this.state.isEditing ? this.triggerEditMode : null}\n\t\t\t\tonKeyDown={this.handleKeyDown}\n\t\t\t\tonKeyUp={this.handleKeyUp}\n\t\t\t\tisStatic={!this.state.isEditing}\n\t\t\t\tname={name}\n\t\t\t\tvalue={this.state.isEditing ? this.state.value : value}\n\t\t\t\tinputRef={(input) => {\n\t\t\t\t\tthis.inputNode = input;\n\t\t\t\t}}\n\t\t\t/>\n\t\t);\n\t}\n}\n\nInlineEdit.displayName = FORMS_INLINE_EDIT;\nInlineEdit.propTypes = propTypes;\nInlineEdit.defaultProps = defaultProps;\n\nexport default InlineEdit;\n"]},"metadata":{},"sourceType":"module"}