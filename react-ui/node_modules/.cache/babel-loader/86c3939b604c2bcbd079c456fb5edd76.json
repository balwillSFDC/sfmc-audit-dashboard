{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n/* eslint-disable react/no-unused-prop-types */\n\n/* deepscan-disable REACT_USELESS_PROP_TYPES */\n// ### React\n\n\nimport React from 'react';\nimport PropTypes from 'prop-types'; // ## Constants\n\nimport { DATA_TABLE_COLUMN } from '../../utilities/constants'; // extends is used below so that react-docgen can detect the component\n\n/**\n * Columns define the structure of the data displayed in the DataTable.\n */\n\nvar DataTableColumn = /*#__PURE__*/function (_React$Component) {\n  _inherits(DataTableColumn, _React$Component);\n\n  var _super = _createSuper(DataTableColumn);\n\n  function DataTableColumn() {\n    _classCallCheck(this, DataTableColumn);\n\n    return _super.apply(this, arguments);\n  }\n\n  return DataTableColumn;\n}(React.Component); // ### Display Name\n// Always use the canonical component name as the React display name.\n\n\nDataTableColumn.displayName = DATA_TABLE_COLUMN; // ### Prop Types\n\nDataTableColumn.propTypes = {\n  /**\n   * Use a _higher-order component_ to customize a data table cell that will override the default cell rendering. `CustomDataTableCell` must have the same `displayName` as `DataTableCell` or it will be ignored. If you want complete control of the HTML, including the wrapping `td`, you don't have to use `DataTableCell`.\n   * ```\n   * import DataTableCell from 'design-system-react/data-table/cell';\n   * const CustomDataTableCell = ({ children, ...props }) => (\n   *   <DataTableCell {...props} >\n   *     <a href=\"#\">{children}</a>\n   *   </DataTableCell>\n   * );\n   * CustomDataTableCell.displayName = DataTableCell.displayName;\n   *\n   * <DataTable>\n   *   <DataTableColumn />\n   *   <DataTableColumn>\n   *     <DataTableCustomCell />\n   *   </DataTableColumn>\n   *   <DataTableRowActions />\n   * </DataTable>\n   * ```\n   */\n  children: PropTypes.element,\n\n  /**\n   * Some columns, such as \"date last viewed\" or \"date recently updated,\" should sort descending first, since that is what the user probably wants. How often does one want to see their oldest files first in a table? If sortable and the `DataTable`'s parent has not defined the sort order, then ascending (A at the top to Z at the bottom) is the default sort order on first click.\n   */\n  isDefaultSortDescending: PropTypes.bool,\n\n  /**\n   * Selects this column as the currently sorted column.\n   */\n  isSorted: PropTypes.bool,\n\n  /**\n   * The column label. If a `string` is not passed in, no `title` attribute will be rendered.\n   */\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n\n  /**\n   * The primary column for a row. This is almost always the first column.\n   */\n  primaryColumn: PropTypes.bool,\n\n  /**\n   * The property which corresponds to this column.\n   */\n  property: PropTypes.string,\n\n  /**\n   * Whether or not the column is sortable.\n   */\n  sortable: PropTypes.bool,\n\n  /**\n   * The current sort direction. If left out the component will track this internally. Required if `isSorted` is true.\n   */\n  sortDirection: PropTypes.oneOf(['desc', 'asc']),\n\n  /**\n   * Title used for truncation div within the cell.\n   */\n  title: PropTypes.string,\n\n  /**\n   * Adds truncate to cell node.\n   */\n  truncate: PropTypes.bool,\n\n  /**\n   * Width of column. This is required for advanced/fixed layout tables. Please provide units. (`rems` are recommended)\n   */\n  width: PropTypes.string\n};\nexport default DataTableColumn;","map":{"version":3,"sources":["../../../.tmp-es/components/data-table/column.jsx"],"names":["DataTableColumn","React","Component","children","PropTypes","isDefaultSortDescending","isSorted","label","primaryColumn","property","sortable","sortDirection","title","truncate","width","string"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAEA;;AACA;AAEA;;;AACA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA,C,CAEA;;AACA,SAAA,iBAAA,QAAA,2BAAA,C,CAEA;;AAEA;AACA;AACA;;IACMA,e;;;;;;;;;;;;EAAwBC,KAAK,CAACC,S,GAEpC;AACA;;;AACAF,eAAe,CAAfA,WAAAA,GAAAA,iBAAAA,C,CAEA;;AACAA,eAAe,CAAfA,SAAAA,GAA4B;AAC3B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACCG,EAAAA,QAAQ,EAAEC,SAAS,CArBQ,OAAA;;AAsB3B;AACD;AACA;AACCC,EAAAA,uBAAuB,EAAED,SAAS,CAzBP,IAAA;;AA0B3B;AACD;AACA;AACCE,EAAAA,QAAQ,EAAEF,SAAS,CA7BQ,IAAA;;AA8B3B;AACD;AACA;AACCG,EAAAA,KAAK,EAAEH,SAAS,CAATA,SAAAA,CAAoB,CAACA,SAAS,CAAV,MAAA,EAAmBA,SAAS,CAjC5B,IAiCA,CAApBA,CAjCoB;;AAkC3B;AACD;AACA;AACCI,EAAAA,aAAa,EAAEJ,SAAS,CArCG,IAAA;;AAsC3B;AACD;AACA;AACCK,EAAAA,QAAQ,EAAEL,SAAS,CAzCQ,MAAA;;AA0C3B;AACD;AACA;AACCM,EAAAA,QAAQ,EAAEN,SAAS,CA7CQ,IAAA;;AA8C3B;AACD;AACA;AACCO,EAAAA,aAAa,EAAEP,SAAS,CAATA,KAAAA,CAAgB,CAAA,MAAA,EAjDJ,KAiDI,CAAhBA,CAjDY;;AAkD3B;AACD;AACA;AACCQ,EAAAA,KAAK,EAAER,SAAS,CArDW,MAAA;;AAsD3B;AACD;AACA;AACCS,EAAAA,QAAQ,EAAET,SAAS,CAzDQ,IAAA;;AA0D3B;AACD;AACA;AACCU,EAAAA,KAAK,EAAEV,SAAS,CAACW;AA7DU,CAA5Bf;AAgEA,eAAA,eAAA","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n/* eslint-disable react/no-unused-prop-types */\n/* deepscan-disable REACT_USELESS_PROP_TYPES */\n\n// ### React\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n// ## Constants\nimport { DATA_TABLE_COLUMN } from '../../utilities/constants';\n\n// extends is used below so that react-docgen can detect the component\n\n/**\n * Columns define the structure of the data displayed in the DataTable.\n */\nclass DataTableColumn extends React.Component {}\n\n// ### Display Name\n// Always use the canonical component name as the React display name.\nDataTableColumn.displayName = DATA_TABLE_COLUMN;\n\n// ### Prop Types\nDataTableColumn.propTypes = {\n\t/**\n\t * Use a _higher-order component_ to customize a data table cell that will override the default cell rendering. `CustomDataTableCell` must have the same `displayName` as `DataTableCell` or it will be ignored. If you want complete control of the HTML, including the wrapping `td`, you don't have to use `DataTableCell`.\n\t * ```\n\t * import DataTableCell from 'design-system-react/data-table/cell';\n\t * const CustomDataTableCell = ({ children, ...props }) => (\n\t *   <DataTableCell {...props} >\n\t *     <a href=\"#\">{children}</a>\n\t *   </DataTableCell>\n\t * );\n\t * CustomDataTableCell.displayName = DataTableCell.displayName;\n\t *\n\t * <DataTable>\n\t *   <DataTableColumn />\n\t *   <DataTableColumn>\n\t *     <DataTableCustomCell />\n\t *   </DataTableColumn>\n\t *   <DataTableRowActions />\n\t * </DataTable>\n\t * ```\n\t */\n\tchildren: PropTypes.element,\n\t/**\n\t * Some columns, such as \"date last viewed\" or \"date recently updated,\" should sort descending first, since that is what the user probably wants. How often does one want to see their oldest files first in a table? If sortable and the `DataTable`'s parent has not defined the sort order, then ascending (A at the top to Z at the bottom) is the default sort order on first click.\n\t */\n\tisDefaultSortDescending: PropTypes.bool,\n\t/**\n\t * Selects this column as the currently sorted column.\n\t */\n\tisSorted: PropTypes.bool,\n\t/**\n\t * The column label. If a `string` is not passed in, no `title` attribute will be rendered.\n\t */\n\tlabel: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n\t/**\n\t * The primary column for a row. This is almost always the first column.\n\t */\n\tprimaryColumn: PropTypes.bool,\n\t/**\n\t * The property which corresponds to this column.\n\t */\n\tproperty: PropTypes.string,\n\t/**\n\t * Whether or not the column is sortable.\n\t */\n\tsortable: PropTypes.bool,\n\t/**\n\t * The current sort direction. If left out the component will track this internally. Required if `isSorted` is true.\n\t */\n\tsortDirection: PropTypes.oneOf(['desc', 'asc']),\n\t/**\n\t * Title used for truncation div within the cell.\n\t */\n\ttitle: PropTypes.string,\n\t/**\n\t * Adds truncate to cell node.\n\t */\n\ttruncate: PropTypes.bool,\n\t/**\n\t * Width of column. This is required for advanced/fixed layout tables. Please provide units. (`rems` are recommended)\n\t */\n\twidth: PropTypes.string,\n};\n\nexport default DataTableColumn;\n"]},"metadata":{},"sourceType":"module"}