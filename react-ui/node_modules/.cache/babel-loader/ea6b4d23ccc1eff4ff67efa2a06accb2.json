{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n/* eslint-disable react/prefer-es6-class, jsx-a11y/no-noninteractive-element-interactions */\n// Implements the [Modal design pattern](https://lightningdesignsystem.com/components/modals/) in React.\n// Based on SLDS v2.2.1\n\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport classNames from 'classnames';\nimport ReactModal from 'react-modal'; // ### shortid\n// [npmjs.com/package/shortid](https://www.npmjs.com/package/shortid)\n// shortid is a short, non-sequential, url-friendly, unique id generator\n\nimport shortid from 'shortid'; // This component's `checkProps` which issues warnings to developers about properties when in development mode (similar to React's built in development tools)\n\nimport checkProps from './check-props';\nimport checkAppElementIsSet from '../../utilities/warning/check-app-element-set';\nimport Button from '../button';\nimport { MODAL } from '../../utilities/constants';\nimport componentDoc from './component.json';\nvar documentDefined = typeof document !== 'undefined';\nvar windowDefined = typeof window !== 'undefined';\nvar propTypes = {\n  /**\n   * Vertical alignment of Modal.\n   */\n  align: PropTypes.oneOf(['top', 'center']),\n\n  /**\n   * Boolean indicating if the appElement should be hidden.\n   */\n  ariaHideApp: PropTypes.bool,\n\n  /**\n   * **Assistive text for accessibility.**\n   * This object is merged with the default props object on every render.\n   * * `dialogLabel`: This is a visually hidden label for the dialog. If not provided, `heading` is used.\n   * * `dialogLabelledBy`: This describes which node labels the dialog. If not provided and dialogLabel is unavailable, `id` is used.\n   * * `closeButton`: This is a visually hidden label for the close button.\n   */\n  assistiveText: PropTypes.shape({\n    dialogLabel: PropTypes.string,\n    dialogLabelledBy: PropTypes.string,\n    closeButton: PropTypes.string\n  }),\n\n  /**\n   * Modal content.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * Custom CSS classes for the modal `section` node classed `.slds-modal` and the parent of `.slds-modal__container`. Uses `classNames` [API](https://github.com/JedWatson/classnames).\n   */\n  className: PropTypes.oneOfType([PropTypes.array, PropTypes.object, PropTypes.string]),\n\n  /**\n   * Custom CSS classes for the modal's container. This is the child element of `.slds-modal` with class `.slds-modal__container`. Uses `classNames` [API](https://github.com/JedWatson/classnames).\n   */\n  containerClassName: PropTypes.oneOfType([PropTypes.array, PropTypes.object, PropTypes.string]),\n\n  /**\n   * Custom CSS classes for the modal's body. This is the element that has overflow rules and should be used to set a static height if desired. Use `classNames` [API](https://github.com/JedWatson/classnames).\n   */\n  contentClassName: PropTypes.oneOfType([PropTypes.array, PropTypes.object, PropTypes.string]),\n\n  /**\n   * Custom styles for the modal's body. This is the element that has overflow rules and should be used to set a static height if desired.\n   */\n  contentStyle: PropTypes.object,\n\n  /**\n   * If true, modal footer buttons render left and right. An example use case would be for \"back\" and \"next\" buttons.\n   */\n  directional: PropTypes.bool,\n\n  /**\n   * If true, Modals cannot be dismissed by clicking on the close icon or pressing esc key.\n   */\n  disableClose: PropTypes.bool,\n\n  /**\n   * If true, Modals can be dismissed by clicking outside of modal. If unspecified, defaults to disableClose.\n   */\n  dismissOnClickOutside: PropTypes.bool,\n\n  /**\n   * Callback to fire with Modal is dismissed\n   */\n  onRequestClose: PropTypes.func,\n\n  /**\n   * Accepts a node or array of nodes that are typically a `Button` or `ProgressIndicator`. If an array, the nodes render on the right side first but are then floated left and right if <code>directional</code> prop is `true`.\n   */\n  footer: PropTypes.oneOfType([PropTypes.array, PropTypes.node]),\n\n  /**\n   * Allows for a custom modal header that does not scroll with modal content. If this is defined, `heading` and `tagline` will be ignored. The close button will still be present.\n   */\n  header: PropTypes.node,\n\n  /**\n   * Adds CSS classes to the container surrounding the modal header and the close button. Use `classNames` [API](https://github.com/JedWatson/classnames).\n   */\n  headerClassName: PropTypes.oneOfType([PropTypes.array, PropTypes.object, PropTypes.string]),\n\n  /**\n   * Unique identifier for the modal. The id is automatically generated if not provided\n   */\n  id: PropTypes.string,\n\n  /**\n   * Forces the modal to be open or closed.\n   */\n  isOpen: PropTypes.bool.isRequired,\n\n  /**\n   * Function whose return value is the mount node to insert the Modal element into. The default is `() => document.body`.\n   */\n  parentSelector: PropTypes.func,\n\n  /**\n   * Custom CSS classes for the portal DOM node. This node is a direct descendant of the `body` and is the parent of `ReactModal__Overlay`. Use `classNames` [API](https://github.com/JedWatson/classnames).\n   */\n  portalClassName: PropTypes.oneOfType([PropTypes.array, PropTypes.object, PropTypes.string]),\n\n  /**\n   * Styles the modal as a prompt.\n   */\n  prompt: PropTypes.oneOf(['success', 'warning', 'error', 'wrench', 'offline', 'info']),\n\n  /**\n   * Specifies the modal's width. May be deprecated in favor of `width` in the future.\n   */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n\n  /**\n   * Content underneath the heading in the modal header.\n   */\n  tagline: PropTypes.node,\n\n  /**\n   * Content underneath the title in the modal header.\n   */\n  title: PropTypes.node,\n\n  /**\n   * Text heading at the top of a modal.\n   */\n  heading: PropTypes.node,\n\n  /**\n   * Allows adding additional notifications within the modal.\n   */\n  toast: PropTypes.node\n};\nvar defaultProps = {\n  assistiveText: {\n    dialogLabelledBy: '',\n    closeButton: 'Close'\n  },\n  align: 'center',\n  ariaHideApp: true\n};\n/**\n * The Modal component is used for the Lightning Design System Modal and Notification > Prompt components. The Modal opens from a state change outside of the component itself (pass this state to the <code>isOpen</code> prop). For more details on the Prompt markup, please review the <a href=\"http://www.lightningdesignsystem.com/components/notifications#prompt\">Notifications > Prompt</a>.\n *\n * By default, `Modal` will add `aria-hidden=true` to the `body` tag, but this disables some assistive technologies. To prevent this you can add the following to your application with `#mount` being the root node of your application that you would like to hide from assistive technologies when the `Modal` is open.\n * ```\n * import settings from 'design-system-react/components/settings';\n * settings.setAppElement('#mount');\n * ```\n * This component uses a portalMount (a disconnected React subtree mount) to create a modal as a child of `body`.\n */\n\nvar Modal = /*#__PURE__*/function (_React$Component) {\n  _inherits(Modal, _React$Component);\n\n  var _super = _createSuper(Modal);\n\n  function Modal(props) {\n    var _this;\n\n    _classCallCheck(this, Modal);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      isClosing: false\n    }; // Bind\n\n    _this.handleModalClick = _this.handleModalClick.bind(_assertThisInitialized(_this));\n    _this.closeModal = _this.closeModal.bind(_assertThisInitialized(_this));\n    _this.dismissModalOnClickOutside = _this.dismissModalOnClickOutside.bind(_assertThisInitialized(_this));\n    _this.generatedId = shortid.generate();\n    checkProps(MODAL, props, componentDoc);\n\n    if (props.ariaHideApp) {\n      checkAppElementIsSet();\n    }\n\n    return _this;\n  }\n\n  _createClass(Modal, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setReturnFocus();\n      this.updateBodyScroll();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (this.props.isOpen !== prevProps.isOpen) {\n        this.updateBodyScroll();\n      }\n\n      if (this.state.isClosing !== prevState.isClosing) {\n        if (this.state.isClosing) {\n          // This section of code should be removed once trigger.jsx\n          // and manager.jsx are removed. They appear to have\n          // been created in order to do modals in portals.\n          if (!this.isUnmounting) {\n            var el = ReactDOM.findDOMNode(this); // eslint-disable-line react/no-find-dom-node\n\n            if (el && el.parentNode && el.parentNode.getAttribute('data-slds-modal')) {\n              ReactDOM.unmountComponentAtNode(el);\n              document.body.removeChild(el);\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.isUnmounting = true;\n      this.clearBodyScroll();\n    }\n  }, {\n    key: \"getId\",\n    value: function getId() {\n      return this.props.id || this.generatedId;\n    }\n  }, {\n    key: \"getBorderRadius\",\n    value: function getBorderRadius() {\n      var borderRadiusValue = '.25rem';\n      var borderTopRadius = this.props.title || this.props.heading || this.props.header ? {} : {\n        borderTopLeftRadius: borderRadiusValue,\n        borderTopRightRadius: borderRadiusValue\n      };\n      var borderBottomRadius = this.props.footer ? {} : {\n        borderBottomLeftRadius: borderRadiusValue,\n        borderBottomRightRadius: borderRadiusValue\n      };\n      return _objectSpread(_objectSpread({}, borderTopRadius), borderBottomRadius);\n    }\n  }, {\n    key: \"getAriaAttributes\",\n    value: function getAriaAttributes() {\n      var ariaAttributes = {\n        describedby: \"\".concat(this.getId(), \"-modal-content\"),\n        modal: 'true'\n      };\n\n      if (this.props.assistiveText.dialogLabel) {\n        ariaAttributes.label = this.props.assistiveText.dialogLabel;\n        return ariaAttributes;\n      }\n\n      var dialogLabelledBy = null;\n\n      if (this.props.assistiveText.dialogLabelledBy) {\n        // eslint-disable-next-line prefer-destructuring\n        dialogLabelledBy = this.props.assistiveText.dialogLabelledBy;\n      } else if (this.props.heading || this.props.title) {\n        dialogLabelledBy = \"\".concat(this.getId(), \"-heading\");\n      }\n\n      ariaAttributes.labelledby = dialogLabelledBy;\n      return ariaAttributes;\n    }\n  }, {\n    key: \"getModal\",\n    value: function getModal() {\n      var modalStyle = this.props.align === 'top' ? {\n        justifyContent: 'flex-start'\n      } : null;\n      var borderRadius = this.getBorderRadius();\n      var contentStyleFromProps = this.props.contentStyle || {};\n\n      var contentStyle = _objectSpread(_objectSpread({}, borderRadius), contentStyleFromProps);\n\n      return (\n        /*#__PURE__*/\n        // temporarily disabling eslint for the onClicks on the div tags\n\n        /* eslint-disable */\n        React.createElement(\"section\", {\n          className: classNames('slds-modal', 'slds-fade-in-open', this.props.size ? \"slds-modal_\".concat(this.props.size) : null, {\n            'slds-modal_prompt': this.isPrompt()\n          }, this.props.className),\n          onClick: this.dismissModalOnClickOutside\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: classNames('slds-modal__container', this.props.containerClassName),\n          style: modalStyle\n        }, this.headerComponent(), /*#__PURE__*/React.createElement(\"div\", {\n          className: classNames('slds-modal__content', this.props.contentClassName),\n          id: \"\".concat(this.getId(), \"-modal-content\"),\n          style: contentStyle,\n          onClick: this.handleModalClick\n        }, this.props.children), this.footerComponent()))\n        /* eslint-enable */\n\n      );\n    }\n  }, {\n    key: \"setReturnFocus\",\n    value: function setReturnFocus() {\n      this.setState({\n        returnFocusTo: documentDefined ? document.activeElement : null\n      });\n    } // eslint-disable-next-line class-methods-use-this\n\n  }, {\n    key: \"clearBodyScroll\",\n    value: function clearBodyScroll() {\n      if (windowDefined && documentDefined && document.body) {\n        document.body.style.overflow = 'inherit';\n      }\n    }\n  }, {\n    key: \"closeModal\",\n    value: function closeModal() {\n      if (!this.props.disableClose) {\n        this.dismissModal();\n      }\n    }\n  }, {\n    key: \"dismissModal\",\n    value: function dismissModal() {\n      this.setState({\n        isClosing: true\n      });\n\n      if (this.state.returnFocusTo && this.state.returnFocusTo.focus) {\n        this.state.returnFocusTo.focus();\n      }\n\n      if (this.props.onRequestClose) {\n        this.props.onRequestClose();\n      }\n    }\n  }, {\n    key: \"dismissModalOnClickOutside\",\n    value: function dismissModalOnClickOutside() {\n      // if dismissOnClickOutside is not set, default its value to disableClose\n      var dismissOnClickOutside = this.props.dismissOnClickOutside !== undefined ? this.props.dismissOnClickOutside : !this.props.disableClose;\n\n      if (dismissOnClickOutside) {\n        this.dismissModal();\n      }\n    }\n  }, {\n    key: \"footerComponent\",\n    value: function footerComponent() {\n      var footer = null;\n      var hasFooter = this.props.footer;\n      var footerClass = {\n        'slds-modal__footer': true,\n        'slds-modal__footer_directional': this.props.directional,\n        'slds-theme_default': this.isPrompt()\n      };\n\n      if (hasFooter) {\n        footer =\n        /*#__PURE__*/\n        // eslint-disable-next-line jsx-a11y/no-static-element-interactions, jsx-a11y/no-noninteractive-element-interactions\n        React.createElement(\"footer\", {\n          className: classNames(footerClass, this.props.footerClassNames),\n          onClick: this.handleModalClick\n        }, this.props.footer);\n      }\n\n      return footer;\n    } // eslint-disable-next-line class-methods-use-this\n\n  }, {\n    key: \"handleModalClick\",\n    value: function handleModalClick(event) {\n      if (event && event.stopPropagation) {\n        event.stopPropagation();\n      }\n    }\n  }, {\n    key: \"handleSubmitModal\",\n    value: function handleSubmitModal() {\n      this.closeModal();\n    }\n  }, {\n    key: \"headerComponent\",\n    value: function headerComponent() {\n      var _classNames;\n\n      var headerContent = this.props.header;\n      var headerEmpty = !headerContent && !(this.props.heading || this.props.title) && !this.props.tagline;\n\n      var assistiveText = _objectSpread(_objectSpread({}, defaultProps.assistiveText), this.props.assistiveText);\n\n      var closeButtonAssistiveText = this.props.closeButtonAssistiveText || assistiveText.closeButton;\n      var closeButton = /*#__PURE__*/React.createElement(Button, {\n        assistiveText: {\n          icon: closeButtonAssistiveText\n        },\n        iconCategory: \"utility\",\n        iconName: \"close\",\n        iconSize: \"large\",\n        inverse: true,\n        className: \"slds-button_icon slds-modal__close\",\n        onClick: this.closeModal,\n        title: closeButtonAssistiveText,\n        variant: \"icon\"\n      });\n\n      if (!headerContent && (this.props.heading || this.props.title) || this.props.tagline) {\n        headerContent = /*#__PURE__*/React.createElement(\"div\", null, this.props.toast, /*#__PURE__*/React.createElement(\"h2\", {\n          className: classNames({\n            'slds-text-heading_small': this.isPrompt(),\n            'slds-text-heading_medium': !this.isPrompt()\n          }),\n          id: \"\".concat(this.getId(), \"-heading\")\n        }, this.props.heading ? this.props.heading : this.props.title), this.props.tagline ? /*#__PURE__*/React.createElement(\"p\", {\n          className: \"slds-m-top_x-small\"\n        }, this.props.tagline) : null);\n      }\n\n      return (\n        /*#__PURE__*/\n        // eslint-disable-next-line jsx-a11y/no-static-element-interactions\n        React.createElement(\"header\", {\n          className: classNames('slds-modal__header', (_classNames = {\n            'slds-modal__header_empty': headerEmpty\n          }, _defineProperty(_classNames, \"slds-theme_\".concat(this.props.prompt), this.isPrompt()), _defineProperty(_classNames, 'slds-theme_alert-texture', this.isPrompt()), _classNames), this.props.headerClassName),\n          onClick: this.handleModalClick\n        }, this.props.disableClose ? null : closeButton, headerContent)\n      );\n    }\n  }, {\n    key: \"isPrompt\",\n    value: function isPrompt() {\n      return this.props.prompt !== undefined;\n    }\n  }, {\n    key: \"updateBodyScroll\",\n    value: function updateBodyScroll() {\n      if (windowDefined && documentDefined && document.body) {\n        if (this.props.isOpen) {\n          document.body.style.overflow = 'hidden';\n        } else {\n          document.body.style.overflow = 'inherit';\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var ariaAttributes = this.getAriaAttributes();\n      var customStyles = {\n        content: {\n          position: 'default',\n          top: 'default',\n          left: 'default',\n          right: 'default',\n          bottom: 'default',\n          border: 'default',\n          background: 'default',\n          overflow: 'default',\n          WebkitOverflowScrolling: 'default',\n          borderRadius: 'default',\n          outline: 'default',\n          padding: 'default'\n        },\n        overlay: {\n          zIndex: 8000,\n          // following SLDS guideline for z-index overlay\n          backgroundColor: 'default'\n        }\n      };\n      return /*#__PURE__*/React.createElement(ReactModal, {\n        aria: ariaAttributes,\n        ariaHideApp: this.props.ariaHideApp,\n        isOpen: this.props.isOpen,\n        onRequestClose: this.closeModal,\n        role: this.props.disableClose ? 'alertdialog' : 'dialog',\n        style: customStyles,\n        parentSelector: this.props.parentSelector,\n        portalClassName: classNames('ReactModalPortal', this.props.portalClassName)\n      }, this.getModal(), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"slds-backdrop slds-backdrop_open\"\n      }));\n    }\n  }]);\n\n  return Modal;\n}(React.Component);\n\nModal.displayName = MODAL;\nModal.propTypes = propTypes;\nModal.defaultProps = defaultProps;\nexport default Modal;","map":{"version":3,"sources":["../../../.tmp-es/components/modal/index.jsx"],"names":["documentDefined","windowDefined","propTypes","align","PropTypes","ariaHideApp","assistiveText","dialogLabel","dialogLabelledBy","closeButton","string","children","className","containerClassName","contentClassName","contentStyle","directional","disableClose","dismissOnClickOutside","onRequestClose","footer","header","headerClassName","id","isOpen","parentSelector","portalClassName","prompt","size","tagline","title","heading","toast","node","defaultProps","Modal","React","Component","isClosing","shortid","checkProps","props","checkAppElementIsSet","prevProps","prevState","el","ReactDOM","document","borderRadiusValue","borderTopRadius","borderTopLeftRadius","borderTopRightRadius","borderBottomRadius","borderBottomLeftRadius","borderBottomRightRadius","ariaAttributes","describedby","modal","modalStyle","justifyContent","borderRadius","contentStyleFromProps","classNames","dismissModalOnClickOutside","handleModalClick","returnFocusTo","hasFooter","footerClass","event","headerContent","headerEmpty","closeButtonAssistiveText","icon","customStyles","content","position","top","left","right","bottom","border","background","overflow","WebkitOverflowScrolling","outline","padding","overlay","zIndex","backgroundColor"],"mappings":"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","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n/* eslint-disable react/prefer-es6-class, jsx-a11y/no-noninteractive-element-interactions */\n\n// Implements the [Modal design pattern](https://lightningdesignsystem.com/components/modals/) in React.\n// Based on SLDS v2.2.1\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\n\nimport classNames from 'classnames';\nimport ReactModal from 'react-modal';\n\n// ### shortid\n// [npmjs.com/package/shortid](https://www.npmjs.com/package/shortid)\n// shortid is a short, non-sequential, url-friendly, unique id generator\nimport shortid from 'shortid';\n\n// This component's `checkProps` which issues warnings to developers about properties when in development mode (similar to React's built in development tools)\nimport checkProps from './check-props';\n\nimport checkAppElementIsSet from '../../utilities/warning/check-app-element-set';\n\nimport Button from '../button';\n\nimport { MODAL } from '../../utilities/constants';\nimport componentDoc from './component.json';\n\nconst documentDefined = typeof document !== 'undefined';\nconst windowDefined = typeof window !== 'undefined';\n\nconst propTypes = {\n\t/**\n\t * Vertical alignment of Modal.\n\t */\n\talign: PropTypes.oneOf(['top', 'center']),\n\t/**\n\t * Boolean indicating if the appElement should be hidden.\n\t */\n\tariaHideApp: PropTypes.bool,\n\t/**\n\t * **Assistive text for accessibility.**\n\t * This object is merged with the default props object on every render.\n\t * * `dialogLabel`: This is a visually hidden label for the dialog. If not provided, `heading` is used.\n\t * * `dialogLabelledBy`: This describes which node labels the dialog. If not provided and dialogLabel is unavailable, `id` is used.\n\t * * `closeButton`: This is a visually hidden label for the close button.\n\t */\n\tassistiveText: PropTypes.shape({\n\t\tdialogLabel: PropTypes.string,\n\t\tdialogLabelledBy: PropTypes.string,\n\t\tcloseButton: PropTypes.string,\n\t}),\n\t/**\n\t * Modal content.\n\t */\n\tchildren: PropTypes.node.isRequired,\n\t/**\n\t * Custom CSS classes for the modal `section` node classed `.slds-modal` and the parent of `.slds-modal__container`. Uses `classNames` [API](https://github.com/JedWatson/classnames).\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * Custom CSS classes for the modal's container. This is the child element of `.slds-modal` with class `.slds-modal__container`. Uses `classNames` [API](https://github.com/JedWatson/classnames).\n\t */\n\tcontainerClassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * Custom CSS classes for the modal's body. This is the element that has overflow rules and should be used to set a static height if desired. Use `classNames` [API](https://github.com/JedWatson/classnames).\n\t */\n\tcontentClassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * Custom styles for the modal's body. This is the element that has overflow rules and should be used to set a static height if desired.\n\t */\n\tcontentStyle: PropTypes.object,\n\t/**\n\t * If true, modal footer buttons render left and right. An example use case would be for \"back\" and \"next\" buttons.\n\t */\n\tdirectional: PropTypes.bool,\n\t/**\n\t * If true, Modals cannot be dismissed by clicking on the close icon or pressing esc key.\n\t */\n\tdisableClose: PropTypes.bool,\n\t/**\n\t * If true, Modals can be dismissed by clicking outside of modal. If unspecified, defaults to disableClose.\n\t */\n\tdismissOnClickOutside: PropTypes.bool,\n\t/**\n\t * Callback to fire with Modal is dismissed\n\t */\n\tonRequestClose: PropTypes.func,\n\t/**\n\t * Accepts a node or array of nodes that are typically a `Button` or `ProgressIndicator`. If an array, the nodes render on the right side first but are then floated left and right if <code>directional</code> prop is `true`.\n\t */\n\tfooter: PropTypes.oneOfType([PropTypes.array, PropTypes.node]),\n\t/**\n\t * Allows for a custom modal header that does not scroll with modal content. If this is defined, `heading` and `tagline` will be ignored. The close button will still be present.\n\t */\n\theader: PropTypes.node,\n\t/**\n\t * Adds CSS classes to the container surrounding the modal header and the close button. Use `classNames` [API](https://github.com/JedWatson/classnames).\n\t */\n\theaderClassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * Unique identifier for the modal. The id is automatically generated if not provided\n\t */\n\tid: PropTypes.string,\n\t/**\n\t * Forces the modal to be open or closed.\n\t */\n\tisOpen: PropTypes.bool.isRequired,\n\t/**\n\t * Function whose return value is the mount node to insert the Modal element into. The default is `() => document.body`.\n\t */\n\tparentSelector: PropTypes.func,\n\t/**\n\t * Custom CSS classes for the portal DOM node. This node is a direct descendant of the `body` and is the parent of `ReactModal__Overlay`. Use `classNames` [API](https://github.com/JedWatson/classnames).\n\t */\n\tportalClassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * Styles the modal as a prompt.\n\t */\n\tprompt: PropTypes.oneOf([\n\t\t'success',\n\t\t'warning',\n\t\t'error',\n\t\t'wrench',\n\t\t'offline',\n\t\t'info',\n\t]),\n\t/**\n\t * Specifies the modal's width. May be deprecated in favor of `width` in the future.\n\t */\n\tsize: PropTypes.oneOf(['small', 'medium', 'large']),\n\t/**\n\t * Content underneath the heading in the modal header.\n\t */\n\ttagline: PropTypes.node,\n\t/**\n\t * Content underneath the title in the modal header.\n\t */\n\ttitle: PropTypes.node,\n\t/**\n\t * Text heading at the top of a modal.\n\t */\n\theading: PropTypes.node,\n\t/**\n\t * Allows adding additional notifications within the modal.\n\t */\n\ttoast: PropTypes.node,\n};\n\nconst defaultProps = {\n\tassistiveText: {\n\t\tdialogLabelledBy: '',\n\t\tcloseButton: 'Close',\n\t},\n\talign: 'center',\n\tariaHideApp: true,\n};\n\n/**\n * The Modal component is used for the Lightning Design System Modal and Notification > Prompt components. The Modal opens from a state change outside of the component itself (pass this state to the <code>isOpen</code> prop). For more details on the Prompt markup, please review the <a href=\"http://www.lightningdesignsystem.com/components/notifications#prompt\">Notifications > Prompt</a>.\n *\n * By default, `Modal` will add `aria-hidden=true` to the `body` tag, but this disables some assistive technologies. To prevent this you can add the following to your application with `#mount` being the root node of your application that you would like to hide from assistive technologies when the `Modal` is open.\n * ```\n * import settings from 'design-system-react/components/settings';\n * settings.setAppElement('#mount');\n * ```\n * This component uses a portalMount (a disconnected React subtree mount) to create a modal as a child of `body`.\n */\nclass Modal extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tisClosing: false,\n\t\t};\n\n\t\t// Bind\n\t\tthis.handleModalClick = this.handleModalClick.bind(this);\n\t\tthis.closeModal = this.closeModal.bind(this);\n\t\tthis.dismissModalOnClickOutside = this.dismissModalOnClickOutside.bind(\n\t\t\tthis\n\t\t);\n\n\t\tthis.generatedId = shortid.generate();\n\t\tcheckProps(MODAL, props, componentDoc);\n\t\tif (props.ariaHideApp) {\n\t\t\tcheckAppElementIsSet();\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.setReturnFocus();\n\t\tthis.updateBodyScroll();\n\t}\n\n\tcomponentDidUpdate(prevProps, prevState) {\n\t\tif (this.props.isOpen !== prevProps.isOpen) {\n\t\t\tthis.updateBodyScroll();\n\t\t}\n\t\tif (this.state.isClosing !== prevState.isClosing) {\n\t\t\tif (this.state.isClosing) {\n\t\t\t\t// This section of code should be removed once trigger.jsx\n\t\t\t\t// and manager.jsx are removed. They appear to have\n\t\t\t\t// been created in order to do modals in portals.\n\t\t\t\tif (!this.isUnmounting) {\n\t\t\t\t\tconst el = ReactDOM.findDOMNode(this); // eslint-disable-line react/no-find-dom-node\n\t\t\t\t\tif (\n\t\t\t\t\t\tel &&\n\t\t\t\t\t\tel.parentNode &&\n\t\t\t\t\t\tel.parentNode.getAttribute('data-slds-modal')\n\t\t\t\t\t) {\n\t\t\t\t\t\tReactDOM.unmountComponentAtNode(el);\n\t\t\t\t\t\tdocument.body.removeChild(el);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tcomponentWillUnmount() {\n\t\tthis.isUnmounting = true;\n\t\tthis.clearBodyScroll();\n\t}\n\n\tgetId() {\n\t\treturn this.props.id || this.generatedId;\n\t}\n\n\tgetBorderRadius() {\n\t\tconst borderRadiusValue = '.25rem';\n\t\tconst borderTopRadius =\n\t\t\tthis.props.title || this.props.heading || this.props.header\n\t\t\t\t? {}\n\t\t\t\t: {\n\t\t\t\t\t\tborderTopLeftRadius: borderRadiusValue,\n\t\t\t\t\t\tborderTopRightRadius: borderRadiusValue,\n\t\t\t\t  };\n\t\tconst borderBottomRadius = this.props.footer\n\t\t\t? {}\n\t\t\t: {\n\t\t\t\t\tborderBottomLeftRadius: borderRadiusValue,\n\t\t\t\t\tborderBottomRightRadius: borderRadiusValue,\n\t\t\t  };\n\t\treturn {\n\t\t\t...borderTopRadius,\n\t\t\t...borderBottomRadius,\n\t\t};\n\t}\n\n\tgetAriaAttributes() {\n\t\tconst ariaAttributes = {\n\t\t\tdescribedby: `${this.getId()}-modal-content`,\n\t\t\tmodal: 'true',\n\t\t};\n\n\t\tif (this.props.assistiveText.dialogLabel) {\n\t\t\tariaAttributes.label = this.props.assistiveText.dialogLabel;\n\t\t\treturn ariaAttributes;\n\t\t}\n\n\t\tlet dialogLabelledBy = null;\n\n\t\tif (this.props.assistiveText.dialogLabelledBy) {\n\t\t\t// eslint-disable-next-line prefer-destructuring\n\t\t\tdialogLabelledBy = this.props.assistiveText.dialogLabelledBy;\n\t\t} else if (this.props.heading || this.props.title) {\n\t\t\tdialogLabelledBy = `${this.getId()}-heading`;\n\t\t}\n\n\t\tariaAttributes.labelledby = dialogLabelledBy;\n\n\t\treturn ariaAttributes;\n\t}\n\n\tgetModal() {\n\t\tconst modalStyle =\n\t\t\tthis.props.align === 'top' ? { justifyContent: 'flex-start' } : null;\n\t\tconst borderRadius = this.getBorderRadius();\n\t\tconst contentStyleFromProps = this.props.contentStyle || {};\n\t\tconst contentStyle = {\n\t\t\t...borderRadius,\n\t\t\t...contentStyleFromProps,\n\t\t};\n\n\t\treturn (\n\t\t\t// temporarily disabling eslint for the onClicks on the div tags\n\t\t\t/* eslint-disable */\n\t\t\t<section\n\t\t\t\tclassName={classNames(\n\t\t\t\t\t'slds-modal',\n\t\t\t\t\t'slds-fade-in-open',\n\t\t\t\t\tthis.props.size ? `slds-modal_${this.props.size}` : null,\n\t\t\t\t\t{ 'slds-modal_prompt': this.isPrompt() },\n\t\t\t\t\tthis.props.className\n\t\t\t\t)}\n\t\t\t\tonClick={this.dismissModalOnClickOutside}\n\t\t\t>\n\t\t\t\t<div\n\t\t\t\t\tclassName={classNames(\n\t\t\t\t\t\t'slds-modal__container',\n\t\t\t\t\t\tthis.props.containerClassName\n\t\t\t\t\t)}\n\t\t\t\t\tstyle={modalStyle}\n\t\t\t\t>\n\t\t\t\t\t{this.headerComponent()}\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName={classNames(\n\t\t\t\t\t\t\t'slds-modal__content',\n\t\t\t\t\t\t\tthis.props.contentClassName\n\t\t\t\t\t\t)}\n\t\t\t\t\t\tid={`${this.getId()}-modal-content`}\n\t\t\t\t\t\tstyle={contentStyle}\n\t\t\t\t\t\tonClick={this.handleModalClick}\n\t\t\t\t\t>\n\t\t\t\t\t\t{this.props.children}\n\t\t\t\t\t</div>\n\t\t\t\t\t{this.footerComponent()}\n\t\t\t\t</div>\n\t\t\t</section>\n\t\t\t/* eslint-enable */\n\t\t);\n\t}\n\n\tsetReturnFocus() {\n\t\tthis.setState({\n\t\t\treturnFocusTo: documentDefined ? document.activeElement : null,\n\t\t});\n\t}\n\n\t// eslint-disable-next-line class-methods-use-this\n\tclearBodyScroll() {\n\t\tif (windowDefined && documentDefined && document.body) {\n\t\t\tdocument.body.style.overflow = 'inherit';\n\t\t}\n\t}\n\n\tcloseModal() {\n\t\tif (!this.props.disableClose) {\n\t\t\tthis.dismissModal();\n\t\t}\n\t}\n\n\tdismissModal() {\n\t\tthis.setState({ isClosing: true });\n\t\tif (this.state.returnFocusTo && this.state.returnFocusTo.focus) {\n\t\t\tthis.state.returnFocusTo.focus();\n\t\t}\n\t\tif (this.props.onRequestClose) {\n\t\t\tthis.props.onRequestClose();\n\t\t}\n\t}\n\n\tdismissModalOnClickOutside() {\n\t\t// if dismissOnClickOutside is not set, default its value to disableClose\n\t\tconst dismissOnClickOutside =\n\t\t\tthis.props.dismissOnClickOutside !== undefined\n\t\t\t\t? this.props.dismissOnClickOutside\n\t\t\t\t: !this.props.disableClose;\n\n\t\tif (dismissOnClickOutside) {\n\t\t\tthis.dismissModal();\n\t\t}\n\t}\n\n\tfooterComponent() {\n\t\tlet footer = null;\n\t\tconst hasFooter = this.props.footer;\n\t\tconst footerClass = {\n\t\t\t'slds-modal__footer': true,\n\t\t\t'slds-modal__footer_directional': this.props.directional,\n\t\t\t'slds-theme_default': this.isPrompt(),\n\t\t};\n\n\t\tif (hasFooter) {\n\t\t\tfooter = ( // eslint-disable-next-line jsx-a11y/no-static-element-interactions, jsx-a11y/no-noninteractive-element-interactions\n\t\t\t\t<footer\n\t\t\t\t\tclassName={classNames(footerClass, this.props.footerClassNames)}\n\t\t\t\t\tonClick={this.handleModalClick}\n\t\t\t\t>\n\t\t\t\t\t{this.props.footer}\n\t\t\t\t</footer>\n\t\t\t);\n\t\t}\n\t\treturn footer;\n\t}\n\n\t// eslint-disable-next-line class-methods-use-this\n\thandleModalClick(event) {\n\t\tif (event && event.stopPropagation) {\n\t\t\tevent.stopPropagation();\n\t\t}\n\t}\n\n\thandleSubmitModal() {\n\t\tthis.closeModal();\n\t}\n\n\theaderComponent() {\n\t\tlet headerContent = this.props.header;\n\t\tconst headerEmpty =\n\t\t\t!headerContent &&\n\t\t\t!(this.props.heading || this.props.title) &&\n\t\t\t!this.props.tagline;\n\t\tconst assistiveText = {\n\t\t\t...defaultProps.assistiveText,\n\t\t\t...this.props.assistiveText,\n\t\t};\n\t\tconst closeButtonAssistiveText =\n\t\t\tthis.props.closeButtonAssistiveText || assistiveText.closeButton;\n\t\tconst closeButton = (\n\t\t\t<Button\n\t\t\t\tassistiveText={{ icon: closeButtonAssistiveText }}\n\t\t\t\ticonCategory=\"utility\"\n\t\t\t\ticonName=\"close\"\n\t\t\t\ticonSize=\"large\"\n\t\t\t\tinverse\n\t\t\t\tclassName=\"slds-button_icon slds-modal__close\"\n\t\t\t\tonClick={this.closeModal}\n\t\t\t\ttitle={closeButtonAssistiveText}\n\t\t\t\tvariant=\"icon\"\n\t\t\t/>\n\t\t);\n\n\t\tif (\n\t\t\t(!headerContent && (this.props.heading || this.props.title)) ||\n\t\t\tthis.props.tagline\n\t\t) {\n\t\t\theaderContent = (\n\t\t\t\t<div>\n\t\t\t\t\t{this.props.toast}\n\t\t\t\t\t<h2\n\t\t\t\t\t\tclassName={classNames({\n\t\t\t\t\t\t\t'slds-text-heading_small': this.isPrompt(),\n\t\t\t\t\t\t\t'slds-text-heading_medium': !this.isPrompt(),\n\t\t\t\t\t\t})}\n\t\t\t\t\t\tid={`${this.getId()}-heading`}\n\t\t\t\t\t>\n\t\t\t\t\t\t{this.props.heading ? this.props.heading : this.props.title}\n\t\t\t\t\t</h2>\n\t\t\t\t\t{this.props.tagline ? (\n\t\t\t\t\t\t<p className=\"slds-m-top_x-small\">{this.props.tagline}</p>\n\t\t\t\t\t) : null}\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\n\t\treturn (\n\t\t\t// eslint-disable-next-line jsx-a11y/no-static-element-interactions\n\t\t\t<header\n\t\t\t\tclassName={classNames(\n\t\t\t\t\t'slds-modal__header',\n\t\t\t\t\t{\n\t\t\t\t\t\t'slds-modal__header_empty': headerEmpty,\n\t\t\t\t\t\t[`slds-theme_${this.props.prompt}`]: this.isPrompt(),\n\t\t\t\t\t\t'slds-theme_alert-texture': this.isPrompt(),\n\t\t\t\t\t},\n\t\t\t\t\tthis.props.headerClassName\n\t\t\t\t)}\n\t\t\t\tonClick={this.handleModalClick}\n\t\t\t>\n\t\t\t\t{this.props.disableClose ? null : closeButton}\n\t\t\t\t{headerContent}\n\t\t\t</header>\n\t\t);\n\t}\n\n\tisPrompt() {\n\t\treturn this.props.prompt !== undefined;\n\t}\n\n\tupdateBodyScroll() {\n\t\tif (windowDefined && documentDefined && document.body) {\n\t\t\tif (this.props.isOpen) {\n\t\t\t\tdocument.body.style.overflow = 'hidden';\n\t\t\t} else {\n\t\t\t\tdocument.body.style.overflow = 'inherit';\n\t\t\t}\n\t\t}\n\t}\n\n\trender() {\n\t\tconst ariaAttributes = this.getAriaAttributes();\n\t\tconst customStyles = {\n\t\t\tcontent: {\n\t\t\t\tposition: 'default',\n\t\t\t\ttop: 'default',\n\t\t\t\tleft: 'default',\n\t\t\t\tright: 'default',\n\t\t\t\tbottom: 'default',\n\t\t\t\tborder: 'default',\n\t\t\t\tbackground: 'default',\n\t\t\t\toverflow: 'default',\n\t\t\t\tWebkitOverflowScrolling: 'default',\n\t\t\t\tborderRadius: 'default',\n\t\t\t\toutline: 'default',\n\t\t\t\tpadding: 'default',\n\t\t\t},\n\t\t\toverlay: {\n\t\t\t\tzIndex: 8000, // following SLDS guideline for z-index overlay\n\t\t\t\tbackgroundColor: 'default',\n\t\t\t},\n\t\t};\n\n\t\treturn (\n\t\t\t<ReactModal\n\t\t\t\taria={ariaAttributes}\n\t\t\t\tariaHideApp={this.props.ariaHideApp}\n\t\t\t\tisOpen={this.props.isOpen}\n\t\t\t\tonRequestClose={this.closeModal}\n\t\t\t\trole={this.props.disableClose ? 'alertdialog' : 'dialog'}\n\t\t\t\tstyle={customStyles}\n\t\t\t\tparentSelector={this.props.parentSelector}\n\t\t\t\tportalClassName={classNames(\n\t\t\t\t\t'ReactModalPortal',\n\t\t\t\t\tthis.props.portalClassName\n\t\t\t\t)}\n\t\t\t>\n\t\t\t\t{this.getModal()}\n\t\t\t\t<div className=\"slds-backdrop slds-backdrop_open\" />\n\t\t\t</ReactModal>\n\t\t);\n\t}\n}\n\nModal.displayName = MODAL;\nModal.propTypes = propTypes;\nModal.defaultProps = defaultProps;\n\nexport default Modal;\n"]},"metadata":{},"sourceType":"module"}