{"ast":null,"code":"/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n/* eslint-disable import/no-mutable-exports */\n// This function will deliver an error message to the browser console when all of the props passed in are undefined (falsey).\nimport warning from 'warning';\n\nvar oneOfComponent = function oneOfComponentFunction() {};\n\nif (process.env.NODE_ENV !== 'production') {\n  var hasWarned = {};\n\n  oneOfComponent = function oneOfComponentFunction(control, props, propName, allowedComponents, comment, specificTest // if this is set, it will be checked instead of props[propName]\n  ) {\n    var additionalComment = comment ? \" \".concat(comment) : '';\n    var componentType;\n\n    if (specificTest) {\n      if (typeof specificTest.type === 'string') {\n        componentType = specificTest.type;\n      } else {\n        componentType = specificTest.type.displayName;\n      }\n    } else if (typeof props[propName].type === 'string') {\n      componentType = props[propName].type;\n    } else {\n      componentType = props[propName].type.displayName;\n    }\n\n    var allowedComponentFound = allowedComponents.indexOf(componentType) > -1;\n\n    if (!allowedComponentFound && !hasWarned[control]) {\n      /* eslint-disable max-len */\n      warning(false, \"[Design System React] \".concat(control, \" requires that prop '\").concat(propName, \"' is an instance of one of the following components: \").concat(allowedComponents.join(', '), \". An instance of '\").concat(componentType, \"' was given.\").concat(additionalComment));\n      /* eslint-enable max-len */\n\n      hasWarned[control] = true;\n    }\n  };\n}\n\nexport default oneOfComponent;","map":{"version":3,"sources":["../../../.tmp-es/utilities/warning/one-of-component.js"],"names":["oneOfComponent","process","hasWarned","additionalComment","comment","specificTest","componentType","props","allowedComponentFound","allowedComponents","warning"],"mappings":"AAAA;;AACA;;AAEA;AAEA;AACA,OAAA,OAAA,MAAA,SAAA;;AAEA,IAAIA,cAAc,GAAG,SAAA,sBAAA,GAAkC,CAAvD,CAAA;;AAEA,IAAIC,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,KAAJ,YAAA,EAA2C;AAC1C,MAAMC,SAAS,GAAf,EAAA;;AACAF,EAAAA,cAAc,GAAG,SAAA,sBAAA,CAAA,OAAA,EAAA,KAAA,EAAA,QAAA,EAAA,iBAAA,EAAA,OAAA,EAAA,YAAA,CAMH;AANG,IAOf;AACD,QAAMG,iBAAiB,GAAGC,OAAO,GAAA,IAAA,MAAA,CAAA,OAAA,CAAA,GAAjC,EAAA;AAEA,QAAA,aAAA;;AAEA,QAAA,YAAA,EAAkB;AACjB,UAAI,OAAOC,YAAY,CAAnB,IAAA,KAAJ,QAAA,EAA2C;AAC1CC,QAAAA,aAAa,GAAGD,YAAY,CAA5BC,IAAAA;AADD,OAAA,MAEO;AACNA,QAAAA,aAAa,GAAGD,YAAY,CAAZA,IAAAA,CAAhBC,WAAAA;AACA;AALF,KAAA,MAMO,IAAI,OAAOC,KAAK,CAALA,QAAK,CAALA,CAAP,IAAA,KAAJ,QAAA,EAA8C;AACpDD,MAAAA,aAAa,GAAGC,KAAK,CAALA,QAAK,CAALA,CAAhBD,IAAAA;AADM,KAAA,MAEA;AACNA,MAAAA,aAAa,GAAGC,KAAK,CAALA,QAAK,CAALA,CAAAA,IAAAA,CAAhBD,WAAAA;AACA;;AAED,QAAME,qBAAqB,GAAGC,iBAAiB,CAAjBA,OAAAA,CAAAA,aAAAA,IAA2C,CAAzE,CAAA;;AAEA,QAAI,CAAA,qBAAA,IAA0B,CAACP,SAAS,CAAxC,OAAwC,CAAxC,EAAmD;AAClD;AACAQ,MAAAA,OAAO,CAAA,KAAA,EAAA,yBAAA,MAAA,CAAA,OAAA,EAAA,uBAAA,EAAA,MAAA,CAAA,QAAA,EAAA,uDAAA,EAAA,MAAA,CAEkHD,iBAAiB,CAAjBA,IAAAA,CAFlH,IAEkHA,CAFlH,EAAA,oBAAA,EAAA,MAAA,CAAA,aAAA,EAAA,cAAA,EAAA,MAAA,CAAPC,iBAAO,CAAA,CAAPA;AAMA;;AACAR,MAAAA,SAAS,CAATA,OAAS,CAATA,GAAAA,IAAAA;AACA;AApCFF,GAAAA;AAsCA;;AAED,eAAA,cAAA","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n/* eslint-disable import/no-mutable-exports */\n\n// This function will deliver an error message to the browser console when all of the props passed in are undefined (falsey).\nimport warning from 'warning';\n\nlet oneOfComponent = function oneOfComponentFunction() {};\n\nif (process.env.NODE_ENV !== 'production') {\n\tconst hasWarned = {};\n\toneOfComponent = function oneOfComponentFunction(\n\t\tcontrol,\n\t\tprops,\n\t\tpropName,\n\t\tallowedComponents,\n\t\tcomment,\n\t\tspecificTest // if this is set, it will be checked instead of props[propName]\n\t) {\n\t\tconst additionalComment = comment ? ` ${comment}` : '';\n\n\t\tlet componentType;\n\n\t\tif (specificTest) {\n\t\t\tif (typeof specificTest.type === 'string') {\n\t\t\t\tcomponentType = specificTest.type;\n\t\t\t} else {\n\t\t\t\tcomponentType = specificTest.type.displayName;\n\t\t\t}\n\t\t} else if (typeof props[propName].type === 'string') {\n\t\t\tcomponentType = props[propName].type;\n\t\t} else {\n\t\t\tcomponentType = props[propName].type.displayName;\n\t\t}\n\n\t\tconst allowedComponentFound = allowedComponents.indexOf(componentType) > -1;\n\n\t\tif (!allowedComponentFound && !hasWarned[control]) {\n\t\t\t/* eslint-disable max-len */\n\t\t\twarning(\n\t\t\t\tfalse,\n\t\t\t\t`[Design System React] ${control} requires that prop '${propName}' is an instance of one of the following components: ${allowedComponents.join(\n\t\t\t\t\t', '\n\t\t\t\t)}. An instance of '${componentType}' was given.${additionalComment}`\n\t\t\t);\n\t\t\t/* eslint-enable max-len */\n\t\t\thasWarned[control] = true;\n\t\t}\n\t};\n}\n\nexport default oneOfComponent;\n"]},"metadata":{},"sourceType":"module"}