{"ast":null,"code":"/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\nimport classNames from 'classnames';\nimport { DIRECTIONS } from './../components/utilities/UNSAFE_direction'; // Translates the prop into a string popper can use https://popper.js.org/popper-documentation.html#Popper.placements\n\nvar mapPropToPopperPlacement = function mapPropToPopperPlacement(align, direction) {\n  var placement;\n\n  switch (align) {\n    case 'top left':\n      placement = 'top-start';\n      break;\n\n    case 'top right':\n      placement = 'top-end';\n      break;\n\n    case 'right top':\n      placement = 'right-start';\n      break;\n\n    case 'right bottom':\n      placement = 'right-end';\n      break;\n\n    case 'bottom left':\n      placement = 'bottom-start';\n      break;\n\n    case 'bottom right':\n      placement = 'bottom-end';\n      break;\n\n    case 'left top':\n      placement = 'left-start';\n      break;\n\n    case 'left bottom':\n      placement = 'left-end';\n      break;\n\n    default:\n      placement = align;\n  }\n\n  if (direction === DIRECTIONS.RTL) {\n    if (placement.indexOf('left') > -1) {\n      placement = placement.replace('left', 'right');\n    } else if (placement.indexOf('right') > -1) {\n      placement = placement.replace('right', 'left');\n    } else if (placement.indexOf('start') > -1) {\n      placement = placement.replace('start', 'end');\n    } else if (placement.indexOf('end') > -1) {\n      placement = placement.replace('end', 'start');\n    }\n  }\n\n  return placement;\n};\n\nvar getNubbinClassName = function getNubbinClassName(align) {\n  var popperData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (popperData.flipped) {\n    return classNames({\n      'slds-nubbin_top': align === 'top',\n      'slds-nubbin_top-left': align === 'top left',\n      'slds-nubbin_top-right': align === 'top right',\n      'slds-nubbin_bottom': align === 'bottom',\n      'slds-nubbin_bottom-left': align === 'bottom left',\n      'slds-nubbin_bottom-right': align === 'bottom right',\n      'slds-nubbin_left': align === 'left',\n      'slds-nubbin_left-bottom': align === 'left bottom',\n      'slds-nubbin_left-top': align === 'left top',\n      'slds-nubbin_right': align === 'right',\n      'slds-nubbin_right-bottom': align === 'right bottom',\n      'slds-nubbin_right-top': align === 'right top'\n    });\n  }\n\n  return classNames({\n    'slds-nubbin_top': align === 'bottom',\n    'slds-nubbin_top-left': align === 'bottom left',\n    'slds-nubbin_top-right': align === 'bottom right',\n    'slds-nubbin_bottom': align === 'top',\n    'slds-nubbin_bottom-left': align === 'top left',\n    'slds-nubbin_bottom-right': align === 'top right',\n    'slds-nubbin_left': align === 'right',\n    'slds-nubbin_left-bottom': align === 'right bottom',\n    'slds-nubbin_left-top': align === 'right top',\n    'slds-nubbin_right': align === 'left',\n    'slds-nubbin_right-bottom': align === 'left bottom',\n    'slds-nubbin_right-top': align === 'left top'\n  });\n};\n\nvar DISTANCE_OFFSET = 1.5; // 'rem'\n\nvar NUBBIN_SIZE = 1; // 'rem'\n\nvar ROTATED_HEIGHT = NUBBIN_SIZE / Math.sqrt(2); // 'rem'\n\n/*\n *\n *\n *\n *\n */\n// FIXME - still need to account for border shadow of 2px. probably only needs to be added to the rotated height.\n// TODO - should we convert all rem to pixels right from the get go? Keep units consistent. Memoize the values for perf?\n\nvar getNubbinMargins = function getNubbinMargins() {\n  var popperData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var placement = popperData.placement;\n  var top = 0;\n  var left = 0;\n  var DISTANCE_OFFSET_PX = 16 * DISTANCE_OFFSET; // FIXME - actually do a real convert based on font size.\n\n  var ROTATED_HEIGHT_PX = 16 * ROTATED_HEIGHT; // FIXME - actually do a real convert based on font size.\n\n  var halfWidth = popperData.offsets.reference.width * 0.5;\n  var halfHeight = popperData.offsets.reference.height * 0.5;\n\n  if (placement === 'top') {\n    top = ROTATED_HEIGHT_PX * -1;\n  } else if (placement === 'top-end') {\n    top = ROTATED_HEIGHT_PX * -1;\n    left = DISTANCE_OFFSET_PX - halfWidth;\n  } else if (placement === 'top-start') {\n    top = ROTATED_HEIGHT_PX * -1;\n    left = halfWidth - DISTANCE_OFFSET_PX;\n  }\n\n  if (placement === 'bottom') {\n    top = ROTATED_HEIGHT_PX;\n  } else if (placement === 'bottom-end') {\n    top = ROTATED_HEIGHT_PX;\n    left = DISTANCE_OFFSET_PX - halfWidth;\n  } else if (placement === 'bottom-start') {\n    top = ROTATED_HEIGHT_PX;\n    left = halfWidth - DISTANCE_OFFSET_PX;\n  }\n\n  if (placement === 'right') {\n    left = ROTATED_HEIGHT_PX;\n  } else if (placement === 'right-end') {\n    left = ROTATED_HEIGHT_PX;\n    top = DISTANCE_OFFSET_PX - halfHeight;\n  } else if (placement === 'right-start') {\n    left = ROTATED_HEIGHT_PX;\n    top = halfHeight - DISTANCE_OFFSET_PX;\n  }\n\n  if (placement === 'left') {\n    left = ROTATED_HEIGHT_PX * -1;\n  } else if (placement === 'left-end') {\n    left = ROTATED_HEIGHT_PX * -1;\n    top = DISTANCE_OFFSET_PX - halfHeight;\n  } else if (placement === 'left-start') {\n    left = ROTATED_HEIGHT_PX * -1;\n    top = halfHeight - DISTANCE_OFFSET_PX;\n  }\n\n  return {\n    left: left,\n    top: top\n  };\n};\n\nexport { getNubbinMargins, getNubbinClassName, mapPropToPopperPlacement };","map":{"version":3,"sources":["../../.tmp-es/utilities/dialog-helpers.js"],"names":["mapPropToPopperPlacement","placement","direction","DIRECTIONS","getNubbinClassName","popperData","classNames","align","DISTANCE_OFFSET","NUBBIN_SIZE","ROTATED_HEIGHT","Math","getNubbinMargins","top","left","DISTANCE_OFFSET_PX","ROTATED_HEIGHT_PX","halfWidth","halfHeight"],"mappings":"AAAA;;AACA;AAEA,OAAA,UAAA,MAAA,YAAA;AACA,SAAA,UAAA,QAAA,4CAAA,C,CAEA;;AACA,IAAMA,wBAAwB,GAAG,SAA3BA,wBAA2B,CAAA,KAAA,EAAA,SAAA,EAAsB;AACtD,MAAA,SAAA;;AACA,UAAA,KAAA;AACC,SAAA,UAAA;AACCC,MAAAA,SAAS,GAATA,WAAAA;AACA;;AACD,SAAA,WAAA;AACCA,MAAAA,SAAS,GAATA,SAAAA;AACA;;AACD,SAAA,WAAA;AACCA,MAAAA,SAAS,GAATA,aAAAA;AACA;;AACD,SAAA,cAAA;AACCA,MAAAA,SAAS,GAATA,WAAAA;AACA;;AACD,SAAA,aAAA;AACCA,MAAAA,SAAS,GAATA,cAAAA;AACA;;AACD,SAAA,cAAA;AACCA,MAAAA,SAAS,GAATA,YAAAA;AACA;;AACD,SAAA,UAAA;AACCA,MAAAA,SAAS,GAATA,YAAAA;AACA;;AACD,SAAA,aAAA;AACCA,MAAAA,SAAS,GAATA,UAAAA;AACA;;AACD;AACCA,MAAAA,SAAS,GAATA,KAAAA;AA1BF;;AA4BA,MAAIC,SAAS,KAAKC,UAAU,CAA5B,GAAA,EAAkC;AACjC,QAAIF,SAAS,CAATA,OAAAA,CAAAA,MAAAA,IAA4B,CAAhC,CAAA,EAAoC;AACnCA,MAAAA,SAAS,GAAGA,SAAS,CAATA,OAAAA,CAAAA,MAAAA,EAAZA,OAAYA,CAAZA;AADD,KAAA,MAEO,IAAIA,SAAS,CAATA,OAAAA,CAAAA,OAAAA,IAA6B,CAAjC,CAAA,EAAqC;AAC3CA,MAAAA,SAAS,GAAGA,SAAS,CAATA,OAAAA,CAAAA,OAAAA,EAAZA,MAAYA,CAAZA;AADM,KAAA,MAEA,IAAIA,SAAS,CAATA,OAAAA,CAAAA,OAAAA,IAA6B,CAAjC,CAAA,EAAqC;AAC3CA,MAAAA,SAAS,GAAGA,SAAS,CAATA,OAAAA,CAAAA,OAAAA,EAAZA,KAAYA,CAAZA;AADM,KAAA,MAEA,IAAIA,SAAS,CAATA,OAAAA,CAAAA,KAAAA,IAA2B,CAA/B,CAAA,EAAmC;AACzCA,MAAAA,SAAS,GAAGA,SAAS,CAATA,OAAAA,CAAAA,KAAAA,EAAZA,OAAYA,CAAZA;AACA;AACD;;AACD,SAAA,SAAA;AAzCD,CAAA;;AA4CA,IAAMG,kBAAkB,GAAG,SAArBA,kBAAqB,CAAA,KAAA,EAA4B;AAAA,MAApBC,UAAoB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAP,EAAO;;AACtD,MAAIA,UAAU,CAAd,OAAA,EAAwB;AACvB,WAAOC,UAAU,CAAC;AACjB,yBAAmBC,KAAK,KADP,KAAA;AAEjB,8BAAwBA,KAAK,KAFZ,UAAA;AAGjB,+BAAyBA,KAAK,KAHb,WAAA;AAIjB,4BAAsBA,KAAK,KAJV,QAAA;AAKjB,iCAA2BA,KAAK,KALf,aAAA;AAMjB,kCAA4BA,KAAK,KANhB,cAAA;AAOjB,0BAAoBA,KAAK,KAPR,MAAA;AAQjB,iCAA2BA,KAAK,KARf,aAAA;AASjB,8BAAwBA,KAAK,KATZ,UAAA;AAUjB,2BAAqBA,KAAK,KAVT,OAAA;AAWjB,kCAA4BA,KAAK,KAXhB,cAAA;AAYjB,+BAAyBA,KAAK,KAAK;AAZlB,KAAD,CAAjB;AAcA;;AAED,SAAOD,UAAU,CAAC;AACjB,uBAAmBC,KAAK,KADP,QAAA;AAEjB,4BAAwBA,KAAK,KAFZ,aAAA;AAGjB,6BAAyBA,KAAK,KAHb,cAAA;AAIjB,0BAAsBA,KAAK,KAJV,KAAA;AAKjB,+BAA2BA,KAAK,KALf,UAAA;AAMjB,gCAA4BA,KAAK,KANhB,WAAA;AAOjB,wBAAoBA,KAAK,KAPR,OAAA;AAQjB,+BAA2BA,KAAK,KARf,cAAA;AASjB,4BAAwBA,KAAK,KATZ,WAAA;AAUjB,yBAAqBA,KAAK,KAVT,MAAA;AAWjB,gCAA4BA,KAAK,KAXhB,aAAA;AAYjB,6BAAyBA,KAAK,KAAK;AAZlB,GAAD,CAAjB;AAlBD,CAAA;;AAkCA,IAAMC,eAAe,GAArB,GAAA,C,CAA6B;;AAC7B,IAAMC,WAAW,GAAjB,CAAA,C,CAAuB;;AACvB,IAAMC,cAAc,GAAGD,WAAW,GAAGE,IAAI,CAAJA,IAAAA,CAArC,CAAqCA,CAArC,C,CAAmD;;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAqB;AAAA,MAApBP,UAAoB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAP,EAAO;AAAA,MACrCJ,SADqC,GACvBI,UADuB,CAAA,SAAA;AAG7C,MAAIQ,GAAG,GAAP,CAAA;AACA,MAAIC,IAAI,GAAR,CAAA;AAEA,MAAMC,kBAAkB,GAAG,KANkB,eAM7C,CAN6C,CAMI;;AACjD,MAAMC,iBAAiB,GAAG,KAPmB,cAO7C,CAP6C,CAOE;;AAE/C,MAAMC,SAAS,GAAGZ,UAAU,CAAVA,OAAAA,CAAAA,SAAAA,CAAAA,KAAAA,GAAlB,GAAA;AACA,MAAMa,UAAU,GAAGb,UAAU,CAAVA,OAAAA,CAAAA,SAAAA,CAAAA,MAAAA,GAAnB,GAAA;;AAEA,MAAIJ,SAAS,KAAb,KAAA,EAAyB;AACxBY,IAAAA,GAAG,GAAGG,iBAAiB,GAAG,CAA1BH,CAAAA;AADD,GAAA,MAEO,IAAIZ,SAAS,KAAb,SAAA,EAA6B;AACnCY,IAAAA,GAAG,GAAGG,iBAAiB,GAAG,CAA1BH,CAAAA;AACAC,IAAAA,IAAI,GAAGC,kBAAkB,GAAzBD,SAAAA;AAFM,GAAA,MAGA,IAAIb,SAAS,KAAb,WAAA,EAA+B;AACrCY,IAAAA,GAAG,GAAGG,iBAAiB,GAAG,CAA1BH,CAAAA;AACAC,IAAAA,IAAI,GAAGG,SAAS,GAAhBH,kBAAAA;AACA;;AAED,MAAIb,SAAS,KAAb,QAAA,EAA4B;AAC3BY,IAAAA,GAAG,GAAHA,iBAAAA;AADD,GAAA,MAEO,IAAIZ,SAAS,KAAb,YAAA,EAAgC;AACtCY,IAAAA,GAAG,GAAHA,iBAAAA;AACAC,IAAAA,IAAI,GAAGC,kBAAkB,GAAzBD,SAAAA;AAFM,GAAA,MAGA,IAAIb,SAAS,KAAb,cAAA,EAAkC;AACxCY,IAAAA,GAAG,GAAHA,iBAAAA;AACAC,IAAAA,IAAI,GAAGG,SAAS,GAAhBH,kBAAAA;AACA;;AAED,MAAIb,SAAS,KAAb,OAAA,EAA2B;AAC1Ba,IAAAA,IAAI,GAAJA,iBAAAA;AADD,GAAA,MAEO,IAAIb,SAAS,KAAb,WAAA,EAA+B;AACrCa,IAAAA,IAAI,GAAJA,iBAAAA;AACAD,IAAAA,GAAG,GAAGE,kBAAkB,GAAxBF,UAAAA;AAFM,GAAA,MAGA,IAAIZ,SAAS,KAAb,aAAA,EAAiC;AACvCa,IAAAA,IAAI,GAAJA,iBAAAA;AACAD,IAAAA,GAAG,GAAGK,UAAU,GAAhBL,kBAAAA;AACA;;AAED,MAAIZ,SAAS,KAAb,MAAA,EAA0B;AACzBa,IAAAA,IAAI,GAAGE,iBAAiB,GAAG,CAA3BF,CAAAA;AADD,GAAA,MAEO,IAAIb,SAAS,KAAb,UAAA,EAA8B;AACpCa,IAAAA,IAAI,GAAGE,iBAAiB,GAAG,CAA3BF,CAAAA;AACAD,IAAAA,GAAG,GAAGE,kBAAkB,GAAxBF,UAAAA;AAFM,GAAA,MAGA,IAAIZ,SAAS,KAAb,YAAA,EAAgC;AACtCa,IAAAA,IAAI,GAAGE,iBAAiB,GAAG,CAA3BF,CAAAA;AACAD,IAAAA,GAAG,GAAGK,UAAU,GAAhBL,kBAAAA;AACA;;AAED,SAAO;AACNC,IAAAA,IAAI,EADE,IAAA;AAEND,IAAAA,GAAG,EAAHA;AAFM,GAAP;AApDD,CAAA;;AA0DA,SAAA,gBAAA,EAAA,kBAAA,EAAA,wBAAA","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\nimport classNames from 'classnames';\nimport { DIRECTIONS } from './../components/utilities/UNSAFE_direction';\n\n// Translates the prop into a string popper can use https://popper.js.org/popper-documentation.html#Popper.placements\nconst mapPropToPopperPlacement = (align, direction) => {\n\tlet placement;\n\tswitch (align) {\n\t\tcase 'top left':\n\t\t\tplacement = 'top-start';\n\t\t\tbreak;\n\t\tcase 'top right':\n\t\t\tplacement = 'top-end';\n\t\t\tbreak;\n\t\tcase 'right top':\n\t\t\tplacement = 'right-start';\n\t\t\tbreak;\n\t\tcase 'right bottom':\n\t\t\tplacement = 'right-end';\n\t\t\tbreak;\n\t\tcase 'bottom left':\n\t\t\tplacement = 'bottom-start';\n\t\t\tbreak;\n\t\tcase 'bottom right':\n\t\t\tplacement = 'bottom-end';\n\t\t\tbreak;\n\t\tcase 'left top':\n\t\t\tplacement = 'left-start';\n\t\t\tbreak;\n\t\tcase 'left bottom':\n\t\t\tplacement = 'left-end';\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tplacement = align;\n\t}\n\tif (direction === DIRECTIONS.RTL) {\n\t\tif (placement.indexOf('left') > -1) {\n\t\t\tplacement = placement.replace('left', 'right');\n\t\t} else if (placement.indexOf('right') > -1) {\n\t\t\tplacement = placement.replace('right', 'left');\n\t\t} else if (placement.indexOf('start') > -1) {\n\t\t\tplacement = placement.replace('start', 'end');\n\t\t} else if (placement.indexOf('end') > -1) {\n\t\t\tplacement = placement.replace('end', 'start');\n\t\t}\n\t}\n\treturn placement;\n};\n\nconst getNubbinClassName = (align, popperData = {}) => {\n\tif (popperData.flipped) {\n\t\treturn classNames({\n\t\t\t'slds-nubbin_top': align === 'top',\n\t\t\t'slds-nubbin_top-left': align === 'top left',\n\t\t\t'slds-nubbin_top-right': align === 'top right',\n\t\t\t'slds-nubbin_bottom': align === 'bottom',\n\t\t\t'slds-nubbin_bottom-left': align === 'bottom left',\n\t\t\t'slds-nubbin_bottom-right': align === 'bottom right',\n\t\t\t'slds-nubbin_left': align === 'left',\n\t\t\t'slds-nubbin_left-bottom': align === 'left bottom',\n\t\t\t'slds-nubbin_left-top': align === 'left top',\n\t\t\t'slds-nubbin_right': align === 'right',\n\t\t\t'slds-nubbin_right-bottom': align === 'right bottom',\n\t\t\t'slds-nubbin_right-top': align === 'right top',\n\t\t});\n\t}\n\n\treturn classNames({\n\t\t'slds-nubbin_top': align === 'bottom',\n\t\t'slds-nubbin_top-left': align === 'bottom left',\n\t\t'slds-nubbin_top-right': align === 'bottom right',\n\t\t'slds-nubbin_bottom': align === 'top',\n\t\t'slds-nubbin_bottom-left': align === 'top left',\n\t\t'slds-nubbin_bottom-right': align === 'top right',\n\t\t'slds-nubbin_left': align === 'right',\n\t\t'slds-nubbin_left-bottom': align === 'right bottom',\n\t\t'slds-nubbin_left-top': align === 'right top',\n\t\t'slds-nubbin_right': align === 'left',\n\t\t'slds-nubbin_right-bottom': align === 'left bottom',\n\t\t'slds-nubbin_right-top': align === 'left top',\n\t});\n};\n\nconst DISTANCE_OFFSET = 1.5; // 'rem'\nconst NUBBIN_SIZE = 1; // 'rem'\nconst ROTATED_HEIGHT = NUBBIN_SIZE / Math.sqrt(2); // 'rem'\n/*\n *\n *\n *\n *\n */\n// FIXME - still need to account for border shadow of 2px. probably only needs to be added to the rotated height.\n// TODO - should we convert all rem to pixels right from the get go? Keep units consistent. Memoize the values for perf?\nconst getNubbinMargins = (popperData = {}) => {\n\tconst { placement } = popperData;\n\n\tlet top = 0;\n\tlet left = 0;\n\n\tconst DISTANCE_OFFSET_PX = 16 * DISTANCE_OFFSET; // FIXME - actually do a real convert based on font size.\n\tconst ROTATED_HEIGHT_PX = 16 * ROTATED_HEIGHT; // FIXME - actually do a real convert based on font size.\n\n\tconst halfWidth = popperData.offsets.reference.width * 0.5;\n\tconst halfHeight = popperData.offsets.reference.height * 0.5;\n\n\tif (placement === 'top') {\n\t\ttop = ROTATED_HEIGHT_PX * -1;\n\t} else if (placement === 'top-end') {\n\t\ttop = ROTATED_HEIGHT_PX * -1;\n\t\tleft = DISTANCE_OFFSET_PX - halfWidth;\n\t} else if (placement === 'top-start') {\n\t\ttop = ROTATED_HEIGHT_PX * -1;\n\t\tleft = halfWidth - DISTANCE_OFFSET_PX;\n\t}\n\n\tif (placement === 'bottom') {\n\t\ttop = ROTATED_HEIGHT_PX;\n\t} else if (placement === 'bottom-end') {\n\t\ttop = ROTATED_HEIGHT_PX;\n\t\tleft = DISTANCE_OFFSET_PX - halfWidth;\n\t} else if (placement === 'bottom-start') {\n\t\ttop = ROTATED_HEIGHT_PX;\n\t\tleft = halfWidth - DISTANCE_OFFSET_PX;\n\t}\n\n\tif (placement === 'right') {\n\t\tleft = ROTATED_HEIGHT_PX;\n\t} else if (placement === 'right-end') {\n\t\tleft = ROTATED_HEIGHT_PX;\n\t\ttop = DISTANCE_OFFSET_PX - halfHeight;\n\t} else if (placement === 'right-start') {\n\t\tleft = ROTATED_HEIGHT_PX;\n\t\ttop = halfHeight - DISTANCE_OFFSET_PX;\n\t}\n\n\tif (placement === 'left') {\n\t\tleft = ROTATED_HEIGHT_PX * -1;\n\t} else if (placement === 'left-end') {\n\t\tleft = ROTATED_HEIGHT_PX * -1;\n\t\ttop = DISTANCE_OFFSET_PX - halfHeight;\n\t} else if (placement === 'left-start') {\n\t\tleft = ROTATED_HEIGHT_PX * -1;\n\t\ttop = halfHeight - DISTANCE_OFFSET_PX;\n\t}\n\n\treturn {\n\t\tleft,\n\t\ttop,\n\t};\n};\n\nexport { getNubbinMargins, getNubbinClassName, mapPropToPopperPlacement };\n"]},"metadata":{},"sourceType":"module"}