{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n// # Global Navigation Bar Button Component\n// ## Dependencies\n// ### React\n\n\nimport React from 'react';\nimport PropTypes from 'prop-types'; // ### classNames\n\nimport classNames from 'classnames'; // ### Button\n\nimport Button from '../button'; // ## Constants\n\nimport { GLOBAL_NAVIGATION_BAR_BUTTON } from '../../utilities/constants';\n/**\n * A helper component that renders a Button as an item in the Global Navigation Bar. All props are passed onto `Button` except `active` and `dividerPosition`.\n */\n\nvar GlobalNavigationButton = function GlobalNavigationButton(_ref) {\n  var active = _ref.active,\n      dividerPosition = _ref.dividerPosition,\n      props = _objectWithoutProperties(_ref, [\"active\", \"dividerPosition\"]);\n\n  return /*#__PURE__*/React.createElement(\"li\", {\n    className: classNames('slds-context-bar__item', _defineProperty({\n      'slds-is-active': active\n    }, \"slds-context-bar__item_divider-\".concat(dividerPosition), dividerPosition))\n  }, /*#__PURE__*/React.createElement(Button, props));\n};\n\nGlobalNavigationButton.displayName = GLOBAL_NAVIGATION_BAR_BUTTON; // ### Prop Types\n\nGlobalNavigationButton.propTypes = {\n  /**\n   * Whether the item is active or not.\n   */\n  active: PropTypes.bool,\n\n  /**\n   * Determines position of separating bar.\n   */\n  dividerPosition: PropTypes.oneOf(['left', 'right'])\n}; // ### Default Props\n\nGlobalNavigationButton.defaultProps = {\n  className: 'slds-context-bar__label-action slds-text-body_regular',\n  // This is a hack since buttons are not supported by Global Navigation\n  // Bar and have different `font-size` and `line-height` than links or\n  // dropdowns.\n  style: {\n    lineHeight: 'inherit'\n  },\n  variant: 'base'\n};\nexport default GlobalNavigationButton;","map":{"version":3,"sources":["../../../.tmp-es/components/global-navigation-bar/button.jsx"],"names":["GlobalNavigationButton","active","dividerPosition","props","classNames","PropTypes","className","style","lineHeight","variant"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;AAEA;AAEA;AAEA;;;AACA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA,C,CAEA;;AACA,OAAA,UAAA,MAAA,YAAA,C,CAEA;;AACA,OAAA,MAAA,MAAA,WAAA,C,CAEA;;AACA,SAAA,4BAAA,QAAA,2BAAA;AAEA;AACA;AACA;;AACA,IAAMA,sBAAsB,GAAG,SAAzBA,sBAAyB,CAAA,IAAA,EAAA;AAAA,MAAGC,MAAH,GAAA,IAAA,CAAA,MAAA;AAAA,MAAWC,eAAX,GAAA,IAAA,CAAA,eAAA;AAAA,MAA+BC,KAA/B,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,QAAA,EAAA,iBAAA,CAAA,CAAA;;AAAA,SAAA,aAC9B,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AACC,IAAA,SAAS,EAAEC,UAAU,CAAA,wBAAA,EAAA,eAAA,CAAA;AACpB,wBAAkBH;AADE,KAAA,EAAA,kCAAA,MAAA,CAAA,eAAA,CAAA,EAAA,eAAA,CAAA;AADtB,GAAA,EAAA,aAMC,KAAA,CAAA,aAAA,CAAA,MAAA,EAP6B,KAO7B,CAND,CAD8B;AAA/B,CAAA;;AAWAD,sBAAsB,CAAtBA,WAAAA,GAAAA,4BAAAA,C,CAEA;;AACAA,sBAAsB,CAAtBA,SAAAA,GAAmC;AAClC;AACD;AACA;AACCC,EAAAA,MAAM,EAAEI,SAAS,CAJiB,IAAA;;AAKlC;AACD;AACA;AACCH,EAAAA,eAAe,EAAEG,SAAS,CAATA,KAAAA,CAAgB,CAAA,MAAA,EAAhBA,OAAgB,CAAhBA;AARiB,CAAnCL,C,CAWA;;AACAA,sBAAsB,CAAtBA,YAAAA,GAAsC;AACrCM,EAAAA,SAAS,EAD4B,uDAAA;AAErC;AACA;AACA;AACAC,EAAAA,KAAK,EAAE;AAAEC,IAAAA,UAAU,EAAE;AAAd,GAL8B;AAMrCC,EAAAA,OAAO,EAAE;AAN4B,CAAtCT;AASA,eAAA,sBAAA","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// # Global Navigation Bar Button Component\n\n// ## Dependencies\n\n// ### React\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n// ### classNames\nimport classNames from 'classnames';\n\n// ### Button\nimport Button from '../button';\n\n// ## Constants\nimport { GLOBAL_NAVIGATION_BAR_BUTTON } from '../../utilities/constants';\n\n/**\n * A helper component that renders a Button as an item in the Global Navigation Bar. All props are passed onto `Button` except `active` and `dividerPosition`.\n */\nconst GlobalNavigationButton = ({ active, dividerPosition, ...props }) => (\n\t<li\n\t\tclassName={classNames('slds-context-bar__item', {\n\t\t\t'slds-is-active': active,\n\t\t\t[`slds-context-bar__item_divider-${dividerPosition}`]: dividerPosition,\n\t\t})}\n\t>\n\t\t<Button {...props} />\n\t</li>\n);\n\nGlobalNavigationButton.displayName = GLOBAL_NAVIGATION_BAR_BUTTON;\n\n// ### Prop Types\nGlobalNavigationButton.propTypes = {\n\t/**\n\t * Whether the item is active or not.\n\t */\n\tactive: PropTypes.bool,\n\t/**\n\t * Determines position of separating bar.\n\t */\n\tdividerPosition: PropTypes.oneOf(['left', 'right']),\n};\n\n// ### Default Props\nGlobalNavigationButton.defaultProps = {\n\tclassName: 'slds-context-bar__label-action slds-text-body_regular',\n\t// This is a hack since buttons are not supported by Global Navigation\n\t// Bar and have different `font-size` and `line-height` than links or\n\t// dropdowns.\n\tstyle: { lineHeight: 'inherit' },\n\tvariant: 'base',\n};\n\nexport default GlobalNavigationButton;\n"]},"metadata":{},"sourceType":"module"}