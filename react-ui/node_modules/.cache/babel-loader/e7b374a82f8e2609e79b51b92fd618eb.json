{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n// # Tree Item Component\n// Implements the [Tree design pattern](https://www.lightningdesignsystem.com/components/tree/) in React.\n// ### React\n\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport findIndex from 'lodash.findindex';\nimport isFunction from 'lodash.isfunction';\nimport Button from '../../button';\nimport Highlighter from '../../utilities/highlighter';\nimport EventUtil from '../../../utilities/event';\nimport KEYS from '../../../utilities/key-code';\nimport mapKeyEventCallbacks from '../../../utilities/key-callbacks';\nimport { TREE_ITEM } from '../../../utilities/constants';\n\nvar handleSelect = function handleSelect(_ref) {\n  var event = _ref.event,\n      props = _ref.props,\n      fromFocus = _ref.fromFocus;\n  EventUtil.trap(event);\n\n  if (isFunction(props.onSelect)) {\n    props.onSelect({\n      event: event,\n      data: {\n        node: props.node,\n        select: !props.node.selected,\n        treeIndex: props.treeIndex\n      },\n      fromFocus: fromFocus\n    });\n  }\n};\n\nvar findNextNode = function findNextNode(flattenedNodes, node) {\n  var nodes = flattenedNodes.map(function (flattenedNode) {\n    return flattenedNode.node;\n  });\n  var index = findIndex(nodes, {\n    id: node.id\n  });\n  return flattenedNodes[(index + 1) % flattenedNodes.length];\n};\n\nvar findPreviousNode = function findPreviousNode(flattenedNodes, node) {\n  var nodes = flattenedNodes.map(function (flattenedNode) {\n    return flattenedNode.node;\n  });\n  var index = findIndex(nodes, {\n    id: node.id\n  }) - 1;\n\n  if (index < 0) {\n    index += flattenedNodes.length;\n  }\n\n  return flattenedNodes[index];\n};\n\nvar handleKeyDownDown = function handleKeyDownDown(event, props) {\n  if (props.focusedNodeIndex === props.treeIndex) {\n    // Select the next visible node\n    var flattenedNode = findNextNode(props.flattenedNodes, props.node);\n    props.onSelect({\n      event: event,\n      data: {\n        node: flattenedNode.node,\n        select: true,\n        treeIndex: flattenedNode.treeIndex\n      },\n      clearSelectedNodes: true\n    });\n  }\n};\n\nvar handleKeyDownUp = function handleKeyDownUp(event, props) {\n  if (props.focusedNodeIndex === props.treeIndex) {\n    // Go to the previous visible node\n    var flattenedNode = findPreviousNode(props.flattenedNodes, props.node);\n    props.onSelect({\n      event: event,\n      data: {\n        node: flattenedNode.node,\n        select: true,\n        treeIndex: flattenedNode.treeIndex\n      },\n      clearSelectedNodes: true\n    });\n  }\n};\n\nvar handleKeyDownLeft = function handleKeyDownLeft(event, props) {\n  var nodes = props.flattenedNodes.map(function (flattenedNode) {\n    return flattenedNode.node;\n  });\n  var index = findIndex(nodes, {\n    id: props.parent.id\n  });\n\n  if (index !== -1) {\n    props.onExpand({\n      event: event,\n      data: {\n        node: props.parent,\n        select: true,\n        expand: !props.parent.expanded,\n        treeIndex: props.flattenedNodes[index].treeIndex\n      }\n    });\n  }\n};\n\nvar handleKeyDownEnter = function handleKeyDownEnter(event, props) {\n  handleSelect({\n    event: event,\n    props: props\n  });\n};\n\nvar handleKeyDown = function handleKeyDown(event, props) {\n  var _callbacks;\n\n  mapKeyEventCallbacks(event, {\n    callbacks: (_callbacks = {}, _defineProperty(_callbacks, KEYS.DOWN, {\n      callback: function callback(evt) {\n        return handleKeyDownDown(evt, props);\n      }\n    }), _defineProperty(_callbacks, KEYS.UP, {\n      callback: function callback(evt) {\n        return handleKeyDownUp(evt, props);\n      }\n    }), _defineProperty(_callbacks, KEYS.LEFT, {\n      callback: function callback(evt) {\n        return handleKeyDownLeft(evt, props);\n      }\n    }), _defineProperty(_callbacks, KEYS.ENTER, {\n      callback: function callback(evt) {\n        return handleKeyDownEnter(evt, props);\n      }\n    }), _callbacks)\n  });\n};\n\nvar handleFocus = function handleFocus(event, props) {\n  if (!props.treeHasFocus && !props.focusedNodeIndex && event.target === event.currentTarget) {\n    handleSelect({\n      event: event,\n      props: props\n    });\n  }\n};\n\nvar getTabIndex = function getTabIndex(props) {\n  var initialFocus = props.selectedNodeIndexes.length === 0 && props.treeIndex === props.flattenedNodes[0].treeIndex;\n  return props.treeIndex === props.focusedNodeIndex || initialFocus ? 0 : -1;\n};\n/**\n * A Tree Item is a non-branching node in a hierarchical list.\n */\n\n\nvar Item = function Item(props) {\n  var isSelected = props.node.selected;\n  var isFocused = props.treeIndex === props.focusedNodeIndex;\n  return /*#__PURE__*/React.createElement(\"li\", {\n    id: \"\".concat(props.treeId, \"-\").concat(props.node.id),\n    role: \"treeitem\",\n    \"aria-level\": props.level,\n    \"aria-selected\": isSelected ? 'true' : 'false',\n    tabIndex: getTabIndex(props),\n    onKeyDown: function onKeyDown(event) {\n      return handleKeyDown(event, props);\n    },\n    onFocus: function onFocus(event) {\n      return handleFocus(event, props);\n    },\n    onBlur: props.onNodeBlur,\n    ref: function ref(component) {\n      if (props.treeHasFocus && component && isFocused) {\n        component.focus();\n      }\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames('slds-tree__item', {\n      'slds-is-selected': isSelected\n    }),\n    onClick: function onClick(event) {\n      handleSelect({\n        event: event,\n        props: props\n      });\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    tabIndex: \"-1\",\n    \"aria-hidden\": true,\n    assistiveText: {\n      icon: ''\n    },\n    role: \"presentation\",\n    iconCategory: \"utility\",\n    iconName: \"chevronright\",\n    iconSize: \"small\",\n    variant: \"icon\",\n    className: \"slds-m-right_small slds-is-disabled\",\n    disabled: true\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"slds-size_1-of-1\"\n  }, /*#__PURE__*/React.createElement(Highlighter, {\n    search: props.searchTerm,\n    className: \"slds-tree__item-label slds-truncate\"\n  }, props.label))));\n}; // ### Display Name\n// Always use the canonical component name as the React display name.\n\n\nItem.displayName = TREE_ITEM; // ### Prop Types\n\nItem.propTypes = {\n  /**\n   * HTML `id` of the wrapping container element joined with the `id` of the node. This will recursively increase as the tree depth increases.\n   */\n  htmlId: PropTypes.string.isRequired,\n\n  /**\n   * The text of the tree item.\n   */\n  label: PropTypes.oneOfType([PropTypes.node, PropTypes.string]).isRequired,\n\n  /**\n   * The number of nestings. Determines the ARIA level and style alignment.\n   */\n  level: PropTypes.number.isRequired,\n\n  /**\n   * The current node that is being rendered.\n   */\n  node: PropTypes.object.isRequired,\n\n  /**\n   * This function triggers when the expand or collapse icon is clicked or due to keyboard navigation.\n   */\n  onExpand: PropTypes.func.isRequired,\n\n  /**\n   * Function that will run whenever an item or branch is selected (click or keyboard).\n   */\n  onSelect: PropTypes.func,\n\n  /**\n   * Highlights term if found in node label\n   */\n  searchTerm: PropTypes.string,\n\n  /**\n   * Unique id used for a prefix of all tree nodes\n   */\n  treeId: PropTypes.string,\n\n  /**\n   * Location of node (zero index). First node is `0`. It's first child is `0-0`. This can be used to modify your nodes without searching for the node. This index is only valid if the `nodes` prop is the same as at the time of the event.\n   */\n  treeIndex: PropTypes.string,\n\n  /**\n   * Flattened tree structure.\n   */\n  flattenedNodes: PropTypes.arrayOf(PropTypes.object),\n\n  /**\n   * Tree indexes of nodes that are currently selected.\n   */\n  selectedNodeIndexes: PropTypes.arrayOf(PropTypes.string),\n\n  /**\n   * Tree index of the node that is currently focused.\n   */\n  focusedNodeIndex: PropTypes.string,\n\n  /**\n   * Callback for when a node is blurred.\n   */\n  onNodeBlur: PropTypes.func,\n\n  /**\n   * Sets focus on render.\n   */\n  treeHasFocus: PropTypes.bool,\n\n  /**\n   * This node's parent.\n   */\n  parent: PropTypes.object\n};\nItem.defaultProps = {\n  selected: false,\n  selectedNodeIndexes: []\n};\nexport default Item;","map":{"version":3,"sources":["../../../../.tmp-es/components/tree/private/item.jsx"],"names":["handleSelect","event","props","fromFocus","EventUtil","isFunction","data","node","select","treeIndex","findNextNode","nodes","flattenedNode","index","findIndex","id","flattenedNodes","findPreviousNode","handleKeyDownDown","clearSelectedNodes","handleKeyDownUp","handleKeyDownLeft","expand","handleKeyDownEnter","handleKeyDown","mapKeyEventCallbacks","callbacks","KEYS","callback","handleFocus","getTabIndex","initialFocus","Item","isSelected","isFocused","component","classNames","icon","htmlId","PropTypes","label","level","onExpand","onSelect","searchTerm","treeId","selectedNodeIndexes","focusedNodeIndex","onNodeBlur","treeHasFocus","parent","object","selected"],"mappings":"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","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// # Tree Item Component\n\n// Implements the [Tree design pattern](https://www.lightningdesignsystem.com/components/tree/) in React.\n\n// ### React\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport findIndex from 'lodash.findindex';\nimport isFunction from 'lodash.isfunction';\n\nimport Button from '../../button';\nimport Highlighter from '../../utilities/highlighter';\n\nimport EventUtil from '../../../utilities/event';\nimport KEYS from '../../../utilities/key-code';\nimport mapKeyEventCallbacks from '../../../utilities/key-callbacks';\nimport { TREE_ITEM } from '../../../utilities/constants';\n\nconst handleSelect = ({ event, props, fromFocus }) => {\n\tEventUtil.trap(event);\n\tif (isFunction(props.onSelect)) {\n\t\tprops.onSelect({\n\t\t\tevent,\n\t\t\tdata: {\n\t\t\t\tnode: props.node,\n\t\t\t\tselect: !props.node.selected,\n\t\t\t\ttreeIndex: props.treeIndex,\n\t\t\t},\n\t\t\tfromFocus,\n\t\t});\n\t}\n};\n\nconst findNextNode = (flattenedNodes, node) => {\n\tconst nodes = flattenedNodes.map((flattenedNode) => flattenedNode.node);\n\tconst index = findIndex(nodes, { id: node.id });\n\treturn flattenedNodes[(index + 1) % flattenedNodes.length];\n};\n\nconst findPreviousNode = (flattenedNodes, node) => {\n\tconst nodes = flattenedNodes.map((flattenedNode) => flattenedNode.node);\n\tlet index = findIndex(nodes, { id: node.id }) - 1;\n\tif (index < 0) {\n\t\tindex += flattenedNodes.length;\n\t}\n\treturn flattenedNodes[index];\n};\n\nconst handleKeyDownDown = (event, props) => {\n\tif (props.focusedNodeIndex === props.treeIndex) {\n\t\t// Select the next visible node\n\t\tconst flattenedNode = findNextNode(props.flattenedNodes, props.node);\n\t\tprops.onSelect({\n\t\t\tevent,\n\t\t\tdata: {\n\t\t\t\tnode: flattenedNode.node,\n\t\t\t\tselect: true,\n\t\t\t\ttreeIndex: flattenedNode.treeIndex,\n\t\t\t},\n\t\t\tclearSelectedNodes: true,\n\t\t});\n\t}\n};\n\nconst handleKeyDownUp = (event, props) => {\n\tif (props.focusedNodeIndex === props.treeIndex) {\n\t\t// Go to the previous visible node\n\t\tconst flattenedNode = findPreviousNode(props.flattenedNodes, props.node);\n\t\tprops.onSelect({\n\t\t\tevent,\n\t\t\tdata: {\n\t\t\t\tnode: flattenedNode.node,\n\t\t\t\tselect: true,\n\t\t\t\ttreeIndex: flattenedNode.treeIndex,\n\t\t\t},\n\t\t\tclearSelectedNodes: true,\n\t\t});\n\t}\n};\n\nconst handleKeyDownLeft = (event, props) => {\n\tconst nodes = props.flattenedNodes.map((flattenedNode) => flattenedNode.node);\n\tconst index = findIndex(nodes, { id: props.parent.id });\n\tif (index !== -1) {\n\t\tprops.onExpand({\n\t\t\tevent,\n\t\t\tdata: {\n\t\t\t\tnode: props.parent,\n\t\t\t\tselect: true,\n\t\t\t\texpand: !props.parent.expanded,\n\t\t\t\ttreeIndex: props.flattenedNodes[index].treeIndex,\n\t\t\t},\n\t\t});\n\t}\n};\n\nconst handleKeyDownEnter = (event, props) => {\n\thandleSelect({ event, props });\n};\n\nconst handleKeyDown = (event, props) => {\n\tmapKeyEventCallbacks(event, {\n\t\tcallbacks: {\n\t\t\t[KEYS.DOWN]: { callback: (evt) => handleKeyDownDown(evt, props) },\n\t\t\t[KEYS.UP]: { callback: (evt) => handleKeyDownUp(evt, props) },\n\t\t\t[KEYS.LEFT]: { callback: (evt) => handleKeyDownLeft(evt, props) },\n\t\t\t[KEYS.ENTER]: { callback: (evt) => handleKeyDownEnter(evt, props) },\n\t\t},\n\t});\n};\n\nconst handleFocus = (event, props) => {\n\tif (\n\t\t!props.treeHasFocus &&\n\t\t!props.focusedNodeIndex &&\n\t\tevent.target === event.currentTarget\n\t) {\n\t\thandleSelect({ event, props });\n\t}\n};\n\nconst getTabIndex = (props) => {\n\tconst initialFocus =\n\t\tprops.selectedNodeIndexes.length === 0 &&\n\t\tprops.treeIndex === props.flattenedNodes[0].treeIndex;\n\treturn props.treeIndex === props.focusedNodeIndex || initialFocus ? 0 : -1;\n};\n\n/**\n * A Tree Item is a non-branching node in a hierarchical list.\n */\nconst Item = (props) => {\n\tconst isSelected = props.node.selected;\n\tconst isFocused = props.treeIndex === props.focusedNodeIndex;\n\n\treturn (\n\t\t<li\n\t\t\tid={`${props.treeId}-${props.node.id}`}\n\t\t\trole=\"treeitem\"\n\t\t\taria-level={props.level}\n\t\t\taria-selected={isSelected ? 'true' : 'false'}\n\t\t\ttabIndex={getTabIndex(props)}\n\t\t\tonKeyDown={(event) => handleKeyDown(event, props)}\n\t\t\tonFocus={(event) => handleFocus(event, props)}\n\t\t\tonBlur={props.onNodeBlur}\n\t\t\tref={(component) => {\n\t\t\t\tif (props.treeHasFocus && component && isFocused) {\n\t\t\t\t\tcomponent.focus();\n\t\t\t\t}\n\t\t\t}}\n\t\t>\n\t\t\t{/* eslint-disable jsx-a11y/no-static-element-interactions */}\n\t\t\t<div\n\t\t\t\tclassName={classNames('slds-tree__item', {\n\t\t\t\t\t'slds-is-selected': isSelected,\n\t\t\t\t})}\n\t\t\t\tonClick={(event) => {\n\t\t\t\t\thandleSelect({ event, props });\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{/* eslint-enable jsx-a11y/no-static-element-interactions */}\n\t\t\t\t<Button\n\t\t\t\t\ttabIndex=\"-1\"\n\t\t\t\t\taria-hidden\n\t\t\t\t\tassistiveText={{ icon: '' }}\n\t\t\t\t\trole=\"presentation\"\n\t\t\t\t\ticonCategory=\"utility\"\n\t\t\t\t\ticonName=\"chevronright\"\n\t\t\t\t\ticonSize=\"small\"\n\t\t\t\t\tvariant=\"icon\"\n\t\t\t\t\tclassName=\"slds-m-right_small slds-is-disabled\"\n\t\t\t\t\tdisabled\n\t\t\t\t/>\n\t\t\t\t<span className=\"slds-size_1-of-1\">\n\t\t\t\t\t<Highlighter\n\t\t\t\t\t\tsearch={props.searchTerm}\n\t\t\t\t\t\tclassName=\"slds-tree__item-label slds-truncate\"\n\t\t\t\t\t>\n\t\t\t\t\t\t{props.label}\n\t\t\t\t\t</Highlighter>\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t</li>\n\t);\n};\n\n// ### Display Name\n// Always use the canonical component name as the React display name.\nItem.displayName = TREE_ITEM;\n\n// ### Prop Types\nItem.propTypes = {\n\t/**\n\t * HTML `id` of the wrapping container element joined with the `id` of the node. This will recursively increase as the tree depth increases.\n\t */\n\thtmlId: PropTypes.string.isRequired,\n\t/**\n\t * The text of the tree item.\n\t */\n\tlabel: PropTypes.oneOfType([PropTypes.node, PropTypes.string]).isRequired,\n\t/**\n\t * The number of nestings. Determines the ARIA level and style alignment.\n\t */\n\tlevel: PropTypes.number.isRequired,\n\t/**\n\t * The current node that is being rendered.\n\t */\n\tnode: PropTypes.object.isRequired,\n\t/**\n\t * This function triggers when the expand or collapse icon is clicked or due to keyboard navigation.\n\t */\n\tonExpand: PropTypes.func.isRequired,\n\t/**\n\t * Function that will run whenever an item or branch is selected (click or keyboard).\n\t */\n\tonSelect: PropTypes.func,\n\t/**\n\t * Highlights term if found in node label\n\t */\n\tsearchTerm: PropTypes.string,\n\t/**\n\t * Unique id used for a prefix of all tree nodes\n\t */\n\ttreeId: PropTypes.string,\n\t/**\n\t * Location of node (zero index). First node is `0`. It's first child is `0-0`. This can be used to modify your nodes without searching for the node. This index is only valid if the `nodes` prop is the same as at the time of the event.\n\t */\n\ttreeIndex: PropTypes.string,\n\t/**\n\t * Flattened tree structure.\n\t */\n\tflattenedNodes: PropTypes.arrayOf(PropTypes.object),\n\t/**\n\t * Tree indexes of nodes that are currently selected.\n\t */\n\tselectedNodeIndexes: PropTypes.arrayOf(PropTypes.string),\n\t/**\n\t * Tree index of the node that is currently focused.\n\t */\n\tfocusedNodeIndex: PropTypes.string,\n\t/**\n\t * Callback for when a node is blurred.\n\t */\n\tonNodeBlur: PropTypes.func,\n\t/**\n\t * Sets focus on render.\n\t */\n\ttreeHasFocus: PropTypes.bool,\n\t/**\n\t * This node's parent.\n\t */\n\tparent: PropTypes.object,\n};\n\nItem.defaultProps = {\n\tselected: false,\n\tselectedNodeIndexes: [],\n};\n\nexport default Item;\n"]},"metadata":{},"sourceType":"module"}