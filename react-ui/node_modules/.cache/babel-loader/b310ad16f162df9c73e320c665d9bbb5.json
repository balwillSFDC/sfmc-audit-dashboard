{"ast":null,"code":"/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n// Implements the [Progress Ring design pattern](https://lightningdesignsystem.com/components/progress-ring/) in React.\n// Based on SLDS v2.4.5\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nvar PROGRESS_RING_SHAPE = 'SLDSProgressRingShape';\nvar propTypes = {\n  /**\n   * HTML id for component.\n   */\n  id: PropTypes.string,\n\n  /**\n   * CSS class names to be added to the container element. `array`, `object`, or `string` are accepted.\n   */\n  className: PropTypes.oneOfType([PropTypes.array, PropTypes.object, PropTypes.string]),\n\n  /**\n   * Decimal percentage drain of the ring [0.0 - 1.0]\n   */\n  fillPercentDecimal: PropTypes.number,\n\n  /**\n   * Direction that the progress ring \"flows.\" Default is counter-clockwise, or `drain`. For clockwise flow, use `fill`\n   */\n  flowDirection: PropTypes.oneOf(['drain', 'fill']),\n\n  /**\n   * Size of the progress ring. Default is 'medium'\n   */\n  size: PropTypes.oneOf(['medium', 'large'])\n};\nvar defaultProps = {\n  fillPercentDecimal: 0\n};\n/**\n * Generates the string for the D value of the SVG path\n * @param isLong {number} a binary flag if the arc should 'take the long path' (used for > 50% fill)\n * @param arcX {decimal} the arc's x position\n * @param arcY {decimal} the arc's y position\n */\n\nvar getD = function getD(isLong, arcX, arcY) {\n  return \"M 1 0 A 1 1 0 \".concat(isLong, \" 1 \").concat(arcX, \" \").concat(arcY, \" L 0 0\");\n};\n/**\n * Calculates the fill part of the ring\n * @param fillPercent {decimal} Decimal percentage that represents the amount of the ring which is filled with color.\n */\n\n\nvar calculateD = function calculateD(fillPercent) {\n  var isLong = fillPercent > 0.5 ? 1 : 0;\n  var arcX = Math.cos(2 * Math.PI * fillPercent);\n  var arcY = Math.sin(2 * Math.PI * fillPercent);\n  return getD(isLong, arcX, arcY);\n};\n/**\n * Displays the progress ring shape.\n */\n\n\nvar ProgressRingShape = function ProgressRingShape(props) {\n  var progressStyles = {\n    height: props.size === 'large' ? '2rem' : '1.5rem'\n  };\n\n  if (props.flowDirection === 'fill') {\n    progressStyles.transform = 'scaleX(1) rotate(-90deg)';\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: props.id,\n    className: classNames('slds-progress-ring', props.className)\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    \"aria-valuenow\": props.fillPercentDecimal * 100,\n    className: \"slds-progress-ring__progress\",\n    role: \"progressbar\",\n    style: progressStyles\n  }, /*#__PURE__*/React.createElement(\"svg\", {\n    viewBox: \"-1 -1 2 2\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    className: \"slds-progress-ring__path\",\n    d: calculateD(props.fillPercentDecimal)\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"slds-progress-ring__content\"\n  }, props.children));\n};\n\nProgressRingShape.displayName = PROGRESS_RING_SHAPE;\nProgressRingShape.propTypes = propTypes;\nProgressRingShape.defaultProps = defaultProps;\nexport default ProgressRingShape;","map":{"version":3,"sources":["../../../../.tmp-es/components/progress-ring/private/ring-shape.jsx"],"names":["PROGRESS_RING_SHAPE","propTypes","id","PropTypes","className","fillPercentDecimal","flowDirection","size","defaultProps","getD","calculateD","isLong","fillPercent","arcX","Math","arcY","ProgressRingShape","progressStyles","height","props","classNames"],"mappings":"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","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// Implements the [Progress Ring design pattern](https://lightningdesignsystem.com/components/progress-ring/) in React.\n// Based on SLDS v2.4.5\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nconst PROGRESS_RING_SHAPE = 'SLDSProgressRingShape';\n\nconst propTypes = {\n\t/**\n\t * HTML id for component.\n\t */\n\tid: PropTypes.string,\n\t/**\n\t * CSS class names to be added to the container element. `array`, `object`, or `string` are accepted.\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * Decimal percentage drain of the ring [0.0 - 1.0]\n\t */\n\tfillPercentDecimal: PropTypes.number,\n\t/**\n\t * Direction that the progress ring \"flows.\" Default is counter-clockwise, or `drain`. For clockwise flow, use `fill`\n\t */\n\tflowDirection: PropTypes.oneOf(['drain', 'fill']),\n\t/**\n\t * Size of the progress ring. Default is 'medium'\n\t */\n\tsize: PropTypes.oneOf(['medium', 'large']),\n};\n\nconst defaultProps = {\n\tfillPercentDecimal: 0,\n};\n\n/**\n * Generates the string for the D value of the SVG path\n * @param isLong {number} a binary flag if the arc should 'take the long path' (used for > 50% fill)\n * @param arcX {decimal} the arc's x position\n * @param arcY {decimal} the arc's y position\n */\nconst getD = (isLong, arcX, arcY) =>\n\t`M 1 0 A 1 1 0 ${isLong} 1 ${arcX} ${arcY} L 0 0`;\n\n/**\n * Calculates the fill part of the ring\n * @param fillPercent {decimal} Decimal percentage that represents the amount of the ring which is filled with color.\n */\nconst calculateD = (fillPercent) => {\n\tconst isLong = fillPercent > 0.5 ? 1 : 0;\n\tconst arcX = Math.cos(2 * Math.PI * fillPercent);\n\tconst arcY = Math.sin(2 * Math.PI * fillPercent);\n\n\treturn getD(isLong, arcX, arcY);\n};\n\n/**\n * Displays the progress ring shape.\n */\nconst ProgressRingShape = (props) => {\n\tconst progressStyles = { height: props.size === 'large' ? '2rem' : '1.5rem' };\n\n\tif (props.flowDirection === 'fill') {\n\t\tprogressStyles.transform = 'scaleX(1) rotate(-90deg)';\n\t}\n\n\treturn (\n\t\t<div\n\t\t\tid={props.id}\n\t\t\tclassName={classNames('slds-progress-ring', props.className)}\n\t\t>\n\t\t\t<div\n\t\t\t\taria-valuemin=\"0\"\n\t\t\t\taria-valuemax=\"100\"\n\t\t\t\taria-valuenow={props.fillPercentDecimal * 100}\n\t\t\t\tclassName=\"slds-progress-ring__progress\"\n\t\t\t\trole=\"progressbar\"\n\t\t\t\tstyle={progressStyles}\n\t\t\t>\n\t\t\t\t<svg viewBox=\"-1 -1 2 2\">\n\t\t\t\t\t<path\n\t\t\t\t\t\tclassName=\"slds-progress-ring__path\"\n\t\t\t\t\t\td={calculateD(props.fillPercentDecimal)}\n\t\t\t\t\t/>\n\t\t\t\t</svg>\n\t\t\t</div>\n\t\t\t<div className=\"slds-progress-ring__content\">{props.children}</div>\n\t\t</div>\n\t);\n};\n\nProgressRingShape.displayName = PROGRESS_RING_SHAPE;\nProgressRingShape.propTypes = propTypes;\nProgressRingShape.defaultProps = defaultProps;\n\nexport default ProgressRingShape;\n"]},"metadata":{},"sourceType":"module"}