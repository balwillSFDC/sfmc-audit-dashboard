{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n// ### React\n\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '../../../components/button';\nimport { CAROUSEL_NAVIGATORS } from '../../../utilities/constants';\n/**\n * previousNextCarouselNavigator is used to display previous/next navigation items of the carousel\n */\n\nvar previousNextCarouselNavigator = function previousNextCarouselNavigator(props) {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"slds-carousel__col-center slds-is-absolute\",\n    style: _objectSpread(_objectSpread({}, props.inlineStyle), {}, {\n      margin: '-12px 0 0',\n      top: '50%'\n    })\n  }, /*#__PURE__*/React.createElement(Button, {\n    assistiveText: {\n      icon: props.assistiveText\n    },\n    className: \"slds-button_icon slds-carousel__button\",\n    disabled: props.isDisabled,\n    iconCategory: \"utility\",\n    iconName: props.iconName,\n    iconVariant: \"border-filled\",\n    iconSize: \"small\",\n    onClick: props.onClick,\n    variant: \"icon\"\n  }));\n}; // /assets/icons/utility-sprite/svg/symbols.svg#right\n\n\npreviousNextCarouselNavigator.displayName = CAROUSEL_NAVIGATORS; // ### Prop Types\n\npreviousNextCarouselNavigator.propTypes = {\n  /**\n   * Description of the previous/next navigation icons for screen-readers.\n   */\n  assistiveText: PropTypes.string,\n\n  /**\n   * Name of icon displayed within the navigation button\n   */\n  iconName: PropTypes.oneOf(['chevronleft', 'chevronright']),\n\n  /**\n   * Determines where the navigator indicator has been disabled\n   */\n  isDisabled: PropTypes.bool,\n\n  /**\n   * Additional styles to be applied to the container\n   */\n  inlineStyle: PropTypes.object,\n\n  /**\n   * Triggered when the indicator is clicked.\n   */\n  onClick: PropTypes.func\n};\nexport default previousNextCarouselNavigator;","map":{"version":3,"sources":["../../../../.tmp-es/components/carousel/private/previous-next-carousel-navigator.jsx"],"names":["previousNextCarouselNavigator","props","margin","top","icon","assistiveText","PropTypes","iconName","isDisabled","inlineStyle","onClick","func"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;AAEA;;;AACA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;AAEA,OAAA,MAAA,MAAA,4BAAA;AACA,SAAA,mBAAA,QAAA,8BAAA;AAEA;AACA;AACA;;AACA,IAAMA,6BAA6B,GAAG,SAAhCA,6BAAgC,CAAA,KAAA,EAAA;AAAA,SAAA,aACrC,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACC,IAAA,SAAS,EADV,4CAAA;AAEC,IAAA,KAAK,EAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAOC,KAAK,CAAZ,WAAA,CAAA,EAAA,EAAA,EAAA;AAA0BC,MAAAA,MAAM,EAAhC,WAAA;AAA+CC,MAAAA,GAAG,EAAE;AAApD,KAAA;AAFN,GAAA,EAAA,aAIC,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AACC,IAAA,aAAa,EAAE;AAAEC,MAAAA,IAAI,EAAEH,KAAK,CAACI;AAAd,KADhB;AAEC,IAAA,SAAS,EAFV,wCAAA;AAGC,IAAA,QAAQ,EAAEJ,KAAK,CAHhB,UAAA;AAIC,IAAA,YAAY,EAJb,SAAA;AAKC,IAAA,QAAQ,EAAEA,KAAK,CALhB,QAAA;AAMC,IAAA,WAAW,EANZ,eAAA;AAOC,IAAA,QAAQ,EAPT,OAAA;AAQC,IAAA,OAAO,EAAEA,KAAK,CARf,OAAA;AASC,IAAA,OAAO,EAAC;AATT,GAAA,CAJD,CADqC;AAAtC,CAAA,C,CAkBA;;;AACAD,6BAA6B,CAA7BA,WAAAA,GAAAA,mBAAAA,C,CAEA;;AACAA,6BAA6B,CAA7BA,SAAAA,GAA0C;AACzC;AACD;AACA;AACCK,EAAAA,aAAa,EAAEC,SAAS,CAJiB,MAAA;;AAKzC;AACD;AACA;AACCC,EAAAA,QAAQ,EAAED,SAAS,CAATA,KAAAA,CAAgB,CAAA,aAAA,EARe,cAQf,CAAhBA,CAR+B;;AASzC;AACD;AACA;AACCE,EAAAA,UAAU,EAAEF,SAAS,CAZoB,IAAA;;AAazC;AACD;AACA;AACCG,EAAAA,WAAW,EAAEH,SAAS,CAhBmB,MAAA;;AAiBzC;AACD;AACA;AACCI,EAAAA,OAAO,EAAEJ,SAAS,CAACK;AApBsB,CAA1CX;AAuBA,eAAA,6BAAA","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// ### React\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Button from '../../../components/button';\nimport { CAROUSEL_NAVIGATORS } from '../../../utilities/constants';\n\n/**\n * previousNextCarouselNavigator is used to display previous/next navigation items of the carousel\n */\nconst previousNextCarouselNavigator = (props) => (\n\t<div\n\t\tclassName=\"slds-carousel__col-center slds-is-absolute\"\n\t\tstyle={{ ...props.inlineStyle, margin: '-12px 0 0', top: '50%' }}\n\t>\n\t\t<Button\n\t\t\tassistiveText={{ icon: props.assistiveText }}\n\t\t\tclassName=\"slds-button_icon slds-carousel__button\"\n\t\t\tdisabled={props.isDisabled}\n\t\t\ticonCategory=\"utility\"\n\t\t\ticonName={props.iconName}\n\t\t\ticonVariant=\"border-filled\"\n\t\t\ticonSize=\"small\"\n\t\t\tonClick={props.onClick}\n\t\t\tvariant=\"icon\"\n\t\t/>\n\t</div>\n);\n// /assets/icons/utility-sprite/svg/symbols.svg#right\npreviousNextCarouselNavigator.displayName = CAROUSEL_NAVIGATORS;\n\n// ### Prop Types\npreviousNextCarouselNavigator.propTypes = {\n\t/**\n\t * Description of the previous/next navigation icons for screen-readers.\n\t */\n\tassistiveText: PropTypes.string,\n\t/**\n\t * Name of icon displayed within the navigation button\n\t */\n\ticonName: PropTypes.oneOf(['chevronleft', 'chevronright']),\n\t/**\n\t * Determines where the navigator indicator has been disabled\n\t */\n\tisDisabled: PropTypes.bool,\n\t/**\n\t * Additional styles to be applied to the container\n\t */\n\tinlineStyle: PropTypes.object,\n\t/**\n\t * Triggered when the indicator is clicked.\n\t */\n\tonClick: PropTypes.func,\n};\n\nexport default previousNextCarouselNavigator;\n"]},"metadata":{},"sourceType":"module"}