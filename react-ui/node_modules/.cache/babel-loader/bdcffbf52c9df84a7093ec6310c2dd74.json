{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n// # Panel - Filter variant\n// Implements the [Panel design pattern](https://www.lightningdesignsystem.com/components/panels) in React.\n// Based on SLDS v2.2.0-rc.1\n// ## Dependencies\n// ### React\n\n\nimport React from 'react';\nimport PropTypes from 'prop-types'; // ### classNames\n\nimport classNames from 'classnames'; // ## Constants\n\nimport { PANEL } from '../../utilities/constants';\n/**\n * A panel provides detailed contextual information or contextual filtering options. [Filter](/components/filters/) component should be used as children. Menus within a Filter Popover will need to not have \"portal mounts\" and be inline. */\n\nvar Panel = /*#__PURE__*/function (_React$Component) {\n  _inherits(Panel, _React$Component);\n\n  var _super = _createSuper(Panel);\n\n  function Panel() {\n    _classCallCheck(this, Panel);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Panel, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: classNames('slds-panel', 'slds-grid', 'slds-grid_vertical', 'slds-nowrap', {\n          'slds-panel_filters': this.props.variant === 'filters'\n        }, this.props.className)\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"slds-form_stacked slds-grow slds-scrollable_y slds-grid slds-grid_vertical\"\n      }, this.props.children));\n    }\n  }]);\n\n  return Panel;\n}(React.Component);\n\nPanel.displayName = PANEL;\nPanel.propTypes = {\n  /**\n   * The contents of the panel\n   */\n  children: PropTypes.node,\n\n  /**\n   * CSS classes to be added to `slds-panel`.\n   */\n  className: PropTypes.oneOfType([PropTypes.array, PropTypes.object, PropTypes.string]),\n\n  /**\n   * The type of panel\n   */\n  variant: PropTypes.oneOf(['filters'])\n};\nexport default Panel;","map":{"version":3,"sources":["../../../.tmp-es/components/panel/index.jsx"],"names":["Panel","React","Component","classNames","children","PropTypes","className","variant"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;AAEA;AAEA;AACA;AAEA;AAEA;;;AACA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA,C,CAEA;;AACA,OAAA,UAAA,MAAA,YAAA,C,CAEA;;AACA,SAAA,KAAA,QAAA,2BAAA;AAEA;AACA;;IACMA,K;;;;;;;;;;;;;6BACI;AACR,aAAA,aACC,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACC,QAAA,SAAS,EAAEG,UAAU,CAAA,YAAA,EAAA,WAAA,EAAA,oBAAA,EAAA,aAAA,EAKpB;AACC,gCAAsB,KAAA,KAAA,CAAA,OAAA,KAAuB;AAD9C,SALoB,EAQpB,KAAA,KAAA,CARoB,SAAA;AADtB,OAAA,EAAA,aAYC,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,QAAA,SAAS,EAAC;AAAf,OAAA,EACE,KAAA,KAAA,CAdJ,QAaE,CAZD,CADD;AAkBA;;;;EApBkBF,KAAK,CAACC,S;;AAuB1BF,KAAK,CAALA,WAAAA,GAAAA,KAAAA;AAEAA,KAAK,CAALA,SAAAA,GAAkB;AACjB;AACD;AACA;AACCI,EAAAA,QAAQ,EAAEC,SAAS,CAJF,IAAA;;AAKjB;AACD;AACA;AACCC,EAAAA,SAAS,EAAED,SAAS,CAATA,SAAAA,CAAoB,CAC9BA,SAAS,CADqB,KAAA,EAE9BA,SAAS,CAFqB,MAAA,EAG9BA,SAAS,CAXO,MAQc,CAApBA,CARM;;AAajB;AACD;AACA;AACCE,EAAAA,OAAO,EAAEF,SAAS,CAATA,KAAAA,CAAgB,CAAhBA,SAAgB,CAAhBA;AAhBQ,CAAlBL;AAmBA,eAAA,KAAA","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// # Panel - Filter variant\n\n// Implements the [Panel design pattern](https://www.lightningdesignsystem.com/components/panels) in React.\n// Based on SLDS v2.2.0-rc.1\n\n// ## Dependencies\n\n// ### React\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n// ### classNames\nimport classNames from 'classnames';\n\n// ## Constants\nimport { PANEL } from '../../utilities/constants';\n\n/**\n * A panel provides detailed contextual information or contextual filtering options. [Filter](/components/filters/) component should be used as children. Menus within a Filter Popover will need to not have \"portal mounts\" and be inline. */\nclass Panel extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<div\n\t\t\t\tclassName={classNames(\n\t\t\t\t\t'slds-panel',\n\t\t\t\t\t'slds-grid',\n\t\t\t\t\t'slds-grid_vertical',\n\t\t\t\t\t'slds-nowrap',\n\t\t\t\t\t{\n\t\t\t\t\t\t'slds-panel_filters': this.props.variant === 'filters',\n\t\t\t\t\t},\n\t\t\t\t\tthis.props.className\n\t\t\t\t)}\n\t\t\t>\n\t\t\t\t<div className=\"slds-form_stacked slds-grow slds-scrollable_y slds-grid slds-grid_vertical\">\n\t\t\t\t\t{this.props.children}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nPanel.displayName = PANEL;\n\nPanel.propTypes = {\n\t/**\n\t * The contents of the panel\n\t */\n\tchildren: PropTypes.node,\n\t/**\n\t * CSS classes to be added to `slds-panel`.\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * The type of panel\n\t */\n\tvariant: PropTypes.oneOf(['filters']),\n};\n\nexport default Panel;\n"]},"metadata":{},"sourceType":"module"}