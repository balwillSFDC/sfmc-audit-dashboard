{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n// ### React\n\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Input from '../input';\nimport InputIcon from '../icon/input-icon';\nimport { CARD_FILTER } from '../../utilities/constants';\n/**\n * A default filter or search input for Cards that contain items.\n */\n\nvar Filter = function Filter(props) {\n  var id = props.id,\n      placeholder = props.placeholder,\n      onChange = props.onChange,\n      rest = _objectWithoutProperties(props, [\"id\", \"placeholder\", \"onChange\"]);\n\n  return /*#__PURE__*/React.createElement(Input, _extends({}, rest, {\n    assistiveText: {\n      label: placeholder\n    },\n    iconLeft: /*#__PURE__*/React.createElement(InputIcon, {\n      name: \"search\",\n      category: \"utility\"\n    }),\n    id: id,\n    onChange: onChange,\n    placeholder: placeholder\n  }));\n}; // ### Display Name\n// Always use the canonical component name as the React display name.\n\n\nFilter.displayName = CARD_FILTER; // ### Prop Types\n\nFilter.propTypes = {\n  /**\n   * The HTML `id` from the card with a suffixe.\n   */\n  id: PropTypes.string,\n\n  /**\n   * This callback fires when the input changes.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Text present in input until the user enters text. This text will also be used for a visually hidden label on the filter `input` element for accessibility.\n   */\n  placeholder: PropTypes.string.isRequired\n};\nFilter.defaultProps = {\n  placeholder: 'Find in List'\n};\nexport default Filter;","map":{"version":3,"sources":["../../../.tmp-es/components/card/filter.jsx"],"names":["Filter","id","placeholder","onChange","rest","props","label","PropTypes","isRequired"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;AAEA;;;AACA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;AAEA,OAAA,KAAA,MAAA,UAAA;AACA,OAAA,SAAA,MAAA,oBAAA;AAEA,SAAA,WAAA,QAAA,2BAAA;AAEA;AACA;AACA;;AACA,IAAMA,MAAM,GAAG,SAATA,MAAS,CAAA,KAAA,EAAW;AAAA,MACjBC,EADiB,GACsBI,KADtB,CAAA,EAAA;AAAA,MACbH,WADa,GACsBG,KADtB,CAAA,WAAA;AAAA,MACAF,QADA,GACsBE,KADtB,CAAA,QAAA;AAAA,MACaD,IADb,GAAA,wBAAA,CAAA,KAAA,EAAA,CAAA,IAAA,EAAA,aAAA,EAAA,UAAA,CAAA,CAAA;;AAGzB,SAAA,aACC,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAEC,IAAA,aAAa,EAAE;AAAEE,MAAAA,KAAK,EAAEJ;AAAT,KAFhB;AAGC,IAAA,QAAQ,EAAA,aAAE,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AAAW,MAAA,IAAI,EAAf,QAAA;AAAyB,MAAA,QAAQ,EAAC;AAAlC,KAAA,CAHX;AAIC,IAAA,EAAE,EAJH,EAAA;AAKC,IAAA,QAAQ,EALT,QAAA;AAMC,IAAA,WAAW,EAAEA;AANd,GAAA,CAAA,CADD;AAHD,CAAA,C,CAeA;AACA;;;AACAF,MAAM,CAANA,WAAAA,GAAAA,WAAAA,C,CAEA;;AACAA,MAAM,CAANA,SAAAA,GAAmB;AAClB;AACD;AACA;AACCC,EAAAA,EAAE,EAAEM,SAAS,CAJK,MAAA;;AAKlB;AACD;AACA;AACCJ,EAAAA,QAAQ,EAAEI,SAAS,CARD,IAAA;;AASlB;AACD;AACA;AACCL,EAAAA,WAAW,EAAEK,SAAS,CAATA,MAAAA,CAAiBC;AAZZ,CAAnBR;AAeAA,MAAM,CAANA,YAAAA,GAAsB;AACrBE,EAAAA,WAAW,EAAE;AADQ,CAAtBF;AAIA,eAAA,MAAA","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// ### React\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Input from '../input';\nimport InputIcon from '../icon/input-icon';\n\nimport { CARD_FILTER } from '../../utilities/constants';\n\n/**\n * A default filter or search input for Cards that contain items.\n */\nconst Filter = (props) => {\n\tconst { id, placeholder, onChange, ...rest } = props;\n\n\treturn (\n\t\t<Input\n\t\t\t{...rest}\n\t\t\tassistiveText={{ label: placeholder }}\n\t\t\ticonLeft={<InputIcon name=\"search\" category=\"utility\" />}\n\t\t\tid={id}\n\t\t\tonChange={onChange}\n\t\t\tplaceholder={placeholder}\n\t\t/>\n\t);\n};\n\n// ### Display Name\n// Always use the canonical component name as the React display name.\nFilter.displayName = CARD_FILTER;\n\n// ### Prop Types\nFilter.propTypes = {\n\t/**\n\t * The HTML `id` from the card with a suffixe.\n\t */\n\tid: PropTypes.string,\n\t/**\n\t * This callback fires when the input changes.\n\t */\n\tonChange: PropTypes.func,\n\t/**\n\t * Text present in input until the user enters text. This text will also be used for a visually hidden label on the filter `input` element for accessibility.\n\t */\n\tplaceholder: PropTypes.string.isRequired,\n};\n\nFilter.defaultProps = {\n\tplaceholder: 'Find in List',\n};\n\nexport default Filter;\n"]},"metadata":{},"sourceType":"module"}