{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n/* eslint-disable jsx-a11y/aria-activedescendant-has-tabindex */\n// ### React\n\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Spinner from '../../../components/spinner';\nimport getAriaProps from '../../../utilities/get-aria-props';\nvar COUNTER = 'counter';\nvar propTypes = {\n  'aria-activedescendant': PropTypes.string,\n  'aria-autocomplete': PropTypes.string,\n\n  /**\n   * An HTML ID that is shared with ARIA-supported devices with the\n   * `aria-controls` attribute in order to relate the input with\n   * another region of the page. An example would be a select box\n   * that shows or hides a panel.\n   */\n  'aria-controls': PropTypes.string,\n  'aria-describedby': PropTypes.string,\n  'aria-expanded': PropTypes.bool,\n  'aria-haspopup': PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n  'aria-labelledby': PropTypes.string,\n\n  /**\n   * An HTML ID that is shared with ARIA-supported devices with the\n   * `aria-controls` attribute in order to relate the input with\n   * another region of the page. An example would be a search field\n   * that shows search results.\n   */\n  'aria-owns': PropTypes.string,\n  'aria-required': PropTypes.bool,\n\n  /**\n   * **Assistive text for accessibility.**\n   * This object is merged with the default props object on every render.\n   * * `spinner`: Assistive text on the spinner.\n   */\n  assistiveText: PropTypes.shape({\n    spinner: PropTypes.string\n  }),\n\n  /**\n   * Disabled brower's autocomplete when \"off\" is used.\n   */\n  autoComplete: PropTypes.string,\n\n  /**\n   * Class names to be added to the `input` element.\n   */\n  className: PropTypes.oneOfType([PropTypes.array, PropTypes.object, PropTypes.string]),\n\n  /**\n   * Class names to be added to the outer container `div` of the input.\n   */\n  containerClassName: PropTypes.oneOfType([PropTypes.array, PropTypes.object, PropTypes.string]),\n\n  /**\n   * Props to be added to the outer container `div` of the input (excluding `containerClassName`).\n   */\n  containerProps: PropTypes.object,\n\n  /**\n   * Disables the input and prevents editing the contents.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Displays text or node to the left of the input. This follows the fixed text input UX pattern.\n   */\n  fixedTextLeft: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n\n  /**\n   * Displays text or node to the right of the input. This follows the fixed text input UX pattern.\n   */\n  fixedTextRight: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n\n  /**\n   * If true, loading spinner appears inside input on right hand side.\n   */\n  hasSpinner: PropTypes.bool,\n\n  /**\n   * Left aligned icon, must be instance of `design-system-react/components/icon/input-icon`\n   */\n  iconLeft: PropTypes.node,\n\n  /**\n   * Right aligned icon, must be instance of `design-system-react/components/icon/input-icon`\n   */\n  iconRight: PropTypes.node,\n\n  /**\n   * Every input must have a unique ID in order to support keyboard navigation and ARIA support.\n   */\n  id: PropTypes.string.isRequired,\n\n  /**\n   * This callback exposes the input reference / DOM node to parent components. `<Parent inputRef={(inputComponent) => this.input = inputComponent} />\n   */\n  inputRef: PropTypes.func,\n\n  /**\n   * Displays the value of the input statically. This follows the static input UX pattern.\n   */\n  isStatic: PropTypes.bool,\n\n  /**\n   * This label appears above the input.\n   */\n  label: PropTypes.string,\n  onBlur: PropTypes.func,\n\n  /**\n   * This callback fires when the input changes. The synthetic React event will be the first parameter to the callback. You will probably want to reference `event.target.value` in your callback. No custom data object is provided.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * This event fires when the input is clicked.\n   */\n  onClick: PropTypes.func,\n  onFocus: PropTypes.func,\n  onInput: PropTypes.func,\n  onInvalid: PropTypes.func,\n  onKeyDown: PropTypes.func,\n  onKeyPress: PropTypes.func,\n  onKeyUp: PropTypes.func,\n  onSelect: PropTypes.func,\n  onSubmit: PropTypes.func,\n\n  /**\n   * Text that will appear in an empty input.\n   */\n  placeholder: PropTypes.string,\n  minLength: PropTypes.string,\n\n  /**\n   * Specifies minimum accepted value for an input of type \"number\"\n   */\n  minValue: PropTypes.number,\n  maxLength: PropTypes.string,\n\n  /**\n   * Specifies maximum accepted value for an input of type \"number\"\n   */\n  maxValue: PropTypes.number,\n\n  /**\n   * Name of the submitted form parameter.\n   */\n  name: PropTypes.string,\n\n  /**\n   * Specifies `readOnly` for `input` node.\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * Highlights the input as a required field (does not perform any validation).\n   */\n  required: PropTypes.bool,\n\n  /**\n   * `role` to be added to `input` node\n   */\n  role: PropTypes.string,\n\n  /**\n   * Determines the step size upon increment or decrement. Can be set to decimal values.\n   */\n  step: PropTypes.number,\n\n  /**\n   * Style object to be added to `input` node\n   */\n  style: PropTypes.object,\n\n  /**\n   * Specifies `tabIndex` for `input` node\n   */\n  tabIndex: PropTypes.string,\n\n  /**\n   * The `<Input>` element includes support for all HTML5 types.\n   */\n  type: PropTypes.oneOf(['text', 'password', 'datetime', 'datetime-local', 'date', 'month', 'time', 'week', 'number', 'email', 'url', 'search', 'tel', 'color']),\n\n  /**\n   * The input is a controlled component, and will always display this value.\n   */\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * Which UX pattern of input? The default is `base` while other option is `counter`\n   */\n  variant: PropTypes.oneOf(['base', COUNTER]),\n\n  /**\n   * This is the initial value of an uncontrolled form element and is present only to provide\n   * compatibility with hybrid framework applications that are not entirely React. It should only\n   * be used in an application without centralized state (Redux, Flux). \"Controlled components\"\n   * with centralized state is highly recommended.\n   * See [Code Overview](https://github.com/salesforce/design-system-react/blob/master/docs/codebase-overview.md#controlled-and-uncontrolled-components) for more information.\n   */\n  defaultValue: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n};\nvar defaultProps = {\n  assistiveText: {\n    spinner: 'Loading ...'\n  },\n  type: 'text'\n};\n/*\n * This component was created to allow the DIV wrapped input to be used within other components such as combobox. This components API is not public.\n */\n\nvar InnerInput = function InnerInput(props) {\n  var ariaProps = getAriaProps(props);\n  ariaProps['aria-describedby'] = props.hasSpinner ? \"loading-status-icon \".concat(props['aria-describedby']) : props['aria-describedby'];\n\n  var _props$containerProps = props.containerProps,\n      containerClassName = _props$containerProps.className,\n      containerProps = _objectWithoutProperties(_props$containerProps, [\"className\"]);\n\n  var assistiveText = _objectSpread(_objectSpread({}, defaultProps.assistiveText), props.assistiveText);\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: classNames(containerClassName, {\n      'slds-input-has-icon': props.variant !== COUNTER && (props.iconLeft || props.iconRight),\n      'slds-input-has-icon_left': props.iconLeft && !props.iconRight,\n      'slds-input-has-icon_right': !props.iconLeft && props.iconRight,\n      'slds-input-has-icon_left-right': props.variant !== COUNTER && props.iconLeft && props.iconRight,\n      'slds-input-has-fixed-addon': props.fixedTextLeft || props.fixedTextRight,\n      'slds-has-divider_bottom': props.isStatic\n    })\n  }, containerProps), props.iconLeft && props.iconLeft, props.fixedTextLeft && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"slds-form-element__addon\"\n  }, props.fixedTextLeft), !props.isStatic && /*#__PURE__*/React.createElement(\"input\", _extends({\n    autoComplete: props.autoComplete,\n    className: classNames('slds-input', {\n      'slds-text-align_left': props.variant === COUNTER && props.readOnly\n    }, props.className),\n    disabled: props.disabled,\n    id: props.id,\n    min: props.minValue,\n    minLength: props.minLength,\n    max: props.maxValue,\n    maxLength: props.maxLength,\n    name: props.name,\n    onBlur: props.onBlur,\n    onChange: props.onChange,\n    onClick: props.onClick,\n    onFocus: props.onFocus,\n    onInput: props.onInput,\n    onInvalid: props.onInvalid,\n    onKeyDown: props.onKeyDown,\n    onKeyPress: props.onKeyPress,\n    onKeyUp: props.onKeyUp,\n    onSelect: props.onSelect,\n    onSubmit: props.onSubmit,\n    placeholder: props.placeholder,\n    readOnly: props.readOnly,\n    ref: props.inputRef,\n    required: props.required,\n    role: props.role,\n    step: props.step,\n    style: props.style,\n    tabIndex: props.tabIndex,\n    type: props.type\n  }, ariaProps, props.value !== undefined ? {\n    value: props.value\n  } : {\n    defaultValue: props.defaultValue\n  })), props.hasSpinner ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"slds-input__icon-group slds-input__icon-group_right\"\n  }, /*#__PURE__*/React.createElement(Spinner, {\n    assistiveText: {\n      label: assistiveText.spinner\n    },\n    id: \"loading-status-icon\",\n    isInput: true,\n    size: \"x-small\",\n    variant: \"brand\"\n  }), props.iconRight && props.iconRight) : props.iconRight && props.iconRight, props.fixedTextRight && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"slds-form-element__addon\"\n  }, props.fixedTextRight), props.isStatic && /*#__PURE__*/React.createElement(\"span\", {\n    className: classNames('slds-form-element__static', 'slds-grid', {\n      'slds-grid_align-spread': props.variant !== COUNTER\n    }),\n    onClick: props.onClick\n  }, props.value, props.inlineEditTrigger));\n};\n\nInnerInput.displayName = 'SLDSInnerInput';\nInnerInput.propTypes = propTypes;\nInnerInput.defaultProps = defaultProps;\nexport default InnerInput;","map":{"version":3,"sources":["../../../../.tmp-es/components/input/private/inner-input.jsx"],"names":["COUNTER","propTypes","PropTypes","assistiveText","spinner","string","autoComplete","className","containerClassName","containerProps","disabled","fixedTextLeft","fixedTextRight","hasSpinner","iconLeft","iconRight","id","inputRef","isStatic","label","onBlur","onChange","onClick","onFocus","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onSelect","onSubmit","placeholder","minLength","minValue","maxLength","maxValue","name","readOnly","required","role","step","style","tabIndex","type","value","variant","defaultValue","defaultProps","InnerInput","ariaProps","getAriaProps","props","classNames"],"mappings":"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","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n/* eslint-disable jsx-a11y/aria-activedescendant-has-tabindex */\n\n// ### React\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport classNames from 'classnames';\nimport Spinner from '../../../components/spinner';\n\nimport getAriaProps from '../../../utilities/get-aria-props';\n\nconst COUNTER = 'counter';\n\nconst propTypes = {\n\t'aria-activedescendant': PropTypes.string,\n\t'aria-autocomplete': PropTypes.string,\n\t/**\n\t * An HTML ID that is shared with ARIA-supported devices with the\n\t * `aria-controls` attribute in order to relate the input with\n\t * another region of the page. An example would be a select box\n\t * that shows or hides a panel.\n\t */\n\t'aria-controls': PropTypes.string,\n\t'aria-describedby': PropTypes.string,\n\t'aria-expanded': PropTypes.bool,\n\t'aria-haspopup': PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n\t'aria-labelledby': PropTypes.string,\n\t/**\n\t * An HTML ID that is shared with ARIA-supported devices with the\n\t * `aria-controls` attribute in order to relate the input with\n\t * another region of the page. An example would be a search field\n\t * that shows search results.\n\t */\n\t'aria-owns': PropTypes.string,\n\t'aria-required': PropTypes.bool,\n\t/**\n\t * **Assistive text for accessibility.**\n\t * This object is merged with the default props object on every render.\n\t * * `spinner`: Assistive text on the spinner.\n\t */\n\tassistiveText: PropTypes.shape({\n\t\tspinner: PropTypes.string,\n\t}),\n\t/**\n\t * Disabled brower's autocomplete when \"off\" is used.\n\t */\n\tautoComplete: PropTypes.string,\n\t/**\n\t * Class names to be added to the `input` element.\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * Class names to be added to the outer container `div` of the input.\n\t */\n\tcontainerClassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * Props to be added to the outer container `div` of the input (excluding `containerClassName`).\n\t */\n\tcontainerProps: PropTypes.object,\n\t/**\n\t * Disables the input and prevents editing the contents.\n\t */\n\tdisabled: PropTypes.bool,\n\t/**\n\t * Displays text or node to the left of the input. This follows the fixed text input UX pattern.\n\t */\n\tfixedTextLeft: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n\t/**\n\t * Displays text or node to the right of the input. This follows the fixed text input UX pattern.\n\t */\n\tfixedTextRight: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n\t/**\n\t * If true, loading spinner appears inside input on right hand side.\n\t */\n\thasSpinner: PropTypes.bool,\n\t/**\n\t * Left aligned icon, must be instance of `design-system-react/components/icon/input-icon`\n\t */\n\ticonLeft: PropTypes.node,\n\t/**\n\t * Right aligned icon, must be instance of `design-system-react/components/icon/input-icon`\n\t */\n\ticonRight: PropTypes.node,\n\t/**\n\t * Every input must have a unique ID in order to support keyboard navigation and ARIA support.\n\t */\n\tid: PropTypes.string.isRequired,\n\t/**\n\t * This callback exposes the input reference / DOM node to parent components. `<Parent inputRef={(inputComponent) => this.input = inputComponent} />\n\t */\n\tinputRef: PropTypes.func,\n\t/**\n\t * Displays the value of the input statically. This follows the static input UX pattern.\n\t */\n\tisStatic: PropTypes.bool,\n\t/**\n\t * This label appears above the input.\n\t */\n\tlabel: PropTypes.string,\n\tonBlur: PropTypes.func,\n\t/**\n\t * This callback fires when the input changes. The synthetic React event will be the first parameter to the callback. You will probably want to reference `event.target.value` in your callback. No custom data object is provided.\n\t */\n\tonChange: PropTypes.func,\n\t/**\n\t * This event fires when the input is clicked.\n\t */\n\tonClick: PropTypes.func,\n\tonFocus: PropTypes.func,\n\tonInput: PropTypes.func,\n\tonInvalid: PropTypes.func,\n\tonKeyDown: PropTypes.func,\n\tonKeyPress: PropTypes.func,\n\tonKeyUp: PropTypes.func,\n\tonSelect: PropTypes.func,\n\tonSubmit: PropTypes.func,\n\t/**\n\t * Text that will appear in an empty input.\n\t */\n\tplaceholder: PropTypes.string,\n\tminLength: PropTypes.string,\n\t/**\n\t * Specifies minimum accepted value for an input of type \"number\"\n\t */\n\tminValue: PropTypes.number,\n\tmaxLength: PropTypes.string,\n\t/**\n\t * Specifies maximum accepted value for an input of type \"number\"\n\t */\n\tmaxValue: PropTypes.number,\n\t/**\n\t * Name of the submitted form parameter.\n\t */\n\tname: PropTypes.string,\n\t/**\n\t * Specifies `readOnly` for `input` node.\n\t */\n\treadOnly: PropTypes.bool,\n\t/**\n\t * Highlights the input as a required field (does not perform any validation).\n\t */\n\trequired: PropTypes.bool,\n\t/**\n\t * `role` to be added to `input` node\n\t */\n\trole: PropTypes.string,\n\t/**\n\t * Determines the step size upon increment or decrement. Can be set to decimal values.\n\t */\n\tstep: PropTypes.number,\n\t/**\n\t * Style object to be added to `input` node\n\t */\n\tstyle: PropTypes.object,\n\t/**\n\t * Specifies `tabIndex` for `input` node\n\t */\n\ttabIndex: PropTypes.string,\n\t/**\n\t * The `<Input>` element includes support for all HTML5 types.\n\t */\n\ttype: PropTypes.oneOf([\n\t\t'text',\n\t\t'password',\n\t\t'datetime',\n\t\t'datetime-local',\n\t\t'date',\n\t\t'month',\n\t\t'time',\n\t\t'week',\n\t\t'number',\n\t\t'email',\n\t\t'url',\n\t\t'search',\n\t\t'tel',\n\t\t'color',\n\t]),\n\t/**\n\t * The input is a controlled component, and will always display this value.\n\t */\n\tvalue: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\t/**\n\t * Which UX pattern of input? The default is `base` while other option is `counter`\n\t */\n\tvariant: PropTypes.oneOf(['base', COUNTER]),\n\t/**\n\t * This is the initial value of an uncontrolled form element and is present only to provide\n\t * compatibility with hybrid framework applications that are not entirely React. It should only\n\t * be used in an application without centralized state (Redux, Flux). \"Controlled components\"\n\t * with centralized state is highly recommended.\n\t * See [Code Overview](https://github.com/salesforce/design-system-react/blob/master/docs/codebase-overview.md#controlled-and-uncontrolled-components) for more information.\n\t */\n\tdefaultValue: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n};\n\nconst defaultProps = {\n\tassistiveText: {\n\t\tspinner: 'Loading ...',\n\t},\n\ttype: 'text',\n};\n\n/*\n * This component was created to allow the DIV wrapped input to be used within other components such as combobox. This components API is not public.\n */\nconst InnerInput = (props) => {\n\tconst ariaProps = getAriaProps(props);\n\tariaProps['aria-describedby'] = props.hasSpinner\n\t\t? `loading-status-icon ${props['aria-describedby']}`\n\t\t: props['aria-describedby'];\n\n\tconst {\n\t\tclassName: containerClassName,\n\t\t...containerProps\n\t} = props.containerProps;\n\n\tconst assistiveText = {\n\t\t...defaultProps.assistiveText,\n\t\t...props.assistiveText,\n\t};\n\n\treturn (\n\t\t<div\n\t\t\tclassName={classNames(containerClassName, {\n\t\t\t\t'slds-input-has-icon':\n\t\t\t\t\tprops.variant !== COUNTER && (props.iconLeft || props.iconRight),\n\t\t\t\t'slds-input-has-icon_left': props.iconLeft && !props.iconRight,\n\t\t\t\t'slds-input-has-icon_right': !props.iconLeft && props.iconRight,\n\t\t\t\t'slds-input-has-icon_left-right':\n\t\t\t\t\tprops.variant !== COUNTER && props.iconLeft && props.iconRight,\n\t\t\t\t'slds-input-has-fixed-addon':\n\t\t\t\t\tprops.fixedTextLeft || props.fixedTextRight,\n\t\t\t\t'slds-has-divider_bottom': props.isStatic,\n\t\t\t})}\n\t\t\t{...containerProps}\n\t\t>\n\t\t\t{props.iconLeft && props.iconLeft}\n\t\t\t{props.fixedTextLeft && (\n\t\t\t\t<span className=\"slds-form-element__addon\">{props.fixedTextLeft}</span>\n\t\t\t)}\n\n\t\t\t{!props.isStatic && (\n\t\t\t\t<input\n\t\t\t\t\tautoComplete={props.autoComplete}\n\t\t\t\t\tclassName={classNames(\n\t\t\t\t\t\t'slds-input',\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t'slds-text-align_left':\n\t\t\t\t\t\t\t\tprops.variant === COUNTER && props.readOnly,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tprops.className\n\t\t\t\t\t)}\n\t\t\t\t\tdisabled={props.disabled}\n\t\t\t\t\tid={props.id}\n\t\t\t\t\tmin={props.minValue}\n\t\t\t\t\tminLength={props.minLength}\n\t\t\t\t\tmax={props.maxValue}\n\t\t\t\t\tmaxLength={props.maxLength}\n\t\t\t\t\tname={props.name}\n\t\t\t\t\tonBlur={props.onBlur}\n\t\t\t\t\tonChange={props.onChange}\n\t\t\t\t\tonClick={props.onClick}\n\t\t\t\t\tonFocus={props.onFocus}\n\t\t\t\t\tonInput={props.onInput}\n\t\t\t\t\tonInvalid={props.onInvalid}\n\t\t\t\t\tonKeyDown={props.onKeyDown}\n\t\t\t\t\tonKeyPress={props.onKeyPress}\n\t\t\t\t\tonKeyUp={props.onKeyUp}\n\t\t\t\t\tonSelect={props.onSelect}\n\t\t\t\t\tonSubmit={props.onSubmit}\n\t\t\t\t\tplaceholder={props.placeholder}\n\t\t\t\t\treadOnly={props.readOnly}\n\t\t\t\t\tref={props.inputRef}\n\t\t\t\t\trequired={props.required}\n\t\t\t\t\trole={props.role}\n\t\t\t\t\tstep={props.step}\n\t\t\t\t\tstyle={props.style}\n\t\t\t\t\ttabIndex={props.tabIndex}\n\t\t\t\t\ttype={props.type}\n\t\t\t\t\t{...ariaProps}\n\t\t\t\t\t/* A form element should not have both value and defaultValue props. */\n\t\t\t\t\t{...(props.value !== undefined\n\t\t\t\t\t\t? { value: props.value }\n\t\t\t\t\t\t: { defaultValue: props.defaultValue })}\n\t\t\t\t/>\n\t\t\t)}\n\n\t\t\t{props.hasSpinner ? (\n\t\t\t\t<div className=\"slds-input__icon-group slds-input__icon-group_right\">\n\t\t\t\t\t<Spinner\n\t\t\t\t\t\tassistiveText={{ label: assistiveText.spinner }}\n\t\t\t\t\t\tid=\"loading-status-icon\"\n\t\t\t\t\t\tisInput\n\t\t\t\t\t\tsize=\"x-small\"\n\t\t\t\t\t\tvariant=\"brand\"\n\t\t\t\t\t/>\n\t\t\t\t\t{props.iconRight && props.iconRight}\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\tprops.iconRight && props.iconRight\n\t\t\t)}\n\n\t\t\t{props.fixedTextRight && (\n\t\t\t\t<span className=\"slds-form-element__addon\">{props.fixedTextRight}</span>\n\t\t\t)}\n\n\t\t\t{/* eslint-disable jsx-a11y/no-static-element-interactions */}\n\t\t\t{props.isStatic && (\n\t\t\t\t<span\n\t\t\t\t\tclassName={classNames('slds-form-element__static', 'slds-grid', {\n\t\t\t\t\t\t'slds-grid_align-spread': props.variant !== COUNTER,\n\t\t\t\t\t})}\n\t\t\t\t\tonClick={props.onClick}\n\t\t\t\t>\n\t\t\t\t\t{props.value}\n\t\t\t\t\t{props.inlineEditTrigger}\n\t\t\t\t</span>\n\t\t\t)}\n\t\t\t{/* eslint-enable jsx-a11y/no-static-element-interactions */}\n\t\t</div>\n\t);\n};\n\nInnerInput.displayName = 'SLDSInnerInput';\nInnerInput.propTypes = propTypes;\nInnerInput.defaultProps = defaultProps;\n\nexport default InnerInput;\n"]},"metadata":{},"sourceType":"module"}