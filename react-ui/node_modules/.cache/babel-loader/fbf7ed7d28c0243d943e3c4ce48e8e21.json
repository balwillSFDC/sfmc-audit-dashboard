{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n// Implements the [Expression design pattern](https://lightningdesignsystem.com/components/expression/) in React.\n\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames'; // ### shortid\n// [npmjs.com/package/shortid](https://www.npmjs.com/package/shortid)\n// shortid is a short, non-sequential, url-friendly, unique id generator\n\nimport shortid from 'shortid';\nimport assign from 'lodash.assign';\nimport { EXPRESSION } from '../../utilities/constants';\nimport ExpressionGroup from './group';\nvar propTypes = {\n  /**\n   * HTML id for component.\n   */\n  id: PropTypes.string,\n\n  /**\n   * `Expression` children, accepts `ExpressionCondition` & `ExpressionGroup`\n   */\n  children: PropTypes.node,\n\n  /**\n   * Callbacks for various expression events such as trigger change, add group etc\n   */\n  events: PropTypes.shape({\n    onChangeTrigger: PropTypes.func,\n    onAddGroup: PropTypes.func,\n    onAddCondition: PropTypes.func,\n    onChangeCustomLogicValue: PropTypes.func\n  }),\n\n  /**\n   * **Text labels for internationalization**\n   * This object is merged with the default props object on every render.\n   * * `addCondition`: Label for the Add Condition Button. Defaults to \"Add Condition\"\n   * * `addGroup`: Label for the Add Group Button. Defaults to \"Add Group\"\n   * * `customLogic`: Label for the text box for inputting `customLogicValue`, if the `triggerType` is `custom`. Defaults to \"Custom Logic\"\n   * * `takeAction`: Label for the `triggerType` selector. Defaults to \"Take Action When\"\n   * * `title` : Title for the Expression. Defaults to \"Conditions\"\n   * * `triggerAll`: Label for the `all` value within the trigger selector\n   * * `triggerAlways`: Label for the `always` value within the trigger selector\n   * * `triggerAny`: Label for the `any` value within the trigger selector\n   * * `triggerCustom`: Label for the `custom` value within the trigger selector\n   * * `triggerFormula`: Label for the `formula` value within the trigger selector\n   */\n  labels: PropTypes.shape({\n    addCondition: PropTypes.string,\n    addGroup: PropTypes.string,\n    customLogic: PropTypes.string,\n    takeAction: PropTypes.string,\n    title: PropTypes.string,\n    triggerAll: PropTypes.string,\n    triggerAlways: PropTypes.string,\n    triggerAny: PropTypes.string,\n    triggerCustom: PropTypes.string,\n    triggerFormula: PropTypes.string\n  }),\n\n  /**\n   * CSS classes to be added to the element with class `.slds-expression`. Uses `classNames` [API](https://github.com/JedWatson/classnames).\n   */\n  className: PropTypes.oneOfType([PropTypes.array, PropTypes.object, PropTypes.string]),\n\n  /**\n   * Sets the trigger type for the expression.\n   */\n  triggerType: PropTypes.oneOf(['all', 'any', 'custom', 'always', 'formula']),\n\n  /**\n   * Sets the input for the custom logic value input box, shown if the `triggerType` is set to `custom`.\n   */\n  customLogicValue: PropTypes.string\n};\nvar defaultProps = {\n  labels: {\n    title: 'Conditions'\n  }\n};\n/**\n * Expression builders help users declaratively construct logical expressions.\n * These expressions can be used when querying for a filtered set of records,\n * creating rules to control when something executes, or any other conditional logic.\n */\n\nvar Expression = /*#__PURE__*/function (_React$Component) {\n  _inherits(Expression, _React$Component);\n\n  var _super = _createSuper(Expression);\n\n  function Expression(props) {\n    var _this;\n\n    _classCallCheck(this, Expression);\n\n    _this = _super.call(this, props);\n    _this.generatedId = shortid.generate();\n    return _this;\n  }\n  /**\n   * Get the Expression Group's HTML id. Generate a new one if no ID present.\n   */\n\n\n  _createClass(Expression, [{\n    key: \"getId\",\n    value: function getId() {\n      return this.props.id || this.generatedId;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var labels = assign({}, defaultProps.labels, this.props.labels);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: classNames('slds-expression', this.props.className),\n        id: this.getId()\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        className: \"slds-expression__title\"\n      }, labels.title), /*#__PURE__*/React.createElement(ExpressionGroup, {\n        isRoot: true,\n        id: \"\".concat(this.getId(), \"-group\"),\n        events: this.props.events,\n        labels: labels,\n        customLogicValue: this.props.customLogicValue,\n        triggerType: this.props.triggerType\n      }, this.props.children));\n    }\n  }]);\n\n  return Expression;\n}(React.Component);\n\nExpression.displayName = EXPRESSION;\nExpression.propTypes = propTypes;\nExpression.defaultProps = defaultProps;\nexport default Expression;","map":{"version":3,"sources":["../../../.tmp-es/components/expression/index.jsx"],"names":["propTypes","id","PropTypes","children","events","onChangeTrigger","onAddGroup","onAddCondition","onChangeCustomLogicValue","func","labels","addCondition","addGroup","customLogic","takeAction","title","triggerAll","triggerAlways","triggerAny","triggerCustom","triggerFormula","string","className","triggerType","customLogicValue","defaultProps","Expression","React","Component","shortid","assign","classNames"],"mappings":"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","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// Implements the [Expression design pattern](https://lightningdesignsystem.com/components/expression/) in React.\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\n// ### shortid\n// [npmjs.com/package/shortid](https://www.npmjs.com/package/shortid)\n// shortid is a short, non-sequential, url-friendly, unique id generator\nimport shortid from 'shortid';\nimport assign from 'lodash.assign';\nimport { EXPRESSION } from '../../utilities/constants';\nimport ExpressionGroup from './group';\n\nconst propTypes = {\n\t/**\n\t * HTML id for component.\n\t */\n\tid: PropTypes.string,\n\t/**\n\t * `Expression` children, accepts `ExpressionCondition` & `ExpressionGroup`\n\t */\n\tchildren: PropTypes.node,\n\t/**\n\t * Callbacks for various expression events such as trigger change, add group etc\n\t */\n\tevents: PropTypes.shape({\n\t\tonChangeTrigger: PropTypes.func,\n\t\tonAddGroup: PropTypes.func,\n\t\tonAddCondition: PropTypes.func,\n\t\tonChangeCustomLogicValue: PropTypes.func,\n\t}),\n\t/**\n\t * **Text labels for internationalization**\n\t * This object is merged with the default props object on every render.\n\t * * `addCondition`: Label for the Add Condition Button. Defaults to \"Add Condition\"\n\t * * `addGroup`: Label for the Add Group Button. Defaults to \"Add Group\"\n\t * * `customLogic`: Label for the text box for inputting `customLogicValue`, if the `triggerType` is `custom`. Defaults to \"Custom Logic\"\n\t * * `takeAction`: Label for the `triggerType` selector. Defaults to \"Take Action When\"\n\t * * `title` : Title for the Expression. Defaults to \"Conditions\"\n\t * * `triggerAll`: Label for the `all` value within the trigger selector\n\t * * `triggerAlways`: Label for the `always` value within the trigger selector\n\t * * `triggerAny`: Label for the `any` value within the trigger selector\n\t * * `triggerCustom`: Label for the `custom` value within the trigger selector\n\t * * `triggerFormula`: Label for the `formula` value within the trigger selector\n\t */\n\tlabels: PropTypes.shape({\n\t\taddCondition: PropTypes.string,\n\t\taddGroup: PropTypes.string,\n\t\tcustomLogic: PropTypes.string,\n\t\ttakeAction: PropTypes.string,\n\t\ttitle: PropTypes.string,\n\t\ttriggerAll: PropTypes.string,\n\t\ttriggerAlways: PropTypes.string,\n\t\ttriggerAny: PropTypes.string,\n\t\ttriggerCustom: PropTypes.string,\n\t\ttriggerFormula: PropTypes.string,\n\t}),\n\t/**\n\t * CSS classes to be added to the element with class `.slds-expression`. Uses `classNames` [API](https://github.com/JedWatson/classnames).\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * Sets the trigger type for the expression.\n\t */\n\ttriggerType: PropTypes.oneOf(['all', 'any', 'custom', 'always', 'formula']),\n\t/**\n\t * Sets the input for the custom logic value input box, shown if the `triggerType` is set to `custom`.\n\t */\n\tcustomLogicValue: PropTypes.string,\n};\n\nconst defaultProps = {\n\tlabels: {\n\t\ttitle: 'Conditions',\n\t},\n};\n\n/**\n * Expression builders help users declaratively construct logical expressions.\n * These expressions can be used when querying for a filtered set of records,\n * creating rules to control when something executes, or any other conditional logic.\n */\nclass Expression extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.generatedId = shortid.generate();\n\t}\n\n\t/**\n\t * Get the Expression Group's HTML id. Generate a new one if no ID present.\n\t */\n\tgetId() {\n\t\treturn this.props.id || this.generatedId;\n\t}\n\n\trender() {\n\t\tconst labels = assign({}, defaultProps.labels, this.props.labels);\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\tclassName={classNames('slds-expression', this.props.className)}\n\t\t\t\tid={this.getId()}\n\t\t\t>\n\t\t\t\t<h2 className=\"slds-expression__title\">{labels.title}</h2>\n\t\t\t\t<ExpressionGroup\n\t\t\t\t\tisRoot\n\t\t\t\t\tid={`${this.getId()}-group`}\n\t\t\t\t\tevents={this.props.events}\n\t\t\t\t\tlabels={labels}\n\t\t\t\t\tcustomLogicValue={this.props.customLogicValue}\n\t\t\t\t\ttriggerType={this.props.triggerType}\n\t\t\t\t>\n\t\t\t\t\t{this.props.children}\n\t\t\t\t</ExpressionGroup>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nExpression.displayName = EXPRESSION;\nExpression.propTypes = propTypes;\nExpression.defaultProps = defaultProps;\n\nexport default Expression;\n"]},"metadata":{},"sourceType":"module"}