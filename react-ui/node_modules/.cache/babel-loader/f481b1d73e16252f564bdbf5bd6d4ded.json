{"ast":null,"code":"/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n// ### React\nimport React from 'react';\nimport PropTypes from 'prop-types'; // ### ReactHighlighter\n\nimport ReactHighlighter from 'react-highlighter'; // ## Constants\n\nimport { HIGHLIGHTER } from '../../../utilities/constants';\n/**\n * A utility component that highlights occurrences of a particular pattern in its contents.\n */\n\nvar Highlighter = function Highlighter(props) {\n  if (props.search) {\n    var children;\n\n    if (typeof props.children === 'string') {\n      children = /*#__PURE__*/React.createElement(ReactHighlighter, {\n        className: props.className,\n        matchClass: null,\n        matchElement: \"mark\",\n        search: props.search,\n        title: props.children\n      }, props.children);\n    } else {\n      var findString = function findString(nodeArr) {\n        return nodeArr.map(function (element) {\n          var newElement;\n\n          if (typeof element === 'string') {\n            newElement = /*#__PURE__*/React.createElement(ReactHighlighter, {\n              key: element,\n              className: props.className,\n              matchClass: null,\n              matchElement: \"mark\",\n              search: props.search,\n              title: element\n            }, element);\n          } else {\n            newElement = element;\n          }\n\n          return newElement;\n        });\n      };\n\n      if (props.children.props) {\n        var node = props.children.props.children;\n        children = node instanceof Array ? findString(node) : node;\n      }\n    }\n\n    return /*#__PURE__*/React.createElement(\"span\", null, children);\n  }\n\n  if (typeof props.children === 'string') {\n    return /*#__PURE__*/React.createElement(\"span\", {\n      className: props.className,\n      title: props.children\n    }, props.children);\n  }\n\n  return /*#__PURE__*/React.createElement(\"span\", {\n    className: props.className\n  }, props.children);\n}; // ### Display Name\n\n\nHighlighter.displayName = HIGHLIGHTER; // ### Prop Types\n\nHighlighter.propTypes = {\n  /**\n   * The full string to display.\n   */\n  children: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.bool, PropTypes.node]),\n  className: PropTypes.string,\n\n  /**\n   * The string of text (or Regular Expression) to highlight.\n   */\n  search: PropTypes.any\n};\nexport default Highlighter;","map":{"version":3,"sources":["../../../../.tmp-es/components/utilities/highlighter/index.jsx"],"names":["Highlighter","props","children","findString","newElement","element","node","className","PropTypes","search","any"],"mappings":"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","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// ### React\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n// ### ReactHighlighter\nimport ReactHighlighter from 'react-highlighter';\n\n// ## Constants\nimport { HIGHLIGHTER } from '../../../utilities/constants';\n\n/**\n * A utility component that highlights occurrences of a particular pattern in its contents.\n */\nconst Highlighter = (props) => {\n\tif (props.search) {\n\t\tlet children;\n\t\tif (typeof props.children === 'string') {\n\t\t\tchildren = (\n\t\t\t\t<ReactHighlighter\n\t\t\t\t\tclassName={props.className}\n\t\t\t\t\tmatchClass={null}\n\t\t\t\t\tmatchElement=\"mark\"\n\t\t\t\t\tsearch={props.search}\n\t\t\t\t\ttitle={props.children}\n\t\t\t\t>\n\t\t\t\t\t{props.children}\n\t\t\t\t</ReactHighlighter>\n\t\t\t);\n\t\t} else {\n\t\t\tconst findString = (nodeArr) =>\n\t\t\t\tnodeArr.map((element) => {\n\t\t\t\t\tlet newElement;\n\t\t\t\t\tif (typeof element === 'string') {\n\t\t\t\t\t\tnewElement = (\n\t\t\t\t\t\t\t<ReactHighlighter\n\t\t\t\t\t\t\t\tkey={element}\n\t\t\t\t\t\t\t\tclassName={props.className}\n\t\t\t\t\t\t\t\tmatchClass={null}\n\t\t\t\t\t\t\t\tmatchElement=\"mark\"\n\t\t\t\t\t\t\t\tsearch={props.search}\n\t\t\t\t\t\t\t\ttitle={element}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{element}\n\t\t\t\t\t\t\t</ReactHighlighter>\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnewElement = element;\n\t\t\t\t\t}\n\t\t\t\t\treturn newElement;\n\t\t\t\t});\n\n\t\t\tif (props.children.props) {\n\t\t\t\tconst node = props.children.props.children;\n\t\t\t\tchildren = node instanceof Array ? findString(node) : node;\n\t\t\t}\n\t\t}\n\n\t\treturn <span>{children}</span>;\n\t}\n\n\tif (typeof props.children === 'string') {\n\t\treturn (\n\t\t\t<span className={props.className} title={props.children}>\n\t\t\t\t{props.children}\n\t\t\t</span>\n\t\t);\n\t}\n\n\treturn <span className={props.className}>{props.children}</span>;\n};\n\n// ### Display Name\nHighlighter.displayName = HIGHLIGHTER;\n\n// ### Prop Types\nHighlighter.propTypes = {\n\t/**\n\t * The full string to display.\n\t */\n\tchildren: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.number,\n\t\tPropTypes.bool,\n\t\tPropTypes.node,\n\t]),\n\tclassName: PropTypes.string,\n\t/**\n\t * The string of text (or Regular Expression) to highlight.\n\t */\n\tsearch: PropTypes.any,\n};\n\nexport default Highlighter;\n"]},"metadata":{},"sourceType":"module"}