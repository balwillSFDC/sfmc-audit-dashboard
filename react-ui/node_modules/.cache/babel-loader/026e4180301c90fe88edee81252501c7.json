{"ast":null,"code":"/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Day from './day';\nimport DateUtil from '../../../utilities/date';\n\nvar DatepickerWeek = function DatepickerWeek(props) {\n  var days = [];\n  var date = props.firstDayOfWeek; // eslint-disable-next-line fp/no-loops\n\n  for (var i = 0; i < 7; i += 1) {\n    // eslint-disable-next-line fp/no-mutating-methods\n    days.push( /*#__PURE__*/React.createElement(Day, {\n      calendarHasFocus: props.calendarHasFocus,\n      date: date,\n      disabled: props.dateDisabled({\n        date: date\n      }),\n      focusedDate: props.focusedDate,\n      initialDateForCalendarRender: props.initialDateForCalendarRender,\n      key: date.toString(),\n      onKeyboardNavigateToNextDay: props.onKeyboardNavigateToNextDay,\n      onKeyboardNavigateToNextWeek: props.onKeyboardNavigateToNextWeek,\n      onKeyboardNavigateToPreviousDay: props.onKeyboardNavigateToPreviousDay,\n      onKeyboardNavigateToPreviousWeek: props.onKeyboardNavigateToPreviousWeek,\n      onCalendarBlur: props.onCalendarBlur,\n      onRequestInternalFocusDate: props.onRequestInternalFocusDate,\n      onSelectDate: props.onSelectDate,\n      selectedDate: props.selectedDate,\n      selectedDateRef: props.selectedDateRef,\n      todayLabel: props.todayLabel\n    }));\n    date = DateUtil.addDays(date, 1);\n  }\n\n  return /*#__PURE__*/React.createElement(\"tr\", {\n    className: \"week\",\n    key: days[0].toString()\n  }, days);\n};\n\nDatepickerWeek.propTypes = {\n  /**\n   * Date used to create calendar that is displayed. This is typically the initial day focused when using the keyboard navigation. Focus will be set to this date if available.\n   */\n  initialDateForCalendarRender: PropTypes.instanceOf(Date).isRequired,\n\n  /**\n   * Is true if calendar day has focus.\n   */\n  calendarHasFocus: PropTypes.bool.isRequired,\n\n  /**\n   * dateDisabled() takes a date as input argument, returns true if given date should be disabled, otherwise returns false.\n   */\n  dateDisabled: PropTypes.func,\n\n  /**\n   * First day of week.\n   */\n  firstDayOfWeek: PropTypes.instanceOf(Date).isRequired,\n\n  /**\n   * Date that has focus.\n   */\n  focusedDate: PropTypes.instanceOf(Date).isRequired,\n\n  /**\n   * Triggered when the keyboard moves focus off the calendar.\n   */\n  onCalendarBlur: PropTypes.func.isRequired,\n\n  /**\n   * For keyboard navigation. Changes the focus to the next day on the calendar. Triggered when right arrow button is pressed.\n   */\n  onKeyboardNavigateToNextDay: PropTypes.func.isRequired,\n\n  /**\n   * For keyboard navigation. Changes the focus to the same day in the next week on the calendar. Triggered when down arrow button is pressed.\n   */\n  onKeyboardNavigateToNextWeek: PropTypes.func.isRequired,\n\n  /**\n   * For keyboard navigation. Changes the focus to the previous day on the calendar. Triggered when left arrow button is pressed.\n   */\n  onKeyboardNavigateToPreviousDay: PropTypes.func.isRequired,\n\n  /**\n   * For keyboard navigation. Changes the focus to the same day in the previous week on the calendar. Triggered when up arrow button is pressed.\n   */\n  onKeyboardNavigateToPreviousWeek: PropTypes.func.isRequired,\n\n  /**\n   * Triggered when the user wants to focus on a new day witht he keyboard. It returns the keyboard event a data object with the shape: `{date: [Date object]}`. Keyboard event is ommited if a new month is rendered.  _Tested with Mocha framework._\n   */\n  onRequestInternalFocusDate: PropTypes.func.isRequired,\n\n  /**\n   * Triggered when a date on the calendar is clicked.\n   */\n  onSelectDate: PropTypes.func.isRequired,\n\n  /**\n   * Currently selected date. This should be present in the input field.\n   */\n  selectedDate: PropTypes.instanceOf(Date).isRequired,\n\n  /**\n   * Component reference / DOM node for selected day.\n   */\n  selectedDateRef: PropTypes.func.isRequired,\n\n  /**\n   * Label of shortcut to jump to today within the calendar. Also used for assistive text for the current day.\n   */\n  todayLabel: PropTypes.string.isRequired\n};\nDatepickerWeek.displayName = 'SLDSDatepickerWeek';\nexport default DatepickerWeek;","map":{"version":3,"sources":["../../../../.tmp-es/components/date-picker/private/week.jsx"],"names":["DatepickerWeek","days","date","props","i","todayLabel","DateUtil","initialDateForCalendarRender","PropTypes","calendarHasFocus","dateDisabled","firstDayOfWeek","focusedDate","onCalendarBlur","onKeyboardNavigateToNextDay","onKeyboardNavigateToNextWeek","onKeyboardNavigateToPreviousDay","onKeyboardNavigateToPreviousWeek","onRequestInternalFocusDate","onSelectDate","selectedDate","selectedDateRef","isRequired"],"mappings":"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","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Day from './day';\n\nimport DateUtil from '../../../utilities/date';\n\nconst DatepickerWeek = (props) => {\n\tconst days = [];\n\tlet date = props.firstDayOfWeek;\n\n\t// eslint-disable-next-line fp/no-loops\n\tfor (let i = 0; i < 7; i += 1) {\n\t\t// eslint-disable-next-line fp/no-mutating-methods\n\t\tdays.push(\n\t\t\t<Day\n\t\t\t\tcalendarHasFocus={props.calendarHasFocus}\n\t\t\t\tdate={date}\n\t\t\t\tdisabled={props.dateDisabled({ date })}\n\t\t\t\tfocusedDate={props.focusedDate}\n\t\t\t\tinitialDateForCalendarRender={props.initialDateForCalendarRender}\n\t\t\t\tkey={date.toString()}\n\t\t\t\tonKeyboardNavigateToNextDay={props.onKeyboardNavigateToNextDay}\n\t\t\t\tonKeyboardNavigateToNextWeek={props.onKeyboardNavigateToNextWeek}\n\t\t\t\tonKeyboardNavigateToPreviousDay={props.onKeyboardNavigateToPreviousDay}\n\t\t\t\tonKeyboardNavigateToPreviousWeek={\n\t\t\t\t\tprops.onKeyboardNavigateToPreviousWeek\n\t\t\t\t}\n\t\t\t\tonCalendarBlur={props.onCalendarBlur}\n\t\t\t\tonRequestInternalFocusDate={props.onRequestInternalFocusDate}\n\t\t\t\tonSelectDate={props.onSelectDate}\n\t\t\t\tselectedDate={props.selectedDate}\n\t\t\t\tselectedDateRef={props.selectedDateRef}\n\t\t\t\ttodayLabel={props.todayLabel}\n\t\t\t/>\n\t\t);\n\t\tdate = DateUtil.addDays(date, 1);\n\t}\n\n\treturn (\n\t\t<tr className=\"week\" key={days[0].toString()}>\n\t\t\t{days}\n\t\t</tr>\n\t);\n};\n\nDatepickerWeek.propTypes = {\n\t/**\n\t * Date used to create calendar that is displayed. This is typically the initial day focused when using the keyboard navigation. Focus will be set to this date if available.\n\t */\n\tinitialDateForCalendarRender: PropTypes.instanceOf(Date).isRequired,\n\t/**\n\t * Is true if calendar day has focus.\n\t */\n\tcalendarHasFocus: PropTypes.bool.isRequired,\n\t/**\n\t * dateDisabled() takes a date as input argument, returns true if given date should be disabled, otherwise returns false.\n\t */\n\tdateDisabled: PropTypes.func,\n\t/**\n\t * First day of week.\n\t */\n\tfirstDayOfWeek: PropTypes.instanceOf(Date).isRequired,\n\t/**\n\t * Date that has focus.\n\t */\n\tfocusedDate: PropTypes.instanceOf(Date).isRequired,\n\t/**\n\t * Triggered when the keyboard moves focus off the calendar.\n\t */\n\tonCalendarBlur: PropTypes.func.isRequired,\n\t/**\n\t * For keyboard navigation. Changes the focus to the next day on the calendar. Triggered when right arrow button is pressed.\n\t */\n\tonKeyboardNavigateToNextDay: PropTypes.func.isRequired,\n\t/**\n\t * For keyboard navigation. Changes the focus to the same day in the next week on the calendar. Triggered when down arrow button is pressed.\n\t */\n\tonKeyboardNavigateToNextWeek: PropTypes.func.isRequired,\n\t/**\n\t * For keyboard navigation. Changes the focus to the previous day on the calendar. Triggered when left arrow button is pressed.\n\t */\n\tonKeyboardNavigateToPreviousDay: PropTypes.func.isRequired,\n\t/**\n\t * For keyboard navigation. Changes the focus to the same day in the previous week on the calendar. Triggered when up arrow button is pressed.\n\t */\n\tonKeyboardNavigateToPreviousWeek: PropTypes.func.isRequired,\n\t/**\n\t * Triggered when the user wants to focus on a new day witht he keyboard. It returns the keyboard event a data object with the shape: `{date: [Date object]}`. Keyboard event is ommited if a new month is rendered.  _Tested with Mocha framework._\n\t */\n\tonRequestInternalFocusDate: PropTypes.func.isRequired,\n\t/**\n\t * Triggered when a date on the calendar is clicked.\n\t */\n\tonSelectDate: PropTypes.func.isRequired,\n\t/**\n\t * Currently selected date. This should be present in the input field.\n\t */\n\tselectedDate: PropTypes.instanceOf(Date).isRequired,\n\t/**\n\t * Component reference / DOM node for selected day.\n\t */\n\tselectedDateRef: PropTypes.func.isRequired,\n\t/**\n\t * Label of shortcut to jump to today within the calendar. Also used for assistive text for the current day.\n\t */\n\ttodayLabel: PropTypes.string.isRequired,\n};\n\nDatepickerWeek.displayName = 'SLDSDatepickerWeek';\n\nexport default DatepickerWeek;\n"]},"metadata":{},"sourceType":"module"}