{"ast":null,"code":"/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n// # Tree Initial Branch\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport isFunction from 'lodash.isfunction';\nimport classNames from 'classnames';\nvar propTypes = {\n  /**\n   * HTML `id` of the wrapping container element.\n   */\n  htmlId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n\n  /*\n   * Class names to be added to the top-level `ul` element.\n   */\n  initalClassName: PropTypes.oneOfType([PropTypes.array, PropTypes.object, PropTypes.string]),\n\n  /*\n   * Styles to be added to the top-level `ul` element. Useful for `overflow:hidden`.\n   */\n  initialStyle: PropTypes.object\n};\n\nvar handleScroll = function handleScroll(event, props) {\n  var percentage = event.target.scrollTop / (event.target.scrollHeight - event.target.clientHeight) * 100;\n\n  if (isFunction(props.onScroll)) {\n    props.onScroll(event, {\n      percentage: percentage\n    });\n  }\n};\n\nvar renderInitialNode = function renderInitialNode(children, props) {\n  return (\n    /*#__PURE__*/\n    // id intentionally not rendered here, and is present on\n    // container that includes the header\n    React.createElement(\"ul\", {\n      \"aria-labelledby\": \"\".concat(props.htmlId, \"__heading\"),\n      className: classNames('slds-tree', props.initalClassName),\n      onScroll: function onScroll(event) {\n        handleScroll(event, props);\n      },\n      role: \"tree\",\n      style: props.initialStyle\n    }, children)\n  );\n};\n\nrenderInitialNode.displayName = 'TreeInitialNode';\nrenderInitialNode.propTypes = propTypes;\nexport default renderInitialNode;","map":{"version":3,"sources":["../../../../.tmp-es/components/tree/private/render-initial-branch.jsx"],"names":["propTypes","htmlId","PropTypes","initalClassName","initialStyle","object","handleScroll","percentage","event","isFunction","props","renderInitialNode","classNames"],"mappings":"AAAA;;AACA;AAEA;AAEA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,OAAA,UAAA,MAAA,mBAAA;AACA,OAAA,UAAA,MAAA,YAAA;AAEA,IAAMA,SAAS,GAAG;AACjB;AACD;AACA;AACCC,EAAAA,MAAM,EAAEC,SAAS,CAATA,SAAAA,CAAoB,CAACA,SAAS,CAAV,MAAA,EAAmBA,SAAS,CAAhDA,MAAoB,CAApBA,EAJS,UAAA;;AAKjB;AACD;AACA;AACCC,EAAAA,eAAe,EAAED,SAAS,CAATA,SAAAA,CAAoB,CACpCA,SAAS,CAD2B,KAAA,EAEpCA,SAAS,CAF2B,MAAA,EAGpCA,SAAS,CAXO,MAQoB,CAApBA,CARA;;AAajB;AACD;AACA;AACCE,EAAAA,YAAY,EAAEF,SAAS,CAACG;AAhBP,CAAlB;;AAmBA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAA,KAAA,EAAA,KAAA,EAAkB;AACtC,MAAMC,UAAU,GACdC,KAAK,CAALA,MAAAA,CAAAA,SAAAA,IACCA,KAAK,CAALA,MAAAA,CAAAA,YAAAA,GAA4BA,KAAK,CAALA,MAAAA,CAD9B,YAACA,IADF,GAAA;;AAKA,MAAIC,UAAU,CAACC,KAAK,CAApB,QAAc,CAAd,EAAgC;AAC/BA,IAAAA,KAAK,CAALA,QAAAA,CAAAA,KAAAA,EAAsB;AACrBH,MAAAA,UAAU,EAAVA;AADqB,KAAtBG;AAGA;AAVF,CAAA;;AAaA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAA,QAAA,EAAA,KAAA,EAAA;AAAA;AAAA;AACzB;AACA;AACA,IAAA,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AACC,yBAAA,GAAA,MAAA,CAAoBD,KAAK,CAAzB,MAAA,EADD,WACC,CADD;AAEC,MAAA,SAAS,EAAEE,UAAU,CAAA,WAAA,EAAcF,KAAK,CAFzC,eAEsB,CAFtB;AAGC,MAAA,QAAQ,EAAE,SAAA,QAAA,CAAA,KAAA,EAAW;AACpBJ,QAAAA,YAAY,CAAA,KAAA,EAAZA,KAAY,CAAZA;AAJF,OAAA;AAMC,MAAA,IAAI,EANL,MAAA;AAOC,MAAA,KAAK,EAAEI,KAAK,CAACN;AAPd,KAAA,EAAA,QAAA;AAHyB;AAA1B,CAAA;;AAgBAO,iBAAiB,CAAjBA,WAAAA,GAAAA,iBAAAA;AACAA,iBAAiB,CAAjBA,SAAAA,GAAAA,SAAAA;AAEA,eAAA,iBAAA","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// # Tree Initial Branch\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport isFunction from 'lodash.isfunction';\nimport classNames from 'classnames';\n\nconst propTypes = {\n\t/**\n\t * HTML `id` of the wrapping container element.\n\t */\n\thtmlId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n\t/*\n\t * Class names to be added to the top-level `ul` element.\n\t */\n\tinitalClassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/*\n\t * Styles to be added to the top-level `ul` element. Useful for `overflow:hidden`.\n\t */\n\tinitialStyle: PropTypes.object,\n};\n\nconst handleScroll = (event, props) => {\n\tconst percentage =\n\t\t(event.target.scrollTop /\n\t\t\t(event.target.scrollHeight - event.target.clientHeight)) *\n\t\t100;\n\n\tif (isFunction(props.onScroll)) {\n\t\tprops.onScroll(event, {\n\t\t\tpercentage,\n\t\t});\n\t}\n};\n\nconst renderInitialNode = (children, props) => (\n\t// id intentionally not rendered here, and is present on\n\t// container that includes the header\n\t<ul\n\t\taria-labelledby={`${props.htmlId}__heading`}\n\t\tclassName={classNames('slds-tree', props.initalClassName)}\n\t\tonScroll={(event) => {\n\t\t\thandleScroll(event, props);\n\t\t}}\n\t\trole=\"tree\"\n\t\tstyle={props.initialStyle}\n\t>\n\t\t{children}\n\t</ul>\n);\n\nrenderInitialNode.displayName = 'TreeInitialNode';\nrenderInitialNode.propTypes = propTypes;\n\nexport default renderInitialNode;\n"]},"metadata":{},"sourceType":"module"}