{"ast":null,"code":"/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n// # Assistive Technology / Keyboard Navigable Trait for Dialogs with Tabbable content\n\n/*\n * Guidelines for Popover\n *\n * - Focus is trapped. Tabbing to an index outside of the dialog is not allowed. Popover must be closed first via ESC.\n * - There should always be a focusable element inside, to place user focus on such as a close button\n * - Must be dismissible via ESC and a close button\n * - Uses tabIndex in wrapper and has tabbable items within it despite being outside document flow.\n * - Entire popover receives focus when opened and has a aria-labelledby that points to the header id, so it will read the heading,\n * - Must return focus to trigger after closing.\n * - F6 will allow the user to keep popover open and go back to tabbing in “app-context” instead of “dialog-context.” (not implemented, yet)\n */\n// ## Dependencies\n// ### React\nimport ReactDOM from 'react-dom'; // ### Event Helpers\n\nimport KEYS from './key-code';\n/* eslint-disable react/no-find-dom-node */\n\nvar internalHandleClick = function internalHandleClick(_ref) {\n  var trigger = _ref.trigger,\n      eventTarget = _ref.eventTarget,\n      handleClick = _ref.handleClick;\n\n  if (trigger && ReactDOM.findDOMNode(trigger) === eventTarget) {\n    // eslint-disable-line react/no-find-dom-node\n    handleClick(event);\n  }\n};\n\nvar KeyboardNavigableDialog = function KeyboardNavigableDialog(_ref2) {\n  var isOpen = _ref2.isOpen,\n      handleClick = _ref2.handleClick,\n      keyCode = _ref2.keyCode,\n      eventTarget = _ref2.eventTarget,\n      trigger = _ref2.trigger,\n      toggleOpen = _ref2.toggleOpen;\n\n  switch (keyCode) {\n    case KEYS.ESCAPE:\n      if (isOpen) {\n        toggleOpen();\n      }\n\n      break;\n\n    case KEYS.ENTER:\n      if (!isOpen) {\n        internalHandleClick({\n          trigger: trigger,\n          eventTarget: eventTarget,\n          handleClick: handleClick\n        });\n      }\n\n      break;\n\n    default:\n      break;\n  }\n};\n\nexport default KeyboardNavigableDialog;","map":{"version":3,"sources":["../../.tmp-es/utilities/keyboard-navigable-dialog.js"],"names":["internalHandleClick","trigger","eventTarget","handleClick","ReactDOM","KeyboardNavigableDialog","isOpen","keyCode","toggleOpen","KEYS"],"mappings":"AAAA;;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA,OAAA,QAAA,MAAA,WAAA,C,CAEA;;AACA,OAAA,IAAA,MAAA,YAAA;AAEA;;AAEA,IAAMA,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAA,IAAA,EAA2C;AAAA,MAAxCC,OAAwC,GAAA,IAAA,CAAxCA,OAAwC;AAAA,MAA/BC,WAA+B,GAAA,IAAA,CAA/BA,WAA+B;AAAA,MAAlBC,WAAkB,GAAA,IAAA,CAAlBA,WAAkB;;AACtE,MAAIF,OAAO,IAAIG,QAAQ,CAARA,WAAAA,CAAAA,OAAAA,MAAf,WAAA,EAA8D;AAC7D;AACAD,IAAAA,WAAW,CAAXA,KAAW,CAAXA;AACA;AAJF,CAAA;;AAOA,IAAME,uBAAuB,GAAG,SAA1BA,uBAA0B,CAAA,KAAA,EAO1B;AAAA,MANLC,MAMK,GAAA,KAAA,CANLA,MAMK;AAAA,MALLH,WAKK,GAAA,KAAA,CALLA,WAKK;AAAA,MAJLI,OAIK,GAAA,KAAA,CAJLA,OAIK;AAAA,MAHLL,WAGK,GAAA,KAAA,CAHLA,WAGK;AAAA,MAFLD,OAEK,GAAA,KAAA,CAFLA,OAEK;AAAA,MADLO,UACK,GAAA,KAAA,CADLA,UACK;;AACL,UAAA,OAAA;AACC,SAAKC,IAAI,CAAT,MAAA;AACC,UAAA,MAAA,EAAY;AACXD,QAAAA,UAAU;AACV;;AACD;;AACD,SAAKC,IAAI,CAAT,KAAA;AACC,UAAI,CAAJ,MAAA,EAAa;AACZT,QAAAA,mBAAmB,CAAC;AACnBC,UAAAA,OAAO,EADY,OAAA;AAEnBC,UAAAA,WAAW,EAFQ,WAAA;AAGnBC,UAAAA,WAAW,EAAXA;AAHmB,SAAD,CAAnBH;AAKA;;AACD;;AACD;AACC;AAhBF;AARD,CAAA;;AA4BA,eAAA,uBAAA","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// # Assistive Technology / Keyboard Navigable Trait for Dialogs with Tabbable content\n\n/*\n * Guidelines for Popover\n *\n * - Focus is trapped. Tabbing to an index outside of the dialog is not allowed. Popover must be closed first via ESC.\n * - There should always be a focusable element inside, to place user focus on such as a close button\n * - Must be dismissible via ESC and a close button\n * - Uses tabIndex in wrapper and has tabbable items within it despite being outside document flow.\n * - Entire popover receives focus when opened and has a aria-labelledby that points to the header id, so it will read the heading,\n * - Must return focus to trigger after closing.\n * - F6 will allow the user to keep popover open and go back to tabbing in “app-context” instead of “dialog-context.” (not implemented, yet)\n */\n\n// ## Dependencies\n\n// ### React\nimport ReactDOM from 'react-dom';\n\n// ### Event Helpers\nimport KEYS from './key-code';\n\n/* eslint-disable react/no-find-dom-node */\n\nconst internalHandleClick = ({ trigger, eventTarget, handleClick }) => {\n\tif (trigger && ReactDOM.findDOMNode(trigger) === eventTarget) {\n\t\t// eslint-disable-line react/no-find-dom-node\n\t\thandleClick(event);\n\t}\n};\n\nconst KeyboardNavigableDialog = ({\n\tisOpen,\n\thandleClick,\n\tkeyCode,\n\teventTarget,\n\ttrigger,\n\ttoggleOpen,\n}) => {\n\tswitch (keyCode) {\n\t\tcase KEYS.ESCAPE:\n\t\t\tif (isOpen) {\n\t\t\t\ttoggleOpen();\n\t\t\t}\n\t\t\tbreak;\n\t\tcase KEYS.ENTER:\n\t\t\tif (!isOpen) {\n\t\t\t\tinternalHandleClick({\n\t\t\t\t\ttrigger,\n\t\t\t\t\teventTarget,\n\t\t\t\t\thandleClick,\n\t\t\t\t});\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t}\n};\n\nexport default KeyboardNavigableDialog;\n"]},"metadata":{},"sourceType":"module"}