{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n// # Global Navigation Dropdown Component\n// ## Dependencies\n// ### React\n\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport checkProps from './check-props';\nimport componentDoc from './component.json'; // ### Dropdown\n\nimport MenuDropdown from '../menu-dropdown';\nimport GlobalNavigationTrigger from './dropdown-trigger'; // ## Constants\n\nimport { GLOBAL_NAVIGATION_BAR_DROPDOWN } from '../../utilities/constants';\n/**\n * This component is an implementation of `MenuDropdown` with a custom trigger. All the properties listed below are provided to the `MenuDropdown` component. Any additional properties are provided to the Custom Trigger (that is the `Button` or `li` tag).\n */\n\nvar GlobalNavigationBarDropdown = function GlobalNavigationBarDropdown(props) {\n  checkProps(GLOBAL_NAVIGATION_BAR_DROPDOWN, props, componentDoc); // Separate props we care about in order to pass others along passively to the dropdown component\n\n  var active = props.active,\n      activeBackgroundColor = props.activeBackgroundColor,\n      assistiveText = props.assistiveText,\n      dividerPosition = props.dividerPosition,\n      rest = _objectWithoutProperties(props, [\"active\", \"activeBackgroundColor\", \"assistiveText\", \"dividerPosition\"]);\n\n  return /*#__PURE__*/React.createElement(MenuDropdown, _extends({\n    align: \"right\",\n    hasStaticAlignment: true // only need if using hybrid or hover\n    ,\n    hoverCloseDelay: 400,\n    length: props.length,\n    menuPosition: \"relative\"\n  }, rest), /*#__PURE__*/React.createElement(GlobalNavigationTrigger, {\n    active: active,\n    assistiveText: assistiveText,\n    activeBackgroundColor: activeBackgroundColor,\n    dividerPosition: dividerPosition\n  }));\n}; // ### Display Name\n// Always use the canonical component name (set in the core) as the React\n// display name.\n\n\nGlobalNavigationBarDropdown.displayName = GLOBAL_NAVIGATION_BAR_DROPDOWN; // ### Prop Types\n\nGlobalNavigationBarDropdown.propTypes = {\n  /**\n   * Whether the item is active or not.\n   */\n  active: PropTypes.bool,\n\n  /**\n   * Allows alignment of active item with active application background color.\n   */\n  activeBackgroundColor: PropTypes.string,\n\n  /**\n   * **Assistive text for accessibility.**\n   * This object is merged with the default props object on every render.\n   * * `icon`: Text that is visually hidden but read aloud by screenreaders to tell the user what the icon means. If the button has an icon and a visible label, you can omit the <code>assistiveText.icon</code> prop and use the <code>label</code> prop.\n   */\n  assistiveText: PropTypes.shape({\n    icon: PropTypes.string\n  }),\n\n  /**\n   * Aligns the right or left side of the menu with the respective side of the trigger. This is not intended for use with `nubbinPosition`.\n   */\n  align: PropTypes.oneOf(['left', 'right']),\n\n  /**\n   * Extra classnames to apply to the dropdown menu.\n   */\n  className: PropTypes.string,\n\n  /**\n   * Determines position of separating bar.\n   */\n  dividerPosition: PropTypes.oneOf(['left', 'right']),\n\n  /**\n   * CSS classes to be added to `li` element.\n   */\n  buttonClassName: PropTypes.oneOfType([PropTypes.array, PropTypes.object, PropTypes.string]),\n\n  /**\n   * A unique ID is needed in order to support keyboard navigation, ARIA support, and connect the dropdown to the triggering button.\n   */\n  id: PropTypes.string,\n\n  /**\n   * Provided to List to indicate number of items visible in the List. Pass `null` to display all items, or a string containing one of the numeric option values listed under [Dropdown Height](https://www.lightningdesignsystem.com/components/menus/#flavor-dropdown-height) at the right (eg. '5').\n   */\n  length: PropTypes.oneOf([null, '5', '7', '10']),\n\n  /**\n   *  Offset adds pixels to the absolutely positioned dropdown menu in the format: ([vertical]px [horizontal]px).\n   */\n  offset: PropTypes.string,\n\n  /**\n   * Triggered when an item in the menu is clicked.\n   */\n  onSelect: PropTypes.func,\n\n  /**\n   * An array of menu item.\n   */\n  options: PropTypes.array.isRequired\n}; // ### Default Props\n\nGlobalNavigationBarDropdown.defaultProps = {\n  align: 'right',\n  length: null\n};\nexport default GlobalNavigationBarDropdown;","map":{"version":3,"sources":["../../../.tmp-es/components/global-navigation-bar/dropdown.jsx"],"names":["GlobalNavigationBarDropdown","checkProps","active","activeBackgroundColor","assistiveText","dividerPosition","rest","props","PropTypes","icon","string","align","className","buttonClassName","id","length","offset","onSelect","options","isRequired"],"mappings":"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","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// # Global Navigation Dropdown Component\n\n// ## Dependencies\n\n// ### React\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport checkProps from './check-props';\nimport componentDoc from './component.json';\n\n// ### Dropdown\nimport MenuDropdown from '../menu-dropdown';\nimport GlobalNavigationTrigger from './dropdown-trigger';\n\n// ## Constants\nimport { GLOBAL_NAVIGATION_BAR_DROPDOWN } from '../../utilities/constants';\n\n/**\n * This component is an implementation of `MenuDropdown` with a custom trigger. All the properties listed below are provided to the `MenuDropdown` component. Any additional properties are provided to the Custom Trigger (that is the `Button` or `li` tag).\n */\nconst GlobalNavigationBarDropdown = (props) => {\n\tcheckProps(GLOBAL_NAVIGATION_BAR_DROPDOWN, props, componentDoc);\n\n\t// Separate props we care about in order to pass others along passively to the dropdown component\n\tconst {\n\t\tactive,\n\t\tactiveBackgroundColor,\n\t\tassistiveText,\n\t\tdividerPosition,\n\t\t...rest\n\t} = props;\n\n\treturn (\n\t\t<MenuDropdown\n\t\t\talign=\"right\"\n\t\t\thasStaticAlignment\n\t\t\t// only need if using hybrid or hover\n\t\t\thoverCloseDelay={400}\n\t\t\tlength={props.length}\n\t\t\tmenuPosition=\"relative\"\n\t\t\t{...rest}\n\t\t>\n\t\t\t<GlobalNavigationTrigger\n\t\t\t\tactive={active}\n\t\t\t\tassistiveText={assistiveText}\n\t\t\t\tactiveBackgroundColor={activeBackgroundColor}\n\t\t\t\tdividerPosition={dividerPosition}\n\t\t\t/>\n\t\t</MenuDropdown>\n\t);\n};\n\n// ### Display Name\n// Always use the canonical component name (set in the core) as the React\n// display name.\nGlobalNavigationBarDropdown.displayName = GLOBAL_NAVIGATION_BAR_DROPDOWN;\n\n// ### Prop Types\nGlobalNavigationBarDropdown.propTypes = {\n\t/**\n\t * Whether the item is active or not.\n\t */\n\tactive: PropTypes.bool,\n\t/**\n\t * Allows alignment of active item with active application background color.\n\t */\n\tactiveBackgroundColor: PropTypes.string,\n\t/**\n\t * **Assistive text for accessibility.**\n\t * This object is merged with the default props object on every render.\n\t * * `icon`: Text that is visually hidden but read aloud by screenreaders to tell the user what the icon means. If the button has an icon and a visible label, you can omit the <code>assistiveText.icon</code> prop and use the <code>label</code> prop.\n\t */\n\tassistiveText: PropTypes.shape({\n\t\ticon: PropTypes.string,\n\t}),\n\t/**\n\t * Aligns the right or left side of the menu with the respective side of the trigger. This is not intended for use with `nubbinPosition`.\n\t */\n\talign: PropTypes.oneOf(['left', 'right']),\n\t/**\n\t * Extra classnames to apply to the dropdown menu.\n\t */\n\tclassName: PropTypes.string,\n\t/**\n\t * Determines position of separating bar.\n\t */\n\tdividerPosition: PropTypes.oneOf(['left', 'right']),\n\t/**\n\t * CSS classes to be added to `li` element.\n\t */\n\tbuttonClassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * A unique ID is needed in order to support keyboard navigation, ARIA support, and connect the dropdown to the triggering button.\n\t */\n\tid: PropTypes.string,\n\t/**\n\t * Provided to List to indicate number of items visible in the List. Pass `null` to display all items, or a string containing one of the numeric option values listed under [Dropdown Height](https://www.lightningdesignsystem.com/components/menus/#flavor-dropdown-height) at the right (eg. '5').\n\t */\n\tlength: PropTypes.oneOf([null, '5', '7', '10']),\n\t/**\n\t *  Offset adds pixels to the absolutely positioned dropdown menu in the format: ([vertical]px [horizontal]px).\n\t */\n\toffset: PropTypes.string,\n\t/**\n\t * Triggered when an item in the menu is clicked.\n\t */\n\tonSelect: PropTypes.func,\n\t/**\n\t * An array of menu item.\n\t */\n\toptions: PropTypes.array.isRequired,\n};\n\n// ### Default Props\nGlobalNavigationBarDropdown.defaultProps = {\n\talign: 'right',\n\tlength: null,\n};\n\nexport default GlobalNavigationBarDropdown;\n"]},"metadata":{},"sourceType":"module"}