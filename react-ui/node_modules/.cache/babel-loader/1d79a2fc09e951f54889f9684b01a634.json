{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n// Implements the [Welcome Mat Tile design pattern](https://lightningdesignsystem.com/components/welcome-mat/) in React.\n// Based on SLDS v2.4.0\n\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames'; // ### shortid\n// [npmjs.com/package/shortid](https://www.npmjs.com/package/shortid)\n// shortid is a short, non-sequential, url-friendly, unique id generator\n\nimport shortid from 'shortid';\nimport Icon from '../icon';\nimport { WELCOME_MAT_TILE } from '../../utilities/constants';\nvar displayName = WELCOME_MAT_TILE;\nvar propTypes = {\n  /**\n   * **Assistive text for accessibility.**\n   * This object is merged with the default props object on every render.\n   * * `completeIcon`: Text that is visually hidden but read aloud by screenreaders to tell the user what the complete icon means.\n   */\n  assistiveText: PropTypes.shape({\n    completedIcon: PropTypes.string\n  }),\n\n  /**\n   * CSS class names to be added to the container element. `array`, `object`, or `string` are accepted.\n   */\n  className: PropTypes.oneOfType([PropTypes.array, PropTypes.object, PropTypes.string]),\n\n  /**\n   * HTML id for component.\n   */\n  id: PropTypes.string,\n\n  /**\n   * Title for the tile component.\n   */\n  title: PropTypes.string,\n\n  /**\n   * Description for the tile component.\n   */\n  description: PropTypes.string,\n\n  /**\n   * Href for the tile link\n   */\n  href: PropTypes.string,\n\n  /**\n   * Icon for the tile\n   */\n  icon: PropTypes.node,\n\n  /**\n   * Whether the tile is completed\n   */\n  isComplete: PropTypes.bool,\n\n  /**\n   * Variant of the Welcome Mat Tile\n   */\n  variant: PropTypes.oneOf(['steps', 'info-only', 'splash', 'trailhead-connected'])\n};\nvar defaultProps = {\n  assistiveText: {\n    completedIcon: 'Completed'\n  },\n  isComplete: false,\n  variant: 'steps'\n};\n/**\n * Tile component item represents a tile in a Welcome Mat\n */\n\nvar Tile = /*#__PURE__*/function (_React$Component) {\n  _inherits(Tile, _React$Component);\n\n  var _super = _createSuper(Tile);\n\n  function Tile(props) {\n    var _this;\n\n    _classCallCheck(this, Tile);\n\n    _this = _super.call(this, props);\n    _this.generatedId = shortid.generate();\n    return _this;\n  }\n  /**\n   * Get the Welcome Mat Tile's HTML id. Generate a new one if no ID present.\n   */\n\n\n  _createClass(Tile, [{\n    key: \"getId\",\n    value: function getId() {\n      return this.props.id || this.generatedId;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var assistiveText = _objectSpread(_objectSpread({}, defaultProps.assistiveText), this.props.assistiveText);\n\n      var body = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        className: classNames('slds-media__figure', 'slds-media__figure_fixed-width', 'slds-align_absolute-center')\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"slds-welcome-mat__tile-figure\"\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"slds-welcome-mat__tile-icon-container\"\n      }, this.props.icon, this.props.isComplete && this.props.variant !== 'info-only' ? /*#__PURE__*/React.createElement(Icon, {\n        assistiveText: {\n          label: assistiveText.completedIcon\n        },\n        category: \"action\",\n        name: \"check\",\n        title: assistiveText.completedIcon\n      }) : null))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"slds-media__body\"\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"slds-welcome-mat__tile-body\"\n      }, /*#__PURE__*/React.createElement(\"h3\", {\n        className: \"slds-welcome-mat__tile-title\"\n      }, this.props.title), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"slds-welcome-mat__tile-description\"\n      }, this.props.description))));\n      return /*#__PURE__*/React.createElement(\"div\", {\n        id: this.getId(),\n        className: classNames('slds-welcome-mat__tile', this.props.variant === 'info-only' ? 'slds-welcome-mat__tile_info-only' : null, this.props.isComplete && this.props.variant !== 'info-only' ? 'slds-welcome-mat__tile_complete' : null, this.props.className)\n      }, this.props.variant === 'info-only' ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"slds-media\"\n      }, body) : /*#__PURE__*/React.createElement(\"a\", {\n        href: this.props.href,\n        className: \"slds-box slds-box_link slds-media\"\n      }, body));\n    }\n  }]);\n\n  return Tile;\n}(React.Component);\n\nTile.displayName = displayName;\nTile.propTypes = propTypes;\nTile.defaultProps = defaultProps;\nexport default Tile;","map":{"version":3,"sources":["../../../.tmp-es/components/welcome-mat/tile.jsx"],"names":["displayName","propTypes","assistiveText","completedIcon","PropTypes","string","className","id","title","description","href","icon","isComplete","variant","defaultProps","Tile","React","Component","shortid","body","classNames","label"],"mappings":"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","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// Implements the [Welcome Mat Tile design pattern](https://lightningdesignsystem.com/components/welcome-mat/) in React.\n// Based on SLDS v2.4.0\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n// ### shortid\n// [npmjs.com/package/shortid](https://www.npmjs.com/package/shortid)\n// shortid is a short, non-sequential, url-friendly, unique id generator\nimport shortid from 'shortid';\n\nimport Icon from '../icon';\n\nimport { WELCOME_MAT_TILE } from '../../utilities/constants';\n\nconst displayName = WELCOME_MAT_TILE;\n\nconst propTypes = {\n\t/**\n\t * **Assistive text for accessibility.**\n\t * This object is merged with the default props object on every render.\n\t * * `completeIcon`: Text that is visually hidden but read aloud by screenreaders to tell the user what the complete icon means.\n\t */\n\tassistiveText: PropTypes.shape({\n\t\tcompletedIcon: PropTypes.string,\n\t}),\n\t/**\n\t * CSS class names to be added to the container element. `array`, `object`, or `string` are accepted.\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * HTML id for component.\n\t */\n\tid: PropTypes.string,\n\t/**\n\t * Title for the tile component.\n\t */\n\ttitle: PropTypes.string,\n\t/**\n\t * Description for the tile component.\n\t */\n\tdescription: PropTypes.string,\n\t/**\n\t * Href for the tile link\n\t */\n\thref: PropTypes.string,\n\t/**\n\t * Icon for the tile\n\t */\n\ticon: PropTypes.node,\n\t/**\n\t * Whether the tile is completed\n\t */\n\tisComplete: PropTypes.bool,\n\t/**\n\t * Variant of the Welcome Mat Tile\n\t */\n\tvariant: PropTypes.oneOf([\n\t\t'steps',\n\t\t'info-only',\n\t\t'splash',\n\t\t'trailhead-connected',\n\t]),\n};\n\nconst defaultProps = {\n\tassistiveText: {\n\t\tcompletedIcon: 'Completed',\n\t},\n\tisComplete: false,\n\tvariant: 'steps',\n};\n\n/**\n * Tile component item represents a tile in a Welcome Mat\n */\nclass Tile extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.generatedId = shortid.generate();\n\t}\n\n\t/**\n\t * Get the Welcome Mat Tile's HTML id. Generate a new one if no ID present.\n\t */\n\tgetId() {\n\t\treturn this.props.id || this.generatedId;\n\t}\n\n\trender() {\n\t\tconst assistiveText = {\n\t\t\t...defaultProps.assistiveText,\n\t\t\t...this.props.assistiveText,\n\t\t};\n\t\tconst body = (\n\t\t\t<React.Fragment>\n\t\t\t\t<div\n\t\t\t\t\tclassName={classNames(\n\t\t\t\t\t\t'slds-media__figure',\n\t\t\t\t\t\t'slds-media__figure_fixed-width',\n\t\t\t\t\t\t'slds-align_absolute-center'\n\t\t\t\t\t)}\n\t\t\t\t>\n\t\t\t\t\t<div className=\"slds-welcome-mat__tile-figure\">\n\t\t\t\t\t\t<div className=\"slds-welcome-mat__tile-icon-container\">\n\t\t\t\t\t\t\t{this.props.icon}\n\t\t\t\t\t\t\t{this.props.isComplete && this.props.variant !== 'info-only' ? (\n\t\t\t\t\t\t\t\t<Icon\n\t\t\t\t\t\t\t\t\tassistiveText={{\n\t\t\t\t\t\t\t\t\t\tlabel: assistiveText.completedIcon,\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\tcategory=\"action\"\n\t\t\t\t\t\t\t\t\tname=\"check\"\n\t\t\t\t\t\t\t\t\ttitle={assistiveText.completedIcon}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"slds-media__body\">\n\t\t\t\t\t<div className=\"slds-welcome-mat__tile-body\">\n\t\t\t\t\t\t<h3 className=\"slds-welcome-mat__tile-title\">{this.props.title}</h3>\n\t\t\t\t\t\t<p className=\"slds-welcome-mat__tile-description\">\n\t\t\t\t\t\t\t{this.props.description}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</React.Fragment>\n\t\t);\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\tid={this.getId()}\n\t\t\t\tclassName={classNames(\n\t\t\t\t\t'slds-welcome-mat__tile',\n\t\t\t\t\tthis.props.variant === 'info-only'\n\t\t\t\t\t\t? 'slds-welcome-mat__tile_info-only'\n\t\t\t\t\t\t: null,\n\t\t\t\t\tthis.props.isComplete && this.props.variant !== 'info-only'\n\t\t\t\t\t\t? 'slds-welcome-mat__tile_complete'\n\t\t\t\t\t\t: null,\n\t\t\t\t\tthis.props.className\n\t\t\t\t)}\n\t\t\t>\n\t\t\t\t{this.props.variant === 'info-only' ? (\n\t\t\t\t\t<div className=\"slds-media\">{body}</div>\n\t\t\t\t) : (\n\t\t\t\t\t<a\n\t\t\t\t\t\thref={this.props.href}\n\t\t\t\t\t\tclassName=\"slds-box slds-box_link slds-media\"\n\t\t\t\t\t>\n\t\t\t\t\t\t{body}\n\t\t\t\t\t</a>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nTile.displayName = displayName;\nTile.propTypes = propTypes;\nTile.defaultProps = defaultProps;\n\nexport default Tile;\n"]},"metadata":{},"sourceType":"module"}