{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n// # Spinner Component --- SLDS for React\n// Implements the [Spinner design pattern - 2.1.0-beta.3 (204)](https://latest-204.lightningdesignsystem.com/components/spinners) in React.\n// ### React\n\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport checkProps from './check-props'; // ## Constants\n\nimport { SPINNER } from '../../utilities/constants';\nimport componentDoc from './component.json'; // ### Prop Types\n\nvar propTypes = {\n  /**\n   * **Assistive text for accessibility.**\n   * This object is merged with the default props object on every render.\n   * * `label`: Assistive text that is read out loud to screen readers.\n   */\n  assistiveText: PropTypes.shape({\n    label: PropTypes.string\n  }),\n\n  /**\n   * Custom css classes applied to Spinner container\n   */\n  containerClassName: PropTypes.string,\n\n  /**\n   * Custom css properties applied to Spinner container\n   */\n  containerStyle: PropTypes.object,\n\n  /**\n   * Render the spinner inside of a container.\n   */\n  hasContainer: PropTypes.bool,\n\n  /**\n   * Unique html id placed on div with role=\"status\".\n   */\n  id: PropTypes.string,\n\n  /**\n   * Adds delay of 300ms to the spinner\n   */\n  isDelayed: PropTypes.bool,\n\n  /**\n   * Add styling to support a spinner inside an input field.\n   */\n  isInput: PropTypes.bool,\n\n  /**\n   * Add styling to support an inline spinner inside of the document flow.\n   */\n  isInline: PropTypes.bool,\n\n  /**\n   * Determines the size of the spinner\n   */\n  size: PropTypes.oneOf(['xx-small', 'x-small', 'small', 'medium', 'large']),\n\n  /**\n   * Determines the color of the spinner: `base` is gray, `brand` is blue, and `inverse` is white.\n   */\n  variant: PropTypes.oneOf(['base', 'brand', 'inverse'])\n};\nvar defaultProps = {\n  assistiveText: {\n    label: 'Loading...'\n  },\n  isDelayed: false,\n  isInline: false,\n  isInput: false,\n  hasContainer: true,\n  size: 'medium',\n  variant: 'base'\n};\n/**\n * Spinners are CSS loading indicators that should be shown when retrieving data or performing slow computations. In some cases, the first time a parent component loads, a stencil is preferred to indicate network activity.\n */\n\nvar Spinner = function Spinner(props) {\n  checkProps(SPINNER, props, componentDoc);\n  var containerClassName = props.containerClassName,\n      containerStyle = props.containerStyle,\n      id = props.id,\n      isDelayed = props.isDelayed,\n      isInline = props.isInline,\n      isInput = props.isInput,\n      hasContainer = props.hasContainer,\n      size = props.size,\n      variant = props.variant;\n  var assistiveText = typeof props.assistiveText === 'string' ? props.assistiveText : _objectSpread(_objectSpread({}, defaultProps.assistiveText), props.assistiveText).label;\n  var spinnerClassName = classNames('slds-spinner', _defineProperty({\n    'slds-spinner_inline': isInline,\n    'slds-input__spinner': isInput,\n    'slds-spinner_brand': variant === 'brand',\n    'slds-spinner_inverse': variant === 'inverse',\n    'slds-spinner_delayed': isDelayed\n  }, \"slds-spinner_\".concat(size), size));\n  var spinner = /*#__PURE__*/React.createElement(\"div\", {\n    \"aria-hidden\": \"false\",\n    className: spinnerClassName,\n    id: id,\n    role: \"status\"\n  }, assistiveText && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"slds-assistive-text\"\n  }, assistiveText), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"slds-spinner__dot-a\"\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"slds-spinner__dot-b\"\n  }));\n  return hasContainer ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(containerClassName, 'slds-spinner_container'),\n    style: containerStyle\n  }, spinner) : spinner;\n};\n\nSpinner.displayName = SPINNER;\nSpinner.propTypes = propTypes;\nSpinner.defaultProps = defaultProps;\nexport default Spinner;","map":{"version":3,"sources":["../../../.tmp-es/components/spinner/index.jsx"],"names":["propTypes","assistiveText","label","PropTypes","string","containerClassName","containerStyle","hasContainer","id","isDelayed","isInput","isInline","size","variant","defaultProps","Spinner","checkProps","props","spinnerClassName","classNames","spinner"],"mappings":"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","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// # Spinner Component --- SLDS for React\n\n// Implements the [Spinner design pattern - 2.1.0-beta.3 (204)](https://latest-204.lightningdesignsystem.com/components/spinners) in React.\n\n// ### React\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport classNames from 'classnames';\n\nimport checkProps from './check-props';\n\n// ## Constants\nimport { SPINNER } from '../../utilities/constants';\n\nimport componentDoc from './component.json';\n\n// ### Prop Types\nconst propTypes = {\n\t/**\n\t * **Assistive text for accessibility.**\n\t * This object is merged with the default props object on every render.\n\t * * `label`: Assistive text that is read out loud to screen readers.\n\t */\n\tassistiveText: PropTypes.shape({\n\t\tlabel: PropTypes.string,\n\t}),\n\t/**\n\t * Custom css classes applied to Spinner container\n\t */\n\tcontainerClassName: PropTypes.string,\n\t/**\n\t * Custom css properties applied to Spinner container\n\t */\n\tcontainerStyle: PropTypes.object,\n\t/**\n\t * Render the spinner inside of a container.\n\t */\n\thasContainer: PropTypes.bool,\n\t/**\n\t * Unique html id placed on div with role=\"status\".\n\t */\n\tid: PropTypes.string,\n\t/**\n\t * Adds delay of 300ms to the spinner\n\t */\n\tisDelayed: PropTypes.bool,\n\t/**\n\t * Add styling to support a spinner inside an input field.\n\t */\n\tisInput: PropTypes.bool,\n\t/**\n\t * Add styling to support an inline spinner inside of the document flow.\n\t */\n\tisInline: PropTypes.bool,\n\t/**\n\t * Determines the size of the spinner\n\t */\n\tsize: PropTypes.oneOf(['xx-small', 'x-small', 'small', 'medium', 'large']),\n\t/**\n\t * Determines the color of the spinner: `base` is gray, `brand` is blue, and `inverse` is white.\n\t */\n\tvariant: PropTypes.oneOf(['base', 'brand', 'inverse']),\n};\n\nconst defaultProps = {\n\tassistiveText: { label: 'Loading...' },\n\tisDelayed: false,\n\tisInline: false,\n\tisInput: false,\n\thasContainer: true,\n\tsize: 'medium',\n\tvariant: 'base',\n};\n\n/**\n * Spinners are CSS loading indicators that should be shown when retrieving data or performing slow computations. In some cases, the first time a parent component loads, a stencil is preferred to indicate network activity.\n */\nconst Spinner = (props) => {\n\tcheckProps(SPINNER, props, componentDoc);\n\tconst {\n\t\tcontainerClassName,\n\t\tcontainerStyle,\n\t\tid,\n\t\tisDelayed,\n\t\tisInline,\n\t\tisInput,\n\t\thasContainer,\n\t\tsize,\n\t\tvariant,\n\t} = props;\n\tconst assistiveText =\n\t\ttypeof props.assistiveText === 'string'\n\t\t\t? props.assistiveText\n\t\t\t: {\n\t\t\t\t\t...defaultProps.assistiveText,\n\t\t\t\t\t...props.assistiveText,\n\t\t\t  }.label;\n\n\tconst spinnerClassName = classNames('slds-spinner', {\n\t\t'slds-spinner_inline': isInline,\n\t\t'slds-input__spinner': isInput,\n\t\t'slds-spinner_brand': variant === 'brand',\n\t\t'slds-spinner_inverse': variant === 'inverse',\n\t\t'slds-spinner_delayed': isDelayed,\n\t\t[`slds-spinner_${size}`]: size,\n\t});\n\n\tconst spinner = (\n\t\t<div aria-hidden=\"false\" className={spinnerClassName} id={id} role=\"status\">\n\t\t\t{assistiveText && (\n\t\t\t\t<span className=\"slds-assistive-text\">{assistiveText}</span>\n\t\t\t)}\n\t\t\t<div className=\"slds-spinner__dot-a\" />\n\t\t\t<div className=\"slds-spinner__dot-b\" />\n\t\t</div>\n\t);\n\n\treturn hasContainer ? (\n\t\t<div\n\t\t\tclassName={classNames(containerClassName, 'slds-spinner_container')}\n\t\t\tstyle={containerStyle}\n\t\t>\n\t\t\t{spinner}\n\t\t</div>\n\t) : (\n\t\tspinner\n\t);\n};\n\nSpinner.displayName = SPINNER;\nSpinner.propTypes = propTypes;\nSpinner.defaultProps = defaultProps;\n\nexport default Spinner;\n"]},"metadata":{},"sourceType":"module"}