{"ast":null,"code":"/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { TABS_PANEL } from '../../utilities/constants';\n/**\n * The `<TabsPanel />` component allows us to simplify the structure of the `<Tabs />` component.\n\n * Rather than require different (deeply nested) children for tabslist, with its tab(s) as well as tabpanel(s), we provide this `TabsPanel` component which takes a `label` property that will become what is shown on the `<Tab />` that will be associated with it.\n\n * The `children` of the Panel will be fed to the `<TabPanel />` component, while its `label` is handled in `<Tab />`, via `<TabsList />`.\n *\n * ```\n * <TabsPanel label=\"Tab 1\">\n * \t<div>\n * \t\t<h2 className=\"slds-text-heading_medium\">This is my tab 1 contents!</h2>\n * \t\t<p>They show when you click the first tab.</p>\n * \t</div>\n * </TabsPanel>\n * ```\n */\n\nvar Panel = function Panel(_ref) {\n  var children = _ref.children;\n  return /*#__PURE__*/React.createElement(\"div\", null, React.Children.toArray(children));\n};\n\nPanel.displayName = TABS_PANEL;\nPanel.propTypes = {\n  /**\n   * The string or element that is handed off to the `<Tab />` component, ends up being the title and the label for the tab associated with its tab panel.\n   */\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.element]).isRequired,\n\n  /**\n   * The `children` are the actual tab panels to be rendered. They get created by [tabs/index.jsx](./index.jsx) in the `renderTabPanels` function.\n   *\n   * Note that the `<TabsPanel />` component inserts a `div` element around the children, because React requires exactly one \"parent\" element returned. The `<TabPanel />` component simply dips down into `children` to get the children of this wrapping `div` so that it does not get rendered in the DOM.\n   */\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node, PropTypes.element]).isRequired,\n\n  /**\n   * Show an icon on the `<Tab />` next to the title that can be used to communicate when a tab contains a validation error that needs attention\n   */\n  hasError: PropTypes.bool,\n  // deepscan-disable-line REACT_USELESS_PROP_TYPES\n\n  /**\n   * **Assistive text for accessibility**\n   * This object is merged with the default props object on every render.\n   * * `withErrorIcon`: This text is for the error icon that will be placed next to the `<Tab />` title\n   */\n\n  /* deepscan-disable REACT_USELESS_PROP_TYPES */\n  assistiveText: PropTypes.shape({\n    withErrorIcon: PropTypes.string\n  })\n  /* deepscan-enable REACT_USELESS_PROP_TYPES */\n\n};\nexport default Panel;","map":{"version":3,"sources":["../../../.tmp-es/components/tabs/panel.jsx"],"names":["Panel","children","React","label","PropTypes","hasError","assistiveText","withErrorIcon","string"],"mappings":"AAAA;;AACA;AAEA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;AAEA,SAAA,UAAA,QAAA,2BAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMA,KAAK,GAAG,SAARA,KAAQ,CAAA,IAAA,EAAA;AAAA,MAAGC,QAAH,GAAA,IAAA,CAAA,QAAA;AAAA,SAAA,aAAkB,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,IAAA,EAAMC,KAAK,CAALA,QAAAA,CAAAA,OAAAA,CAAxB,QAAwBA,CAAN,CAAlB;AAAd,CAAA;;AAEAF,KAAK,CAALA,WAAAA,GAAAA,UAAAA;AAEAA,KAAK,CAALA,SAAAA,GAAkB;AACjB;AACD;AACA;AACCG,EAAAA,KAAK,EAAEC,SAAS,CAATA,SAAAA,CAAoB,CAACA,SAAS,CAAV,MAAA,EAAmBA,SAAS,CAAhDA,OAAoB,CAApBA,EAJU,UAAA;;AAMjB;AACD;AACA;AACA;AACA;AACCH,EAAAA,QAAQ,EAAEG,SAAS,CAATA,SAAAA,CAAoB,CAC7BA,SAAS,CAATA,OAAAA,CAAkBA,SAAS,CADE,IAC7BA,CAD6B,EAE7BA,SAAS,CAFoB,IAAA,EAG7BA,SAAS,CAHAA,OAAoB,CAApBA,EAXO,UAAA;;AAiBjB;AACD;AACA;AACCC,EAAAA,QAAQ,EAAED,SAAS,CApBF,IAAA;AAoBS;;AAE1B;AACD;AACA;AACA;AACA;;AACC;AACAE,EAAAA,aAAa,EAAE,SAAS,CAAT,KAAA,CAAgB;AAC9BC,IAAAA,aAAa,EAAEH,SAAS,CAACI;AADK,GAAhB;AAGf;;AA/BiB,CAAlBR;AAkCA,eAAA,KAAA","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { TABS_PANEL } from '../../utilities/constants';\n\n/**\n * The `<TabsPanel />` component allows us to simplify the structure of the `<Tabs />` component.\n\n * Rather than require different (deeply nested) children for tabslist, with its tab(s) as well as tabpanel(s), we provide this `TabsPanel` component which takes a `label` property that will become what is shown on the `<Tab />` that will be associated with it.\n\n * The `children` of the Panel will be fed to the `<TabPanel />` component, while its `label` is handled in `<Tab />`, via `<TabsList />`.\n *\n * ```\n * <TabsPanel label=\"Tab 1\">\n * \t<div>\n * \t\t<h2 className=\"slds-text-heading_medium\">This is my tab 1 contents!</h2>\n * \t\t<p>They show when you click the first tab.</p>\n * \t</div>\n * </TabsPanel>\n * ```\n */\nconst Panel = ({ children }) => <div>{React.Children.toArray(children)}</div>;\n\nPanel.displayName = TABS_PANEL;\n\nPanel.propTypes = {\n\t/**\n\t * The string or element that is handed off to the `<Tab />` component, ends up being the title and the label for the tab associated with its tab panel.\n\t */\n\tlabel: PropTypes.oneOfType([PropTypes.string, PropTypes.element]).isRequired,\n\n\t/**\n\t * The `children` are the actual tab panels to be rendered. They get created by [tabs/index.jsx](./index.jsx) in the `renderTabPanels` function.\n\t *\n\t * Note that the `<TabsPanel />` component inserts a `div` element around the children, because React requires exactly one \"parent\" element returned. The `<TabPanel />` component simply dips down into `children` to get the children of this wrapping `div` so that it does not get rendered in the DOM.\n\t */\n\tchildren: PropTypes.oneOfType([\n\t\tPropTypes.arrayOf(PropTypes.node),\n\t\tPropTypes.node,\n\t\tPropTypes.element,\n\t]).isRequired,\n\n\t/**\n\t * Show an icon on the `<Tab />` next to the title that can be used to communicate when a tab contains a validation error that needs attention\n\t */\n\thasError: PropTypes.bool, // deepscan-disable-line REACT_USELESS_PROP_TYPES\n\n\t/**\n\t * **Assistive text for accessibility**\n\t * This object is merged with the default props object on every render.\n\t * * `withErrorIcon`: This text is for the error icon that will be placed next to the `<Tab />` title\n\t */\n\t/* deepscan-disable REACT_USELESS_PROP_TYPES */\n\tassistiveText: PropTypes.shape({\n\t\twithErrorIcon: PropTypes.string,\n\t}),\n\t/* deepscan-enable REACT_USELESS_PROP_TYPES */\n};\n\nexport default Panel;\n"]},"metadata":{},"sourceType":"module"}