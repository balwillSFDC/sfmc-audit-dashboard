{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n\nimport React from 'react';\nimport PropTypes from 'prop-types'; // ### classNames\n// [github.com/JedWatson/classnames](https://github.com/JedWatson/classnames)\n// This project uses `classnames`, 'a simple javascript utility for conditionally\n// joining classNames together.'\n\nimport classNames from 'classnames';\nimport ProgressBar from './progress-bar';\nimport { PROGRESS_INDICATOR_PROGRESS } from '../../../utilities/constants'; // ### Prop Types\n\nvar propTypes = {\n  /**\n   * Assistive text for percentage\n   */\n  assistiveText: PropTypes.shape({\n    percentage: PropTypes.string\n  }),\n\n  /**\n   * Steps in the component\n   */\n  children: PropTypes.node,\n\n  /**\n   * CSS class names to be added to the container element.\n   */\n  className: PropTypes.oneOfType([PropTypes.array, PropTypes.object, PropTypes.string]),\n\n  /**\n   * HTML id for component.\n   */\n  id: PropTypes.string.isRequired,\n\n  /**\n   * Determines the orientation of the progress indicator\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n\n  /**\n   * Percentage of progress completion, ranging [0, 100]\n   */\n  value: PropTypes.string.isRequired,\n\n  /**\n   * Determines component style\n   */\n  variant: PropTypes.oneOf(['base', 'modal', 'setup-assistant'])\n};\n/**\n * Progress renders all step buttons and a container wrapping these buttongs and a progress bar\n */\n\nvar Progress = /*#__PURE__*/function (_React$Component) {\n  _inherits(Progress, _React$Component);\n\n  var _super = _createSuper(Progress);\n\n  function Progress() {\n    _classCallCheck(this, Progress);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Progress, [{\n    key: \"getId\",\n\n    /**\n     * Get the progress's HTML id. Generate a new one if no ID present.\n     */\n    value: function getId() {\n      return this.props.id;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        id: this.getId(),\n        className: classNames('slds-progress', {\n          'slds-progress_shade': this.props.variant === 'modal'\n        }, {\n          'slds-progress_vertical': this.props.orientation === 'vertical'\n        }, {\n          'slds-progress_success': this.props.variant === 'setup-assistant'\n        }, this.props.className)\n      }, /*#__PURE__*/React.createElement(\"ol\", {\n        className: classNames('slds-progress__list', {\n          'slds-progress__list-bordered': this.props.variant === 'setup-assistant'\n        })\n      }, this.props.children), this.props.orientation !== 'vertical' && /*#__PURE__*/React.createElement(ProgressBar, {\n        value: this.props.value,\n        orientation: this.props.orientation,\n        assistiveText: this.props.assistiveText\n      }));\n    }\n  }]);\n\n  return Progress;\n}(React.Component);\n\nProgress.propTypes = propTypes;\nProgress.displayName = PROGRESS_INDICATOR_PROGRESS;\nexport default Progress;","map":{"version":3,"sources":["../../../../.tmp-es/components/progress-indicator/private/progress.jsx"],"names":["propTypes","assistiveText","percentage","PropTypes","string","children","className","id","orientation","value","variant","Progress","React","Component","classNames"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;AAEA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA,C,CAEA;AACA;AACA;AACA;;AACA,OAAA,UAAA,MAAA,YAAA;AAEA,OAAA,WAAA,MAAA,gBAAA;AAEA,SAAA,2BAAA,QAAA,8BAAA,C,CAEA;;AACA,IAAMA,SAAS,GAAG;AACjB;AACD;AACA;AACCC,EAAAA,aAAa,EAAE,SAAS,CAAT,KAAA,CAAgB;AAC9BC,IAAAA,UAAU,EAAEC,SAAS,CAACC;AADQ,GAAhB,CAJE;;AAOjB;AACD;AACA;AACCC,EAAAA,QAAQ,EAAEF,SAAS,CAVF,IAAA;;AAWjB;AACD;AACA;AACCG,EAAAA,SAAS,EAAEH,SAAS,CAATA,SAAAA,CAAoB,CAC9BA,SAAS,CADqB,KAAA,EAE9BA,SAAS,CAFqB,MAAA,EAG9BA,SAAS,CAjBO,MAcc,CAApBA,CAdM;;AAmBjB;AACD;AACA;AACCI,EAAAA,EAAE,EAAEJ,SAAS,CAATA,MAAAA,CAtBa,UAAA;;AAuBjB;AACD;AACA;AACCK,EAAAA,WAAW,EAAEL,SAAS,CAATA,KAAAA,CAAgB,CAAA,YAAA,EA1BZ,UA0BY,CAAhBA,CA1BI;;AA2BjB;AACD;AACA;AACCM,EAAAA,KAAK,EAAEN,SAAS,CAATA,MAAAA,CA9BU,UAAA;;AA+BjB;AACD;AACA;AACCO,EAAAA,OAAO,EAAEP,SAAS,CAATA,KAAAA,CAAgB,CAAA,MAAA,EAAA,OAAA,EAAhBA,iBAAgB,CAAhBA;AAlCQ,CAAlB;AAqCA;AACA;AACA;;IACMQ,Q;;;;;;;;;;;;;;AACL;AACD;AACA;4BACS;AACP,aAAO,KAAA,KAAA,CAAP,EAAA;AACA;;;6BAEQ;AACR,aAAA,aACC,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACC,QAAA,EAAE,EAAE,KADL,KACK,EADL;AAEC,QAAA,SAAS,EAAEG,UAAU,CAAA,eAAA,EAEpB;AAAE,iCAAuB,KAAA,KAAA,CAAA,OAAA,KAAuB;AAAhD,SAFoB,EAGpB;AAAE,oCAA0B,KAAA,KAAA,CAAA,WAAA,KAA2B;AAAvD,SAHoB,EAIpB;AAAE,mCAAyB,KAAA,KAAA,CAAA,OAAA,KAAuB;AAAlD,SAJoB,EAKpB,KAAA,KAAA,CALoB,SAAA;AAFtB,OAAA,EAAA,aAUC,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AACC,QAAA,SAAS,EAAEA,UAAU,CAAA,qBAAA,EAAwB;AAC5C,0CACC,KAAA,KAAA,CAAA,OAAA,KAAuB;AAFoB,SAAxB;AADtB,OAAA,EAME,KAAA,KAAA,CAhBH,QAUC,CAVD,EAkBE,KAAA,KAAA,CAAA,WAAA,KAAA,UAAA,IAAA,aACA,KAAA,CAAA,aAAA,CAAA,WAAA,EAAA;AACC,QAAA,KAAK,EAAE,KAAA,KAAA,CADR,KAAA;AAEC,QAAA,WAAW,EAAE,KAAA,KAAA,CAFd,WAAA;AAGC,QAAA,aAAa,EAAE,KAAA,KAAA,CAAWb;AAH3B,OAAA,CAnBF,CADD;AA4BA;;;;EArCqBW,KAAK,CAACC,S;;AAwC7BF,QAAQ,CAARA,SAAAA,GAAAA,SAAAA;AACAA,QAAQ,CAARA,WAAAA,GAAAA,2BAAAA;AAEA,eAAA,QAAA","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n// ### classNames\n// [github.com/JedWatson/classnames](https://github.com/JedWatson/classnames)\n// This project uses `classnames`, 'a simple javascript utility for conditionally\n// joining classNames together.'\nimport classNames from 'classnames';\n\nimport ProgressBar from './progress-bar';\n\nimport { PROGRESS_INDICATOR_PROGRESS } from '../../../utilities/constants';\n\n// ### Prop Types\nconst propTypes = {\n\t/**\n\t * Assistive text for percentage\n\t */\n\tassistiveText: PropTypes.shape({\n\t\tpercentage: PropTypes.string,\n\t}),\n\t/**\n\t * Steps in the component\n\t */\n\tchildren: PropTypes.node,\n\t/**\n\t * CSS class names to be added to the container element.\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * HTML id for component.\n\t */\n\tid: PropTypes.string.isRequired,\n\t/**\n\t * Determines the orientation of the progress indicator\n\t */\n\torientation: PropTypes.oneOf(['horizontal', 'vertical']),\n\t/**\n\t * Percentage of progress completion, ranging [0, 100]\n\t */\n\tvalue: PropTypes.string.isRequired,\n\t/**\n\t * Determines component style\n\t */\n\tvariant: PropTypes.oneOf(['base', 'modal', 'setup-assistant']),\n};\n\n/**\n * Progress renders all step buttons and a container wrapping these buttongs and a progress bar\n */\nclass Progress extends React.Component {\n\t/**\n\t * Get the progress's HTML id. Generate a new one if no ID present.\n\t */\n\tgetId() {\n\t\treturn this.props.id;\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div\n\t\t\t\tid={this.getId()}\n\t\t\t\tclassName={classNames(\n\t\t\t\t\t'slds-progress',\n\t\t\t\t\t{ 'slds-progress_shade': this.props.variant === 'modal' },\n\t\t\t\t\t{ 'slds-progress_vertical': this.props.orientation === 'vertical' },\n\t\t\t\t\t{ 'slds-progress_success': this.props.variant === 'setup-assistant' },\n\t\t\t\t\tthis.props.className\n\t\t\t\t)}\n\t\t\t>\n\t\t\t\t<ol\n\t\t\t\t\tclassName={classNames('slds-progress__list', {\n\t\t\t\t\t\t'slds-progress__list-bordered':\n\t\t\t\t\t\t\tthis.props.variant === 'setup-assistant',\n\t\t\t\t\t})}\n\t\t\t\t>\n\t\t\t\t\t{this.props.children}\n\t\t\t\t</ol>\n\t\t\t\t{this.props.orientation !== 'vertical' && (\n\t\t\t\t\t<ProgressBar\n\t\t\t\t\t\tvalue={this.props.value}\n\t\t\t\t\t\torientation={this.props.orientation}\n\t\t\t\t\t\tassistiveText={this.props.assistiveText}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nProgress.propTypes = propTypes;\nProgress.displayName = PROGRESS_INDICATOR_PROGRESS;\n\nexport default Progress;\n"]},"metadata":{},"sourceType":"module"}