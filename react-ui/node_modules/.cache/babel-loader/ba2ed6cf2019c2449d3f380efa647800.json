{"ast":null,"code":"/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n/* eslint-disable import/no-mutable-exports */\n\n/* global XMLHttpRequest, window */\n// This function does an \"AJAX\" request to warn users on how to setup their icon path.\nimport warning from 'warning';\n\nvar urlExists = function urlExistsFunction() {};\n\nif (process.env.NODE_ENV !== 'production') {\n  var hasWarned = {};\n  var hasExecuted;\n\n  var warn = function warn(control, url, comment) {\n    return function (res) {\n      hasExecuted = true;\n\n      if (res.status === 404) {\n        var additionalComment = comment ? \" \".concat(comment) : '';\n        /* eslint-disable max-len */\n\n        warning(!url, \"The icon asset was not found at \".concat(url, \". Make sure the path to the icon asset is correct. You can set the icon path by importing the IconSettings component, `<IconSettings iconPath=[/assets/icons]>` from `components/iconSettings`, and wrap that component around your entire app or around individual components using icons. If you are using the `<Icon>` component, you can also pass the url to `this.props.path`.\").concat(additionalComment));\n        /* eslint-enable max-len */\n\n        hasWarned[\"\".concat(control, \"-path\")] = !!url;\n      }\n    };\n  };\n\n  var shouldWarn = function shouldWarn(control) {\n    return !hasExecuted && !hasWarned[\"\".concat(control, \"-path\")] && typeof window !== 'undefined' && process.env.NODE_ENV !== 'test';\n  };\n\n  if (typeof fetch === 'function') {\n    urlExists = function urlExistsFunction(control, url, comment) {\n      if (shouldWarn(control)) {\n        fetch(url).then(warn(control, url, comment));\n      }\n    };\n  } else {\n    // Using XMLHttpRequest can cause problems in non-browser environments. This should be completely removed in production environment and should not execute in a testing environment.\n    urlExists = function urlExistsFunction(control, url, comment) {\n      if (shouldWarn(control) && XMLHttpRequest) {\n        var http = new XMLHttpRequest();\n        http.open('GET', url, false);\n        http.send();\n        warn(control, url, comment)(http);\n      }\n    };\n  }\n}\n\nexport default urlExists;","map":{"version":3,"sources":["../../../.tmp-es/utilities/warning/url-exists.js"],"names":["urlExists","process","hasWarned","warn","hasExecuted","res","additionalComment","comment","warning","shouldWarn","fetch","http"],"mappings":"AAAA;;AACA;;AAEA;;AACA;AAEA;AACA,OAAA,OAAA,MAAA,SAAA;;AAEA,IAAIA,SAAS,GAAG,SAAA,iBAAA,GAA6B,CAA7C,CAAA;;AAEA,IAAIC,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,KAAJ,YAAA,EAA2C;AAC1C,MAAMC,SAAS,GAAf,EAAA;AACA,MAAA,WAAA;;AAEA,MAAMC,IAAI,GAAG,SAAPA,IAAO,CAAA,OAAA,EAAA,GAAA,EAAA,OAAA,EAAA;AAAA,WAA2B,UAAA,GAAA,EAAS;AAChDC,MAAAA,WAAW,GAAXA,IAAAA;;AACA,UAAIC,GAAG,CAAHA,MAAAA,KAAJ,GAAA,EAAwB;AACvB,YAAMC,iBAAiB,GAAGC,OAAO,GAAA,IAAA,MAAA,CAAA,OAAA,CAAA,GAAjC,EAAA;AACA;;AACAC,QAAAA,OAAO,CACN,CADM,GAAA,EAAA,mCAAA,MAAA,CAAA,GAAA,EAAA,sXAAA,EAAA,MAAA,CAAPA,iBAAO,CAAA,CAAPA;AAIA;;AACAN,QAAAA,SAAS,CAAA,GAAA,MAAA,CAAA,OAAA,EAATA,OAAS,CAAA,CAATA,GAA+B,CAAC,CAAhCA,GAAAA;AACA;AAXW,KAAA;AAAb,GAAA;;AAcA,MAAMO,UAAU,GAAG,SAAbA,UAAa,CAAA,OAAA,EAAA;AAAA,WAClB,CAAA,WAAA,IACA,CAACP,SAAS,CAAA,GAAA,MAAA,CAAA,OAAA,EADV,OACU,CAAA,CADV,IAEA,OAAA,MAAA,KAFA,WAAA,IAGAD,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,KAJkB,MAAA;AAAnB,GAAA;;AAMA,MAAI,OAAA,KAAA,KAAJ,UAAA,EAAiC;AAChCD,IAAAA,SAAS,GAAG,SAAA,iBAAA,CAAA,OAAA,EAAA,GAAA,EAAA,OAAA,EAAkD;AAC7D,UAAIS,UAAU,CAAd,OAAc,CAAd,EAAyB;AACxBC,QAAAA,KAAK,CAALA,GAAK,CAALA,CAAAA,IAAAA,CAAgBP,IAAI,CAAA,OAAA,EAAA,GAAA,EAApBO,OAAoB,CAApBA;AACA;AAHFV,KAAAA;AADD,GAAA,MAMO;AACN;AACAA,IAAAA,SAAS,GAAG,SAAA,iBAAA,CAAA,OAAA,EAAA,GAAA,EAAA,OAAA,EAAkD;AAC7D,UAAIS,UAAU,CAAVA,OAAU,CAAVA,IAAJ,cAAA,EAA2C;AAC1C,YAAME,IAAI,GAAG,IAAb,cAAa,EAAb;AACAA,QAAAA,IAAI,CAAJA,IAAAA,CAAAA,KAAAA,EAAAA,GAAAA,EAAAA,KAAAA;AACAA,QAAAA,IAAI,CAAJA,IAAAA;AACAR,QAAAA,IAAI,CAAA,OAAA,EAAA,GAAA,EAAJA,OAAI,CAAJA,CAAAA,IAAAA;AACA;AANFH,KAAAA;AAQA;AACD;;AAED,eAAA,SAAA","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n/* eslint-disable import/no-mutable-exports */\n/* global XMLHttpRequest, window */\n\n// This function does an \"AJAX\" request to warn users on how to setup their icon path.\nimport warning from 'warning';\n\nlet urlExists = function urlExistsFunction() {};\n\nif (process.env.NODE_ENV !== 'production') {\n\tconst hasWarned = {};\n\tlet hasExecuted;\n\n\tconst warn = (control, url, comment) => (res) => {\n\t\thasExecuted = true;\n\t\tif (res.status === 404) {\n\t\t\tconst additionalComment = comment ? ` ${comment}` : '';\n\t\t\t/* eslint-disable max-len */\n\t\t\twarning(\n\t\t\t\t!url,\n\t\t\t\t`The icon asset was not found at ${url}. Make sure the path to the icon asset is correct. You can set the icon path by importing the IconSettings component, \\`<IconSettings iconPath=[/assets/icons]>\\` from \\`components/iconSettings\\`, and wrap that component around your entire app or around individual components using icons. If you are using the \\`<Icon>\\` component, you can also pass the url to \\`this.props.path\\`.${additionalComment}`\n\t\t\t);\n\t\t\t/* eslint-enable max-len */\n\t\t\thasWarned[`${control}-path`] = !!url;\n\t\t}\n\t};\n\n\tconst shouldWarn = (control) =>\n\t\t!hasExecuted &&\n\t\t!hasWarned[`${control}-path`] &&\n\t\ttypeof window !== 'undefined' &&\n\t\tprocess.env.NODE_ENV !== 'test';\n\n\tif (typeof fetch === 'function') {\n\t\turlExists = function urlExistsFunction(control, url, comment) {\n\t\t\tif (shouldWarn(control)) {\n\t\t\t\tfetch(url).then(warn(control, url, comment));\n\t\t\t}\n\t\t};\n\t} else {\n\t\t// Using XMLHttpRequest can cause problems in non-browser environments. This should be completely removed in production environment and should not execute in a testing environment.\n\t\turlExists = function urlExistsFunction(control, url, comment) {\n\t\t\tif (shouldWarn(control) && XMLHttpRequest) {\n\t\t\t\tconst http = new XMLHttpRequest();\n\t\t\t\thttp.open('GET', url, false);\n\t\t\t\thttp.send();\n\t\t\t\twarn(control, url, comment)(http);\n\t\t\t}\n\t\t};\n\t}\n}\n\nexport default urlExists;\n"]},"metadata":{},"sourceType":"module"}