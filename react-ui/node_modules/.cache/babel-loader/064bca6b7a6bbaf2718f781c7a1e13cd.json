{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Button from '../button';\nimport Icon from '../icon';\nimport checkProps from './check-props';\nvar displayName = 'Notification';\nvar propTypes = {\n  iconCategory: PropTypes.string,\n\n  /**\n   * Custom classes applied to Notification element.\n   */\n  className: PropTypes.string,\n\n  /**\n   * Message for Notification.\n   */\n  content: PropTypes.node.isRequired,\n\n  /**\n   * If true, close button appears for users to dismiss Notification.\n   */\n  dismissible: PropTypes.bool,\n\n  /**\n   * If duration exists, the Notification will disappear after that amount of time.\n   */\n  duration: PropTypes.number,\n\n  /**\n   * Name of the icon. Visit <a href='http://www.lightningdesignsystem.com/resources/icons'>Lighning Design System Icons</a> to reference icon names.\n   */\n  iconName: PropTypes.string,\n  isOpen: PropTypes.bool.isRequired,\n  onDismiss: PropTypes.func,\n\n  /**\n   * Styling for Notification background.\n   */\n  texture: PropTypes.bool,\n\n  /**\n   * Styling for Notification background color. Please reference <a href='http://www.lightningdesignsystem.com/components/utilities/themes/#color'>Lighning Design System Themes > Color</a>.\n   */\n  theme: PropTypes.oneOf(['success', 'warning', 'error', 'offline']),\n  variant: PropTypes.oneOf(['alert', 'toast']).isRequired\n};\nvar defaultProps = {\n  iconCategory: 'utility',\n  dismissible: true,\n  isOpen: false,\n  texture: false\n};\n/**\n * ** Notification is deprecated. Please use an Alert and Toast instead.**\n * The Notification component is the Alert and Toast variants of the Lightning Design System Notification component. For prompt notifications, use the <a href='#/modal'>Modal</a> component with <code>prompt={true}</code>.\n * The Notification opens from a state change outside of the component itself (pass this state to the <code>isOpen</code> prop).\n */\n\nvar Notification = /*#__PURE__*/function (_React$Component) {\n  _inherits(Notification, _React$Component);\n\n  var _super = _createSuper(Notification);\n\n  function Notification(props) {\n    var _this;\n\n    _classCallCheck(this, Notification);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"onDismiss\", function () {\n      if (_this.timeout) {\n        clearTimeout(_this.timeout);\n        _this.timeout = null;\n      }\n\n      if (_this.props.onDismiss) _this.props.onDismiss();\n\n      if (_this.state.returnFocusTo && _this.state.returnFocusTo.focus) {\n        _this.state.returnFocusTo.focus();\n      }\n    });\n\n    _this.state = {};\n    _this.timeout = null;\n    return _this;\n  }\n\n  _createClass(Notification, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      checkProps('Notification', this.props);\n\n      if (this.props.duration) {\n        this.timeout = setTimeout(function () {\n          _this2.onDismiss();\n        }, this.props.duration);\n      }\n    } // eslint-disable-next-line camelcase, react/sort-comp\n\n  }, {\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      var _this3 = this;\n\n      if (nextProps.duration) {\n        if (this.timeout) {\n          clearTimeout(this.timeout);\n        }\n\n        if (nextProps.isOpen) {\n          this.timeout = setTimeout(function () {\n            _this3.onDismiss();\n          }, this.props.duration);\n        }\n      }\n\n      if (nextProps.isOpen !== this.props.isOpen) {\n        this.setState({\n          returnFocusTo: document.activeElement\n        });\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.isOpen !== this.props.isOpen) {\n        var btn = this.dismissBtnRef;\n        if (btn) btn.focus();\n      }\n    }\n  }, {\n    key: \"getClassName\",\n    value: function getClassName() {\n      var _classNames;\n\n      return classNames(this.props.className, 'slds-notify', (_classNames = {}, _defineProperty(_classNames, \"slds-notify_\".concat(this.props.variant), this.props.variant), _defineProperty(_classNames, \"slds-theme_\".concat(this.props.theme), this.props.theme), _defineProperty(_classNames, 'slds-theme_alert-texture', this.props.texture), _classNames));\n    }\n    /*\n     * The parent container with role='alert' only announces its content if there is a change inside of it.\n     * Because React renders the entire element to the DOM, we must switch out a blank div for the real content.\n     * Bummer, I know.\n     */\n    // eslint-disable-next-line class-methods-use-this\n\n  }, {\n    key: \"blankContent\",\n    value: function blankContent() {\n      return /*#__PURE__*/React.createElement(\"div\", null);\n    }\n  }, {\n    key: \"renderAlertContent\",\n    value: function renderAlertContent() {\n      return /*#__PURE__*/React.createElement(\"h2\", {\n        id: \"dialogTitle\"\n      }, this.renderIcon(), this.props.content);\n    }\n  }, {\n    key: \"renderClose\",\n    value: function renderClose() {\n      var _this4 = this;\n\n      if (this.props.dismissible) {\n        var size = null;\n        if (this.props.variant === 'toast') size = 'large'; // i18n\n\n        return /*#__PURE__*/React.createElement(Button, {\n          assistiveText: {\n            icon: 'Dismiss Notification'\n          },\n          iconCategory: \"utility\",\n          iconName: \"close\",\n          iconSize: size,\n          inverse: true,\n          className: \"slds-notify__close\",\n          onClick: this.onDismiss,\n          buttonRef: function buttonRef(dismissBtn) {\n            _this4.dismissBtnRef = dismissBtn;\n          },\n          variant: \"icon\"\n        });\n      }\n\n      return null;\n    }\n  }, {\n    key: \"renderContent\",\n    value: function renderContent() {\n      return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"slds-assistive-text\"\n      }, this.props.theme), this.renderClose(), this.props.variant === 'toast' ? this.renderToastContent() : null, this.props.variant === 'alert' ? this.renderAlertContent() : null);\n    }\n  }, {\n    key: \"renderIcon\",\n    value: function renderIcon() {\n      if (this.props.iconName) {\n        var classes = '';\n\n        if (this.props.variant === 'alert') {\n          classes = 'slds-m-right_x-small';\n        } else if (this.props.variant === 'toast') {\n          classes = 'slds-m-right_small slds-col slds-no-flex';\n        }\n\n        return /*#__PURE__*/React.createElement(Icon, {\n          category: this.props.iconCategory,\n          className: classes,\n          inverse: true,\n          name: this.props.iconName,\n          size: \"small\"\n        });\n      }\n\n      return null;\n    }\n  }, {\n    key: \"renderToastContent\",\n    value: function renderToastContent() {\n      return /*#__PURE__*/React.createElement(\"section\", {\n        className: \"notify__content slds-grid\"\n      }, this.renderIcon(), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"slds-col slds-align-middle\"\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        id: \"dialogTitle\",\n        className: \"slds-text-heading_small\"\n      }, this.props.content)));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // TODO: If there are multiple notifications on a page, we must 'hide' the ones that aren't open.\n      // Need to find a better way to do this than using width:0 to override slds-notify-container.\n      var styles;\n\n      if (!this.props.isOpen) {\n        styles = {\n          width: '0px'\n        };\n      } else {\n        styles = this.props.variant === 'toast' ? {\n          width: 'auto',\n          left: '50%',\n          transform: 'translateX(-50%)'\n        } : {\n          width: '100%'\n        };\n      }\n\n      var alertStyles = !this.props.isOpen ? {\n        display: 'none'\n      } : null;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"slds-notify-container\",\n        style: styles\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: this.getClassName(),\n        role: \"alertdialog\",\n        \"aria-labelledby\": \"dialogTitle\",\n        style: alertStyles\n      }, this.props.isOpen ? this.renderContent() : this.blankContent()));\n    }\n  }]);\n\n  return Notification;\n}(React.Component);\n\nNotification.displayName = displayName;\nNotification.propTypes = propTypes;\nNotification.defaultProps = defaultProps;\nexport default Notification;","map":{"version":3,"sources":["../../../.tmp-es/components/notification/index.jsx"],"names":["displayName","propTypes","iconCategory","PropTypes","className","content","dismissible","duration","iconName","isOpen","onDismiss","texture","theme","variant","isRequired","defaultProps","Notification","React","Component","checkProps","setTimeout","nextProps","clearTimeout","returnFocusTo","document","activeElement","prevProps","btn","classNames","size","icon","classes","styles","width","left","transform","alertStyles","display"],"mappings":"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","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport classNames from 'classnames';\nimport Button from '../button';\nimport Icon from '../icon';\nimport checkProps from './check-props';\n\nconst displayName = 'Notification';\nconst propTypes = {\n\ticonCategory: PropTypes.string,\n\t/**\n\t * Custom classes applied to Notification element.\n\t */\n\tclassName: PropTypes.string,\n\t/**\n\t * Message for Notification.\n\t */\n\tcontent: PropTypes.node.isRequired,\n\t/**\n\t * If true, close button appears for users to dismiss Notification.\n\t */\n\tdismissible: PropTypes.bool,\n\t/**\n\t * If duration exists, the Notification will disappear after that amount of time.\n\t */\n\tduration: PropTypes.number,\n\t/**\n\t * Name of the icon. Visit <a href='http://www.lightningdesignsystem.com/resources/icons'>Lighning Design System Icons</a> to reference icon names.\n\t */\n\ticonName: PropTypes.string,\n\tisOpen: PropTypes.bool.isRequired,\n\tonDismiss: PropTypes.func,\n\t/**\n\t * Styling for Notification background.\n\t */\n\ttexture: PropTypes.bool,\n\t/**\n\t * Styling for Notification background color. Please reference <a href='http://www.lightningdesignsystem.com/components/utilities/themes/#color'>Lighning Design System Themes > Color</a>.\n\t */\n\ttheme: PropTypes.oneOf(['success', 'warning', 'error', 'offline']),\n\tvariant: PropTypes.oneOf(['alert', 'toast']).isRequired,\n};\n\nconst defaultProps = {\n\ticonCategory: 'utility',\n\tdismissible: true,\n\tisOpen: false,\n\ttexture: false,\n};\n\n/**\n * ** Notification is deprecated. Please use an Alert and Toast instead.**\n * The Notification component is the Alert and Toast variants of the Lightning Design System Notification component. For prompt notifications, use the <a href='#/modal'>Modal</a> component with <code>prompt={true}</code>.\n * The Notification opens from a state change outside of the component itself (pass this state to the <code>isOpen</code> prop).\n */\nclass Notification extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {};\n\t\tthis.timeout = null;\n\t}\n\n\tcomponentDidMount() {\n\t\tcheckProps('Notification', this.props);\n\n\t\tif (this.props.duration) {\n\t\t\tthis.timeout = setTimeout(() => {\n\t\t\t\tthis.onDismiss();\n\t\t\t}, this.props.duration);\n\t\t}\n\t}\n\n\t// eslint-disable-next-line camelcase, react/sort-comp\n\tUNSAFE_componentWillReceiveProps(nextProps) {\n\t\tif (nextProps.duration) {\n\t\t\tif (this.timeout) {\n\t\t\t\tclearTimeout(this.timeout);\n\t\t\t}\n\t\t\tif (nextProps.isOpen) {\n\t\t\t\tthis.timeout = setTimeout(() => {\n\t\t\t\t\tthis.onDismiss();\n\t\t\t\t}, this.props.duration);\n\t\t\t}\n\t\t}\n\t\tif (nextProps.isOpen !== this.props.isOpen) {\n\t\t\tthis.setState({ returnFocusTo: document.activeElement });\n\t\t}\n\t}\n\n\tcomponentDidUpdate(prevProps) {\n\t\tif (prevProps.isOpen !== this.props.isOpen) {\n\t\t\tconst btn = this.dismissBtnRef;\n\t\t\tif (btn) btn.focus();\n\t\t}\n\t}\n\n\tonDismiss = () => {\n\t\tif (this.timeout) {\n\t\t\tclearTimeout(this.timeout);\n\t\t\tthis.timeout = null;\n\t\t}\n\n\t\tif (this.props.onDismiss) this.props.onDismiss();\n\t\tif (this.state.returnFocusTo && this.state.returnFocusTo.focus) {\n\t\t\tthis.state.returnFocusTo.focus();\n\t\t}\n\t};\n\n\tgetClassName() {\n\t\treturn classNames(this.props.className, 'slds-notify', {\n\t\t\t[`slds-notify_${this.props.variant}`]: this.props.variant,\n\t\t\t[`slds-theme_${this.props.theme}`]: this.props.theme,\n\t\t\t'slds-theme_alert-texture': this.props.texture,\n\t\t});\n\t}\n\n\t/*\n\t * The parent container with role='alert' only announces its content if there is a change inside of it.\n\t * Because React renders the entire element to the DOM, we must switch out a blank div for the real content.\n\t * Bummer, I know.\n\t */\n\t// eslint-disable-next-line class-methods-use-this\n\tblankContent() {\n\t\treturn <div />;\n\t}\n\n\trenderAlertContent() {\n\t\treturn (\n\t\t\t<h2 id=\"dialogTitle\">\n\t\t\t\t{this.renderIcon()}\n\t\t\t\t{this.props.content}\n\t\t\t</h2>\n\t\t);\n\t}\n\n\trenderClose() {\n\t\tif (this.props.dismissible) {\n\t\t\tlet size = null;\n\t\t\tif (this.props.variant === 'toast') size = 'large';\n\n\t\t\t// i18n\n\t\t\treturn (\n\t\t\t\t<Button\n\t\t\t\t\tassistiveText={{ icon: 'Dismiss Notification' }}\n\t\t\t\t\ticonCategory=\"utility\"\n\t\t\t\t\ticonName=\"close\"\n\t\t\t\t\ticonSize={size}\n\t\t\t\t\tinverse\n\t\t\t\t\tclassName=\"slds-notify__close\"\n\t\t\t\t\tonClick={this.onDismiss}\n\t\t\t\t\tbuttonRef={(dismissBtn) => {\n\t\t\t\t\t\tthis.dismissBtnRef = dismissBtn;\n\t\t\t\t\t}}\n\t\t\t\t\tvariant=\"icon\"\n\t\t\t\t/>\n\t\t\t);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\trenderContent() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<span className=\"slds-assistive-text\">{this.props.theme}</span>\n\t\t\t\t{this.renderClose()}\n\t\t\t\t{this.props.variant === 'toast' ? this.renderToastContent() : null}\n\t\t\t\t{this.props.variant === 'alert' ? this.renderAlertContent() : null}\n\t\t\t</div>\n\t\t);\n\t}\n\n\trenderIcon() {\n\t\tif (this.props.iconName) {\n\t\t\tlet classes = '';\n\n\t\t\tif (this.props.variant === 'alert') {\n\t\t\t\tclasses = 'slds-m-right_x-small';\n\t\t\t} else if (this.props.variant === 'toast') {\n\t\t\t\tclasses = 'slds-m-right_small slds-col slds-no-flex';\n\t\t\t}\n\n\t\t\treturn (\n\t\t\t\t<Icon\n\t\t\t\t\tcategory={this.props.iconCategory}\n\t\t\t\t\tclassName={classes}\n\t\t\t\t\tinverse\n\t\t\t\t\tname={this.props.iconName}\n\t\t\t\t\tsize=\"small\"\n\t\t\t\t/>\n\t\t\t);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\trenderToastContent() {\n\t\treturn (\n\t\t\t<section className=\"notify__content slds-grid\">\n\t\t\t\t{this.renderIcon()}\n\t\t\t\t<div className=\"slds-col slds-align-middle\">\n\t\t\t\t\t<h2 id=\"dialogTitle\" className=\"slds-text-heading_small\">\n\t\t\t\t\t\t{this.props.content}\n\t\t\t\t\t</h2>\n\t\t\t\t</div>\n\t\t\t</section>\n\t\t);\n\t}\n\n\trender() {\n\t\t// TODO: If there are multiple notifications on a page, we must 'hide' the ones that aren't open.\n\t\t// Need to find a better way to do this than using width:0 to override slds-notify-container.\n\t\tlet styles;\n\t\tif (!this.props.isOpen) {\n\t\t\tstyles = { width: '0px' };\n\t\t} else {\n\t\t\tstyles =\n\t\t\t\tthis.props.variant === 'toast'\n\t\t\t\t\t? { width: 'auto', left: '50%', transform: 'translateX(-50%)' }\n\t\t\t\t\t: { width: '100%' };\n\t\t}\n\n\t\tconst alertStyles = !this.props.isOpen ? { display: 'none' } : null;\n\t\treturn (\n\t\t\t<div className=\"slds-notify-container\" style={styles}>\n\t\t\t\t<div\n\t\t\t\t\tclassName={this.getClassName()}\n\t\t\t\t\trole=\"alertdialog\"\n\t\t\t\t\taria-labelledby=\"dialogTitle\"\n\t\t\t\t\tstyle={alertStyles}\n\t\t\t\t>\n\t\t\t\t\t{this.props.isOpen ? this.renderContent() : this.blankContent()}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nNotification.displayName = displayName;\nNotification.propTypes = propTypes;\nNotification.defaultProps = defaultProps;\n\nexport default Notification;\n"]},"metadata":{},"sourceType":"module"}