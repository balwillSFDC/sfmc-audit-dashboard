{"version":3,"sources":["../../../.tmp-es/components/data-table/cell.jsx"],"names":["React","PropTypes","classNames","DATA_TABLE_CELL","DataTableCell","props","childText","isValidElement","children","contents","fixedLayout","title","cell","className","label","width","headerId","primaryColumn","displayName","propTypes","oneOfType","node","string","array","object","bool","item","property"],"mappings":"AAAA;;AACA;AAEA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CAEA;;AACA,OAAOC,UAAP,MAAuB,YAAvB,C,CAEA;;AACA,SAASC,eAAT,QAAgC,2BAAhC;AAEA;AACA;AACA;;AACA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAW;AAChC,MAAMC,SAAS,GAAG,aAAAN,KAAK,CAACO,cAAN,CAAqBF,KAAK,CAACG,QAA3B,IACfH,KAAK,CAACG,QAAN,CAAeH,KAAf,CAAqBG,QADN,GAEfH,KAAK,CAACG,QAFT;AAGA,MAAMC,QAAQ,gBACb;AACC,IAAA,SAAS,EAAEP,UAAU,CAAC;AACrB,uBAAiBG,KAAK,CAACK;AADF,KAAD,CADtB;AAIC,IAAA,KAAK,EAAEL,KAAK,CAACM,KAAN,IAAeL;AAJvB,KAMED,KAAK,CAACG,QANR,CADD;AAWA,MAAII,IAAI,gBACP;AACC,IAAA,SAAS,EAAEP,KAAK,CAACQ,SADlB;AAEC,kBAAYR,KAAK,CAACS,KAFnB;AAGC,IAAA,IAAI,EAAET,KAAK,CAACK,WAAN,GAAoB,UAApB,GAAiC,IAHxC;AAIC,IAAA,KAAK,EAAEL,KAAK,CAACU,KAAN,GAAc;AAAEA,MAAAA,KAAK,EAAEV,KAAK,CAACU;AAAf,KAAd,GAAuC,IAJ/C;AAKC,IAAA,OAAO,EAAEV,KAAK,CAACW;AALhB,KAOEP,QAPF,CADD;;AAYA,MAAIJ,KAAK,CAACY,aAAV,EAAyB;AACxBL,IAAAA,IAAI,gBACH;AACC,MAAA,SAAS,EAAEP,KAAK,CAACQ,SADlB;AAEC,oBAAYR,KAAK,CAACS,KAFnB;AAGC,MAAA,IAAI,EAAET,KAAK,CAACK,WAAN,GAAoB,UAApB,GAAiC,IAHxC;AAIC,MAAA,KAAK,EAAEL,KAAK,CAACU,KAAN,GAAc;AAAEA,QAAAA,KAAK,EAAEV,KAAK,CAACU;AAAf,OAAd,GAAuC;AAJ/C,OAMEN,QANF,CADD;AAUA;;AAED,SAAOG,IAAP;AACA,CAzCD,C,CA2CA;AACA;;;AACAR,aAAa,CAACc,WAAd,GAA4Bf,eAA5B,C,CAEA;;AACAC,aAAa,CAACe,SAAd,GAA0B;AACzB;AACD;AACA;AACCX,EAAAA,QAAQ,EAAEP,SAAS,CAACmB,SAAV,CAAoB,CAACnB,SAAS,CAACoB,IAAX,EAAiBpB,SAAS,CAACqB,MAA3B,CAApB,CAJe;;AAKzB;AACD;AACA;AACCT,EAAAA,SAAS,EAAEZ,SAAS,CAACmB,SAAV,CAAoB,CAC9BnB,SAAS,CAACsB,KADoB,EAE9BtB,SAAS,CAACuB,MAFoB,EAG9BvB,SAAS,CAACqB,MAHoB,CAApB,CARc;;AAazB;AACD;AACA;AACCZ,EAAAA,WAAW,EAAET,SAAS,CAACwB,IAhBE;;AAiBzB;AACD;AACA;AACCC,EAAAA,IAAI,EAAEzB,SAAS,CAACuB,MApBS;;AAqBzB;AACD;AACA;AACCP,EAAAA,aAAa,EAAEhB,SAAS,CAACwB,IAxBA;;AAyBzB;AACD;AACA;AACCE,EAAAA,QAAQ,EAAE1B,SAAS,CAACqB,MA5BK;;AA6BzB;AACD;AACA;AACCX,EAAAA,KAAK,EAAEV,SAAS,CAACqB,MAhCQ;;AAiCzB;AACD;AACA;AACCP,EAAAA,KAAK,EAAEd,SAAS,CAACqB;AApCQ,CAA1B;AAuCA,eAAelB,aAAf","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// ### React\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n// ### classNames\nimport classNames from 'classnames';\n\n// ## Constants\nimport { DATA_TABLE_CELL } from '../../utilities/constants';\n\n/**\n * The default Cell renderer for the DataTable. Pass in any React component with the same `displayName` which takes the same props to provide custom rendering.\n */\nconst DataTableCell = (props) => {\n\tconst childText = React.isValidElement(props.children)\n\t\t? props.children.props.children\n\t\t: props.children;\n\tconst contents = (\n\t\t<div\n\t\t\tclassName={classNames({\n\t\t\t\t'slds-truncate': props.fixedLayout,\n\t\t\t})}\n\t\t\ttitle={props.title || childText}\n\t\t>\n\t\t\t{props.children}\n\t\t</div>\n\t);\n\n\tlet cell = (\n\t\t<td\n\t\t\tclassName={props.className}\n\t\t\tdata-label={props.label}\n\t\t\trole={props.fixedLayout ? 'gridcell' : null}\n\t\t\tstyle={props.width ? { width: props.width } : null}\n\t\t\theaders={props.headerId}\n\t\t>\n\t\t\t{contents}\n\t\t</td>\n\t);\n\n\tif (props.primaryColumn) {\n\t\tcell = (\n\t\t\t<th\n\t\t\t\tclassName={props.className}\n\t\t\t\tdata-label={props.label}\n\t\t\t\trole={props.fixedLayout ? 'gridcell' : null}\n\t\t\t\tstyle={props.width ? { width: props.width } : null}\n\t\t\t>\n\t\t\t\t{contents}\n\t\t\t</th>\n\t\t);\n\t}\n\n\treturn cell;\n};\n\n// ### Display Name\n// Always use the canonical component name as the React display name.\nDataTableCell.displayName = DATA_TABLE_CELL;\n\n// ### Prop Types\nDataTableCell.propTypes = {\n\t/**\n\t * The contents of the cell. This can be simple text or DOM nodes. Equivalent to `props.item[props.property]`\n\t */\n\tchildren: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n\t/**\n\t * Class names to be added to the cell.\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * Use this if you are creating an advanced table (selectable, sortable, or resizable rows)\n\t */\n\tfixedLayout: PropTypes.bool,\n\t/**\n\t * The item from the items which represents this row.\n\t */\n\titem: PropTypes.object,\n\t/**\n\t * The primary column for a row. This is almost always the first column.\n\t */\n\tprimaryColumn: PropTypes.bool,\n\t/**\n\t * The property of this item to display.\n\t */\n\tproperty: PropTypes.string,\n\t/**\n\t * Shows on hover. Useful for truncated cells.\n\t */\n\ttitle: PropTypes.string,\n\t/**\n\t * Width of column. This is required for advanced/fixed layout tables. Please provide units. (`rems` are recommended)\n\t */\n\twidth: PropTypes.string,\n};\n\nexport default DataTableCell;\n"],"file":"cell.js"}